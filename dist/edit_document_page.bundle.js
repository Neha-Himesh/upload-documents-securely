/*! For license information please see edit_document_page.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={36:(t,e,n)=>{n.d(e,{Ao:()=>ui,Bx:()=>hi,Jh:()=>di,O4:()=>li,ZS:()=>mi,_L:()=>pi,fF:()=>ci,iO:()=>gi,ro:()=>fi});var i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)};function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var s,o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},a=a||{},c=o||self;function u(){}function l(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function h(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var d="closure_uid_"+(1e9*Math.random()>>>0),f=0;function p(t,e,n){return t.call.apply(t.bind,arguments)}function g(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function m(t,e,n){return(m=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?p:g).apply(null,arguments)}function y(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function v(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,i){for(var r=Array(arguments.length-2),s=2;s<arguments.length;s++)r[s-2]=arguments[s];return e.prototype[n].apply(t,r)}}function w(){this.s=this.s,this.o=this.o}var b={};w.prototype.s=!1,w.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,d)&&t[d]||(t[d]=++f)}(this);delete b[t]}},w.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};var _=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},I=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r="string"==typeof t?t.split(""):t,s=0;s<i;s++)s in r&&e.call(n,r[s],s,t)};function T(t){return Array.prototype.concat.apply([],arguments)}function E(t){var e=t.length;if(0<e){for(var n=Array(e),i=0;i<e;i++)n[i]=t[i];return n}return[]}function S(t){return/^[\s\xa0]*$/.test(t)}var A,k=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function R(t,e){return-1!=t.indexOf(e)}function N(t,e){return t<e?-1:t>e?1:0}t:{var C=c.navigator;if(C){var O=C.userAgent;if(O){A=O;break t}}A=""}function D(t,e,n){for(var i in t)e.call(n,t[i],i,t)}function P(t){var e={};for(var n in t)e[n]=t[n];return e}var L="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function x(t,e){for(var n,i,r=1;r<arguments.length;r++){for(n in i=arguments[r])t[n]=i[n];for(var s=0;s<L.length;s++)n=L[s],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function M(t){return M[" "](t),t}M[" "]=u;var U,F,V=R(A,"Opera"),j=R(A,"Trident")||R(A,"MSIE"),B=R(A,"Edge"),H=B||j,K=R(A,"Gecko")&&!(R(A.toLowerCase(),"webkit")&&!R(A,"Edge"))&&!(R(A,"Trident")||R(A,"MSIE"))&&!R(A,"Edge"),q=R(A.toLowerCase(),"webkit")&&!R(A,"Edge");function z(){var t=c.document;return t?t.documentMode:void 0}t:{var $="",G=(F=A,K?/rv:([^\);]+)(\)|;)/.exec(F):B?/Edge\/([\d\.]+)/.exec(F):j?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(F):q?/WebKit\/(\S+)/.exec(F):V?/(?:Version)[ \/]?(\S+)/.exec(F):void 0);if(G&&($=G?G[1]:""),j){var W=z();if(null!=W&&W>parseFloat($)){U=String(W);break t}}U=$}var X,Q={};function J(){return t=Q,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){for(var t=0,e=k(String(U)).split("."),n=k("9").split("."),i=Math.max(e.length,n.length),r=0;0==t&&r<i;r++){var s=e[r]||"",o=n[r]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],o=/(\d*)(\D*)(.*)/.exec(o)||["","","",""],0==s[0].length&&0==o[0].length)break;t=N(0==s[1].length?0:parseInt(s[1],10),0==o[1].length?0:parseInt(o[1],10))||N(0==s[2].length,0==o[2].length)||N(s[2],o[2]),s=s[3],o=o[3]}while(0==t)}return 0<=t}();var t}c.document&&j?X=z()||parseInt(U,10)||void 0:X=void 0;var Y=X,Z=function(){if(!c.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{c.addEventListener("test",u,e),c.removeEventListener("test",u,e)}catch(t){}return t}();function tt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function et(t,e){if(tt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(K){t:{try{M(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:nt[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&et.Z.h.call(this)}}tt.prototype.h=function(){this.defaultPrevented=!0},v(et,tt);var nt={2:"touch",3:"pen",4:"mouse"};et.prototype.h=function(){et.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var it="closure_listenable_"+(1e6*Math.random()|0),rt=0;function st(t,e,n,i,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.ia=r,this.key=++rt,this.ca=this.fa=!1}function ot(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function at(t){this.src=t,this.g={},this.h=0}function ct(t,e){var n=e.type;if(n in t.g){var i,r=t.g[n],s=_(r,e);(i=0<=s)&&Array.prototype.splice.call(r,s,1),i&&(ot(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function ut(t,e,n,i){for(var r=0;r<t.length;++r){var s=t[r];if(!s.ca&&s.listener==e&&s.capture==!!n&&s.ia==i)return r}return-1}at.prototype.add=function(t,e,n,i,r){var s=t.toString();(t=this.g[s])||(t=this.g[s]=[],this.h++);var o=ut(t,e,i,r);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new st(e,this.src,s,!!i,r)).fa=n,t.push(e)),e};var lt="closure_lm_"+(1e6*Math.random()|0),ht={};function dt(t,e,n,i,r){if(i&&i.once)return pt(t,e,n,i,r);if(Array.isArray(e)){for(var s=0;s<e.length;s++)dt(t,e[s],n,i,r);return null}return n=_t(n),t&&t[it]?t.N(e,n,h(i)?!!i.capture:!!i,r):ft(t,e,n,!1,i,r)}function ft(t,e,n,i,r,s){if(!e)throw Error("Invalid event type");var o=h(r)?!!r.capture:!!r,a=wt(t);if(a||(t[lt]=a=new at(t)),(n=a.add(e,n,i,o,s)).proxy)return n;if(i=function(){var t=vt;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)Z||(r=o),void 0===r&&(r=!1),t.addEventListener(e.toString(),i,r);else if(t.attachEvent)t.attachEvent(yt(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}return n}function pt(t,e,n,i,r){if(Array.isArray(e)){for(var s=0;s<e.length;s++)pt(t,e[s],n,i,r);return null}return n=_t(n),t&&t[it]?t.O(e,n,h(i)?!!i.capture:!!i,r):ft(t,e,n,!0,i,r)}function gt(t,e,n,i,r){if(Array.isArray(e))for(var s=0;s<e.length;s++)gt(t,e[s],n,i,r);else i=h(i)?!!i.capture:!!i,n=_t(n),t&&t[it]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=ut(s=t.g[e],n,i,r))&&(ot(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete t.g[e],t.h--))):t&&(t=wt(t))&&(e=t.g[e.toString()],t=-1,e&&(t=ut(e,n,i,r)),(n=-1<t?e[t]:null)&&mt(n))}function mt(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[it])ct(e.i,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(yt(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=wt(e))?(ct(n,t),0==n.h&&(n.src=null,e[lt]=null)):ot(t)}}}function yt(t){return t in ht?ht[t]:ht[t]="on"+t}function vt(t,e){if(t.ca)t=!0;else{e=new et(e,this);var n=t.listener,i=t.ia||t.src;t.fa&&mt(t),t=n.call(i,e)}return t}function wt(t){return(t=t[lt])instanceof at?t:null}var bt="__closure_events_fn_"+(1e9*Math.random()>>>0);function _t(t){return"function"==typeof t?t:(t[bt]||(t[bt]=function(e){return t.handleEvent(e)}),t[bt])}function It(){w.call(this),this.i=new at(this),this.P=this,this.I=null}function Tt(t,e){var n,i=t.I;if(i)for(n=[];i;i=i.I)n.push(i);if(t=t.P,i=e.type||e,"string"==typeof e)e=new tt(e,t);else if(e instanceof tt)e.target=e.target||t;else{var r=e;x(e=new tt(i,t),r)}if(r=!0,n)for(var s=n.length-1;0<=s;s--){var o=e.g=n[s];r=Et(o,i,!0,e)&&r}if(r=Et(o=e.g=t,i,!0,e)&&r,r=Et(o,i,!1,e)&&r,n)for(s=0;s<n.length;s++)r=Et(o=e.g=n[s],i,!1,e)&&r}function Et(t,e,n,i){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var r=!0,s=0;s<e.length;++s){var o=e[s];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&ct(t.i,o),r=!1!==a.call(c,i)&&r}}return r&&!i.defaultPrevented}v(It,w),It.prototype[it]=!0,It.prototype.removeEventListener=function(t,e,n,i){gt(this,t,e,n,i)},It.prototype.M=function(){if(It.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],i=0;i<n.length;i++)ot(n[i]);delete e.g[t],e.h--}}this.I=null},It.prototype.N=function(t,e,n,i){return this.i.add(String(t),e,!1,n,i)},It.prototype.O=function(t,e,n,i){return this.i.add(String(t),e,!0,n,i)};var St=c.JSON.stringify;function At(){var t=Lt,e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var kt,Rt=function(){function t(){this.h=this.g=null}return t.prototype.add=function(t,e){var n=Nt.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n},t}(),Nt=new(function(){function t(t,e){this.i=t,this.j=e,this.h=0,this.g=null}return t.prototype.get=function(){var t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t},t}())((function(){return new Ct}),(function(t){return t.reset()})),Ct=function(){function t(){this.next=this.g=this.h=null}return t.prototype.set=function(t,e){this.h=t,this.g=e,this.next=null},t.prototype.reset=function(){this.next=this.g=this.h=null},t}();function Ot(t){c.setTimeout((function(){throw t}),0)}function Dt(t,e){kt||function(){var t=c.Promise.resolve(void 0);kt=function(){t.then(xt)}}(),Pt||(kt(),Pt=!0),Lt.add(t,e)}var Pt=!1,Lt=new Rt;function xt(){for(var t;t=At();){try{t.h.call(t.g)}catch(t){Ot(t)}var e=Nt;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Pt=!1}function Mt(t,e){It.call(this),this.h=t||1,this.g=e||c,this.j=m(this.kb,this),this.l=Date.now()}function Ut(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function Ft(t,e,n){if("function"==typeof t)n&&(t=m(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=m(t.handleEvent,t)}return 2147483647<Number(e)?-1:c.setTimeout(t,e||0)}function Vt(t){t.g=Ft((function(){t.g=null,t.i&&(t.i=!1,Vt(t))}),t.j);var e=t.h;t.h=null,t.m.apply(null,e)}v(Mt,It),(s=Mt.prototype).da=!1,s.S=null,s.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),Tt(this,"tick"),this.da&&(Ut(this),this.start()))}},s.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},s.M=function(){Mt.Z.M.call(this),Ut(this),delete this.g};var jt=function(t){function e(e,n){var i=t.call(this)||this;return i.m=e,i.j=n,i.h=null,i.i=!1,i.g=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.l=function(t){this.h=arguments,this.g?this.i=!0:Vt(this)},e.prototype.M=function(){t.prototype.M.call(this),this.g&&(c.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)},e}(w);function Bt(t){w.call(this),this.h=t,this.g={}}v(Bt,w);var Ht=[];function Kt(t,e,n,i){Array.isArray(n)||(n&&(Ht[0]=n.toString()),n=Ht);for(var r=0;r<n.length;r++){var s=dt(e,n[r],i||t.handleEvent,!1,t.h||t);if(!s)break;t.g[s.key]=s}}function qt(t){D(t.g,(function(t,e){this.g.hasOwnProperty(e)&&mt(t)}),t),t.g={}}function zt(){this.g=!0}function $t(t,e,n,i){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var i=n[t];if(!(2>i.length)){var r=i[1];if(Array.isArray(r)&&!(1>r.length)){var s=r[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<r.length;o++)r[o]=""}}}return St(n)}catch(t){return e}}(t,n)+(i?" "+i:"")}))}Bt.prototype.M=function(){Bt.Z.M.call(this),qt(this)},Bt.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},zt.prototype.Aa=function(){this.g=!1},zt.prototype.info=function(){};var Gt={},Wt=null;function Xt(){return Wt=Wt||new It}function Qt(t){tt.call(this,Gt.Ma,t)}function Jt(t){var e=Xt();Tt(e,new Qt(e,t))}function Yt(t,e){tt.call(this,Gt.STAT_EVENT,t),this.stat=e}function Zt(t){var e=Xt();Tt(e,new Yt(e,t))}function te(t,e){tt.call(this,Gt.Na,t),this.size=e}function ee(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return c.setTimeout((function(){t()}),e)}Gt.Ma="serverreachability",v(Qt,tt),Gt.STAT_EVENT="statevent",v(Yt,tt),Gt.Na="timingevent",v(te,tt);var ne={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},ie={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function re(){}function se(t){return t.h||(t.h=t.i())}function oe(){}re.prototype.h=null;var ae,ce={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function ue(){tt.call(this,"d")}function le(){tt.call(this,"c")}function he(){}function de(t,e,n,i){this.l=t,this.j=e,this.m=n,this.X=i||1,this.V=new Bt(this),this.P=pe,t=H?125:void 0,this.W=new Mt(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new fe}function fe(){this.i=null,this.g="",this.h=!1}v(ue,tt),v(le,tt),v(he,re),he.prototype.g=function(){return new XMLHttpRequest},he.prototype.i=function(){return{}},ae=new he;var pe=45e3,ge={},me={};function ye(t,e,n){t.K=1,t.v=je(Le(e)),t.s=n,t.U=!0,ve(t,null)}function ve(t,e){t.F=Date.now(),Ie(t),t.A=Le(t.v);var n=t.A,i=t.X;Array.isArray(i)||(i=[String(i)]),Ze(n.h,"t",i),t.C=0,n=t.l.H,t.h=new fe,t.g=ei(t.l,n?e:null,!t.s),0<t.O&&(t.L=new jt(m(t.Ia,t,t.g),t.O)),Kt(t.V,t.g,"readystatechange",t.gb),e=t.H?P(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),Jt(1),function(t,e,n,i,r,s){t.info((function(){if(t.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+i+") [attempt "+r+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function we(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function be(t,e,n){for(var i,r=!0;!t.I&&t.C<n.length;){if((i=_e(t,n))==me){4==e&&(t.o=4,Zt(14),r=!1),$t(t.j,t.m,null,"[Incomplete Response]");break}if(i==ge){t.o=4,Zt(15),$t(t.j,t.m,n,"[Invalid Chunk]"),r=!1;break}$t(t.j,t.m,i,null),ke(t,i)}we(t)&&i!=me&&i!=ge&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,Zt(16),r=!1),t.i=t.i&&r,r?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Gn(e),e.L=!0,Zt(11))):($t(t.j,t.m,n,"[Invalid Chunked Response]"),Ae(t),Se(t))}function _e(t,e){var n=t.C,i=e.indexOf("\n",n);return-1==i?me:(n=Number(e.substring(n,i)),isNaN(n)?ge:(i+=1)+n>e.length?me:(e=e.substr(i,n),t.C=i+n,e))}function Ie(t){t.Y=Date.now()+t.P,Te(t,t.P)}function Te(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=ee(m(t.eb,t),e)}function Ee(t){t.B&&(c.clearTimeout(t.B),t.B=null)}function Se(t){0==t.l.G||t.I||Qn(t.l,t)}function Ae(t){Ee(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,Ut(t.W),qt(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function ke(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||an(n.i,t)))if(n.I=t.N,!t.J&&an(n.i,t)&&3==n.G){try{var i=n.Ca.g.parse(e)}catch(s){i=null}if(Array.isArray(i)&&3==i.length){var r=i;if(0==r[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Xn(n),Fn(n)}$n(n),Zt(18)}}else n.ta=r[1],0<n.ta-n.U&&37500>r[2]&&n.N&&0==n.A&&!n.v&&(n.v=ee(m(n.ab,n),6e3));if(1>=on(n.i)&&n.ka){try{n.ka()}catch(s){}n.ka=void 0}}else Yn(n,11)}else if((t.J||n.g==t)&&Xn(n),!S(e))for(r=n.Ca.g.parse(e),e=0;e<r.length;e++){var s=r[e];if(n.U=s[0],s=s[1],2==n.G)if("c"==s[0]){n.J=s[1],n.la=s[2];var o=s[3];null!=o&&(n.ma=o,n.h.info("VER="+n.ma));var a=s[4];null!=a&&(n.za=a,n.h.info("SVER="+n.za));var c=s[5];null!=c&&"number"==typeof c&&0<c&&(i=1.5*c,n.K=i,n.h.info("backChannelRequestTimeoutMs_="+i)),i=n;var u=t.g;if(u){var l=u.g?u.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(l){var h=i.i;!h.g&&(R(l,"spdy")||R(l,"quic")||R(l,"h2"))&&(h.j=h.l,h.g=new Set,h.h&&(cn(h,h.h),h.h=null))}if(i.D){var d=u.g?u.g.getResponseHeader("X-HTTP-Session-Id"):null;d&&(i.sa=d,Ve(i.F,i.D,d))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var f=t;if((i=n).oa=ti(i,i.H?i.la:null,i.W),f.J){un(i.i,f);var p=f,g=i.K;g&&p.setTimeout(g),p.B&&(Ee(p),Ie(p)),i.g=f}else zn(i);0<n.l.length&&Bn(n)}else"stop"!=s[0]&&"close"!=s[0]||Yn(n,7);else 3==n.G&&("stop"==s[0]||"close"==s[0]?"stop"==s[0]?Yn(n,7):Un(n):"noop"!=s[0]&&n.j&&n.j.wa(s),n.A=0)}Jt(4)}catch(s){}}function Re(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(l(t)||"string"==typeof t)I(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(l(t)||"string"==typeof t){n=[];for(var i=t.length,r=0;r<i;r++)n.push(r)}else for(r in n=[],i=0,t)n[i++]=r;i=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(l(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}(t),r=i.length;for(var s=0;s<r;s++)e.call(void 0,i[s],n&&n[s],t)}}function Ne(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof Ne)for(n=t.T(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function Ce(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var i=t.g[e];Oe(t.h,i)&&(t.g[n++]=i),e++}t.g.length=n}if(t.i!=t.g.length){var r={};for(n=e=0;e<t.g.length;)Oe(r,i=t.g[e])||(t.g[n++]=i,r[i]=1),e++;t.g.length=n}}function Oe(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(s=de.prototype).setTimeout=function(t){this.P=t},s.gb=function(t){t=t.target;var e=this.L;e&&3==Dn(t)?e.l():this.Ia(t)},s.Ia=function(t){try{if(t==this.g)t:{var e=Dn(this.g),n=this.g.Da(),i=this.g.ba();if(!(3>e)&&(3!=e||H||this.g&&(this.h.h||this.g.ga()||Pn(this.g)))){this.I||4!=e||7==n||Jt(8==n||0>=i?3:2),Ee(this);var r=this.g.ba();this.N=r;e:if(we(this)){var s=Pn(this.g);t="";var o=s.length,a=4==Dn(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){Ae(this),Se(this);var u="";break e}this.h.i=new c.TextDecoder}for(n=0;n<o;n++)this.h.h=!0,t+=this.h.i.decode(s[n],{stream:a&&n==o-1});s.splice(0,o),this.h.g+=t,this.C=0,u=this.h.g}else u=this.g.ga();if(this.i=200==r,function(t,e,n,i,r,s,o){t.info((function(){return"XMLHTTP RESP ("+i+") [ attempt "+r+"]: "+e+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.X,e,r),this.i){if(this.$&&!this.J){e:{if(this.g){var l,h=this.g;if((l=h.g?h.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!S(l)){var d=l;break e}}d=null}if(!(r=d)){this.i=!1,this.o=3,Zt(12),Ae(this),Se(this);break t}$t(this.j,this.m,r,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,ke(this,r)}this.U?(be(this,e,u),H&&this.i&&3==e&&(Kt(this.V,this.W,"tick",this.fb),this.W.start())):($t(this.j,this.m,u,null),ke(this,u)),4==e&&Ae(this),this.i&&!this.I&&(4==e?Qn(this.l,this):(this.i=!1,Ie(this)))}else 400==r&&0<u.indexOf("Unknown SID")?(this.o=3,Zt(12)):(this.o=0,Zt(13)),Ae(this),Se(this)}}}catch(e){}},s.fb=function(){if(this.g){var t=Dn(this.g),e=this.g.ga();this.C<e.length&&(Ee(this),be(this,t,e),this.i&&4!=t&&Ie(this))}},s.cancel=function(){this.I=!0,Ae(this)},s.eb=function(){this.B=null;var t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(Jt(3),Zt(17)),Ae(this),this.o=2,Se(this)):Te(this,this.Y-t)},(s=Ne.prototype).R=function(){Ce(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},s.T=function(){return Ce(this),this.g.concat()},s.get=function(t,e){return Oe(this.h,t)?this.h[t]:e},s.set=function(t,e){Oe(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},s.forEach=function(t,e){for(var n=this.T(),i=0;i<n.length;i++){var r=n[i],s=this.get(r);t.call(e,s,r,this)}};var De=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Pe(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof Pe){this.g=void 0!==e?e:t.g,xe(this,t.j),this.s=t.s,Me(this,t.i),Ue(this,t.m),this.l=t.l,e=t.h;var n=new Xe;n.i=e.i,e.g&&(n.g=new Ne(e.g),n.h=e.h),Fe(this,n),this.o=t.o}else t&&(n=String(t).match(De))?(this.g=!!e,xe(this,n[1]||"",!0),this.s=Be(n[2]||""),Me(this,n[3]||"",!0),Ue(this,n[4]),this.l=Be(n[5]||"",!0),Fe(this,n[6]||"",!0),this.o=Be(n[7]||"")):(this.g=!!e,this.h=new Xe(null,this.g))}function Le(t){return new Pe(t)}function xe(t,e,n){t.j=n?Be(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function Me(t,e,n){t.i=n?Be(e,!0):e}function Ue(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Fe(t,e,n){e instanceof Xe?(t.h=e,function(t,e){e&&!t.j&&(Qe(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Je(this,e),Ze(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=He(e,Ge)),t.h=new Xe(e,t.g))}function Ve(t,e,n){t.h.set(e,n)}function je(t){return Ve(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function Be(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function He(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Ke),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Ke(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Pe.prototype.toString=function(){var t=[],e=this.j;e&&t.push(He(e,qe,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(He(e,qe,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(He(n,"/"==n.charAt(0)?$e:ze,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",He(n,We)),t.join("")};var qe=/[#\/\?@]/g,ze=/[#\?:]/g,$e=/[#\?]/g,Ge=/[#\?@]/g,We=/#/g;function Xe(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Qe(t){t.g||(t.g=new Ne,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),r=null;if(0<=i){var s=t[n].substring(0,i);r=t[n].substring(i+1)}else s=t[n];e(s,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Je(t,e){Qe(t),e=tn(t,e),Oe(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,Oe((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&Ce(t)))}function Ye(t,e){return Qe(t),e=tn(t,e),Oe(t.g.h,e)}function Ze(t,e,n){Je(t,e),0<n.length&&(t.i=null,t.g.set(tn(t,e),E(n)),t.h+=n.length)}function tn(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}(s=Xe.prototype).add=function(t,e){Qe(this),this.i=null,t=tn(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},s.forEach=function(t,e){Qe(this),this.g.forEach((function(n,i){I(n,(function(n){t.call(e,n,i,this)}),this)}),this)},s.T=function(){Qe(this);for(var t=this.g.R(),e=this.g.T(),n=[],i=0;i<e.length;i++)for(var r=t[i],s=0;s<r.length;s++)n.push(e[i]);return n},s.R=function(t){Qe(this);var e=[];if("string"==typeof t)Ye(this,t)&&(e=T(e,this.g.get(tn(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=T(e,t[n])}return e},s.set=function(t,e){return Qe(this),this.i=null,Ye(this,t=tn(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},s.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},s.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var i=e[n],r=encodeURIComponent(String(i));i=this.R(i);for(var s=0;s<i.length;s++){var o=r;""!==i[s]&&(o+="="+encodeURIComponent(String(i[s]))),t.push(o)}}return this.i=t.join("&")};var en=function(t,e){this.h=t,this.g=e};function nn(t){this.l=t||rn,t=c.PerformanceNavigationTiming?0<(t=c.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(c.g&&c.g.Ea&&c.g.Ea()&&c.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}var rn=10;function sn(t){return!!t.h||!!t.g&&t.g.size>=t.j}function on(t){return t.h?1:t.g?t.g.size:0}function an(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function cn(t,e){t.g?t.g.add(e):t.h=e}function un(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function ln(t){var e,n;if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){var i=t.i;try{for(var s=r(t.g.values()),o=s.next();!o.done;o=s.next()){var a=o.value;i=i.concat(a.D)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return i}return E(t.i)}function hn(){}function dn(){this.g=new hn}function fn(t,e,n){var i=n||"";try{Re(t,(function(t,n){var r=t;h(t)&&(r=St(t)),e.push(i+n+"="+encodeURIComponent(r))}))}catch(t){throw e.push(i+"type="+encodeURIComponent("_badmap")),t}}function pn(t,e,n,i,r){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,r(i)}catch(t){}}function gn(t){this.l=t.$b||null,this.j=t.ib||!1}function mn(t,e){It.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=yn,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}nn.prototype.cancel=function(){var t,e;if(this.i=ln(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){try{for(var n=r(this.g.values()),i=n.next();!i.done;i=n.next())i.value.cancel()}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.g.clear()}},hn.prototype.stringify=function(t){return c.JSON.stringify(t,void 0)},hn.prototype.parse=function(t){return c.JSON.parse(t,void 0)},v(gn,re),gn.prototype.g=function(){return new mn(this.l,this.j)},gn.prototype.i=function(t){return function(){return t}}({}),v(mn,It);var yn=0;function vn(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function wn(t){t.readyState=4,t.l=null,t.j=null,t.A=null,bn(t)}function bn(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(s=mn.prototype).open=function(t,e){if(this.readyState!=yn)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,bn(this)},s.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;var e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||c).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},s.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,wn(this)),this.readyState=yn},s.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,bn(this)),this.g&&(this.readyState=3,bn(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==c.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;vn(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},s.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?wn(this):bn(this),3==this.readyState&&vn(this)}},s.Ua=function(t){this.g&&(this.response=this.responseText=t,wn(this))},s.Ta=function(t){this.g&&(this.response=t,wn(this))},s.ha=function(){this.g&&wn(this)},s.setRequestHeader=function(t,e){this.v.append(t,e)},s.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},s.getAllResponseHeaders=function(){if(!this.h)return"";for(var t=[],e=this.h.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(mn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var _n=c.JSON.parse;function In(t){It.call(this),this.headers=new Ne,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=Tn,this.K=this.L=!1}v(In,It);var Tn="",En=/^https?$/i,Sn=["POST","PUT"];function An(t){return"content-type"==t.toLowerCase()}function kn(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Rn(t),Cn(t)}function Rn(t){t.D||(t.D=!0,Tt(t,"complete"),Tt(t,"error"))}function Nn(t){if(t.h&&void 0!==a&&(!t.C[1]||4!=Dn(t)||2!=t.ba()))if(t.v&&4==Dn(t))Ft(t.Fa,0,t);else if(Tt(t,"readystatechange"),4==Dn(t)){t.h=!1;try{var e,n=t.ba();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break t;default:i=!1}if(!(e=i)){var r;if(r=0===n){var s=String(t.H).match(De)[1]||null;if(!s&&c.self&&c.self.location){var o=c.self.location.protocol;s=o.substr(0,o.length-1)}r=!En.test(s?s.toLowerCase():"")}e=r}if(e)Tt(t,"complete"),Tt(t,"success");else{t.m=6;try{var u=2<Dn(t)?t.g.statusText:""}catch(t){u=""}t.j=u+" ["+t.ba()+"]",Rn(t)}}finally{Cn(t)}}}function Cn(t,e){if(t.g){On(t);var n=t.g,i=t.C[0]?u:null;t.g=null,t.C=null,e||Tt(t,"ready");try{n.onreadystatechange=i}catch(t){}}}function On(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(c.clearTimeout(t.A),t.A=null)}function Dn(t){return t.g?t.g.readyState:0}function Pn(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case Tn:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function Ln(t,e,n){t:{for(i in n){var i=!1;break t}i=!0}i||(n=function(t){var e="";return D(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Ve(t,e,n))}function xn(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Mn(t){this.za=0,this.l=[],this.h=new zt,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=xn("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=xn("baseRetryDelayMs",5e3,t),this.$a=xn("retryDelaySeedMs",1e4,t),this.Ya=xn("forwardChannelMaxRetries",2,t),this.ra=xn("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new nn(t&&t.concurrentRequestLimit),this.Ca=new dn,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function Un(t){if(Vn(t),3==t.G){var e=t.V++,n=Le(t.F);Ve(n,"SID",t.J),Ve(n,"RID",e),Ve(n,"TYPE","terminate"),Kn(t,n),(e=new de(t,t.h,e,void 0)).K=2,e.v=je(Le(n)),n=!1,c.navigator&&c.navigator.sendBeacon&&(n=c.navigator.sendBeacon(e.v.toString(),"")),!n&&c.Image&&((new Image).src=e.v,n=!0),n||(e.g=ei(e.l,null),e.g.ea(e.v)),e.F=Date.now(),Ie(e)}Zn(t)}function Fn(t){t.g&&(Gn(t),t.g.cancel(),t.g=null)}function Vn(t){Fn(t),t.u&&(c.clearTimeout(t.u),t.u=null),Xn(t),t.i.cancel(),t.m&&("number"==typeof t.m&&c.clearTimeout(t.m),t.m=null)}function jn(t,e){t.l.push(new en(t.Za++,e)),3==t.G&&Bn(t)}function Bn(t){sn(t.i)||t.m||(t.m=!0,Dt(t.Ha,t),t.C=0)}function Hn(t,e){var n;n=e?e.m:t.V++;var i=Le(t.F);Ve(i,"SID",t.J),Ve(i,"RID",n),Ve(i,"AID",t.U),Kn(t,i),t.o&&t.s&&Ln(i,t.o,t.s),n=new de(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=qn(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),cn(t.i,n),ye(n,i,e)}function Kn(t,e){t.j&&Re({},(function(t,n){Ve(e,n,t)}))}function qn(t,e,n){n=Math.min(t.l.length,n);var i=t.j?m(t.j.Oa,t.j,t):null;t:for(var r=t.l,s=-1;;){var o=["count="+n];-1==s?0<n?(s=r[0].h,o.push("ofs="+s)):s=0:o.push("ofs="+s);for(var a=!0,c=0;c<n;c++){var u=r[c].h,l=r[c].g;if(0>(u-=s))s=Math.max(0,r[c].h-100),a=!1;else try{fn(l,o,"req"+u+"_")}catch(t){i&&i(l)}}if(a){i=o.join("&");break t}}return t=t.l.splice(0,n),e.D=t,i}function zn(t){t.g||t.u||(t.Y=1,Dt(t.Ga,t),t.A=0)}function $n(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=ee(m(t.Ga,t),Jn(t,t.A)),t.A++,0))}function Gn(t){null!=t.B&&(c.clearTimeout(t.B),t.B=null)}function Wn(t){t.g=new de(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=Le(t.oa);Ve(e,"RID","rpc"),Ve(e,"SID",t.J),Ve(e,"CI",t.N?"0":"1"),Ve(e,"AID",t.U),Kn(t,e),Ve(e,"TYPE","xmlhttp"),t.o&&t.s&&Ln(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=je(Le(e)),n.s=null,n.U=!0,ve(n,t)}function Xn(t){null!=t.v&&(c.clearTimeout(t.v),t.v=null)}function Qn(t,e){var n=null;if(t.g==e){Xn(t),Gn(t),t.g=null;var i=2}else{if(!an(t.i,e))return;n=e.D,un(t.i,e),i=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==i){n=e.s?e.s.length:0,e=Date.now()-e.F;var r=t.C;Tt(i=Xt(),new te(i,n,e,r)),Bn(t)}else zn(t);else if(3==(r=e.o)||0==r&&0<t.I||!(1==i&&function(t,e){return!(on(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=ee(m(t.Ha,t,e),Jn(t,t.C)),t.C++,0)))}(t,e)||2==i&&$n(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),r){case 1:Yn(t,5);break;case 4:Yn(t,10);break;case 3:Yn(t,6);break;default:Yn(t,2)}}function Jn(t,e){var n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function Yn(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var i=m(t.jb,t);n||(n=new Pe("//www.google.com/images/cleardot.gif"),c.location&&"http"==c.location.protocol||xe(n,"https"),je(n)),function(t,e){var n=new zt;if(c.Image){var i=new Image;i.onload=y(pn,n,i,"TestLoadImage: loaded",!0,e),i.onerror=y(pn,n,i,"TestLoadImage: error",!1,e),i.onabort=y(pn,n,i,"TestLoadImage: abort",!1,e),i.ontimeout=y(pn,n,i,"TestLoadImage: timeout",!1,e),c.setTimeout((function(){i.ontimeout&&i.ontimeout()}),1e4),i.src=t}else e(!1)}(n.toString(),i)}else Zt(2);t.G=0,t.j&&t.j.va(e),Zn(t),Vn(t)}function Zn(t){t.G=0,t.I=-1,t.j&&(0==ln(t.i).length&&0==t.l.length||(t.i.i.length=0,E(t.l),t.l.length=0),t.j.ua())}function ti(t,e,n){var i=function(t){return t instanceof Pe?Le(t):new Pe(t,void 0)}(n);if(""!=i.i)e&&Me(i,e+"."+i.i),Ue(i,i.m);else{var r=c.location;i=function(t,e,n,i){var r=new Pe(null,void 0);return t&&xe(r,t),e&&Me(r,e),n&&Ue(r,n),i&&(r.l=i),r}(r.protocol,e?e+"."+r.hostname:r.hostname,+r.port,n)}return t.aa&&D(t.aa,(function(t,e){Ve(i,e,t)})),e=t.D,n=t.sa,e&&n&&Ve(i,e,n),Ve(i,"VER",t.ma),Kn(t,i),i}function ei(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new In(new gn({ib:!0})):new In(t.qa)).L=t.H,e}function ni(){}function ii(){if(j&&!(10<=Number(Y)))throw Error("Environmental error: no available transport.")}function ri(t,e){It.call(this),this.g=new Mn(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!S(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!S(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new ai(this)}function si(t){ue.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function oi(){le.call(this),this.status=1}function ai(t){this.g=t}(s=In.prototype).ea=function(t,e,n,i){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():ae.g(),this.C=this.u?se(this.u):se(ae),this.g.onreadystatechange=m(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void kn(this,t)}t=n||"";var r=new Ne(this.headers);i&&Re(i,(function(t,e){r.set(e,t)})),i=function(t){t:{for(var e=An,n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t)){e=r;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(r.T()),n=c.FormData&&t instanceof c.FormData,!(0<=_(Sn,e))||i||n||r.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),r.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{On(this),0<this.B&&((this.K=function(t){return j&&J()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=m(this.pa,this)):this.A=Ft(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){kn(this,t)}},s.pa=function(){void 0!==a&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Tt(this,"timeout"),this.abort(8))},s.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,Tt(this,"complete"),Tt(this,"abort"),Cn(this))},s.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),Cn(this,!0)),In.Z.M.call(this)},s.Fa=function(){this.s||(this.F||this.v||this.l?Nn(this):this.cb())},s.cb=function(){Nn(this)},s.ba=function(){try{return 2<Dn(this)?this.g.status:-1}catch(t){return-1}},s.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},s.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),_n(e)}},s.Da=function(){return this.m},s.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(s=Mn.prototype).ma=8,s.G=1,s.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},s.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;var e=new de(this,this.h,t,void 0),n=this.s;if(this.P&&(n?x(n=P(n),this.P):n=this.P),null===this.o&&(e.H=n),this.ja)t:{for(var i=0,r=0;r<this.l.length;r++){var s=this.l[r];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(i+=s)){i=r;break t}if(4096===i||r===this.l.length-1){i=r+1;break t}}i=1e3}else i=1e3;i=qn(this,e,i),Ve(r=Le(this.F),"RID",t),Ve(r,"CVER",22),this.D&&Ve(r,"X-HTTP-Session-Id",this.D),Kn(this,r),this.o&&n&&Ln(r,this.o,n),cn(this.i,e),this.Ra&&Ve(r,"TYPE","init"),this.ja?(Ve(r,"$req",i),Ve(r,"SID","null"),e.$=!0,ye(e,r,null)):ye(e,r,i),this.G=2}}else 3==this.G&&(t?Hn(this,t):0==this.l.length||sn(this.i)||Hn(this))},s.Ga=function(){if(this.u=null,Wn(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=ee(m(this.bb,this),t)}},s.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,Zt(10),Fn(this),Wn(this))},s.ab=function(){null!=this.v&&(this.v=null,Fn(this),$n(this),Zt(19))},s.jb=function(t){t?(this.h.info("Successfully pinged google.com"),Zt(2)):(this.h.info("Failed to ping google.com"),Zt(1))},(s=ni.prototype).xa=function(){},s.wa=function(){},s.va=function(){},s.ua=function(){},s.Oa=function(){},ii.prototype.g=function(t,e){return new ri(t,e)},v(ri,It),ri.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),Dt(m(t.hb,t,e))),Zt(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=ti(t,null,t.W),Bn(t)},ri.prototype.close=function(){Un(this.g)},ri.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,jn(this.g,e)}else this.v?((e={}).__data__=St(t),jn(this.g,e)):jn(this.g,t)},ri.prototype.M=function(){this.g.j=null,delete this.j,Un(this.g),delete this.g,ri.Z.M.call(this)},v(si,ue),v(oi,le),v(ai,ni),ai.prototype.xa=function(){Tt(this.g,"a")},ai.prototype.wa=function(t){Tt(this.g,new si(t))},ai.prototype.va=function(t){Tt(this.g,new oi(t))},ai.prototype.ua=function(){Tt(this.g,"b")},ii.prototype.createWebChannel=ii.prototype.g,ri.prototype.send=ri.prototype.u,ri.prototype.open=ri.prototype.m,ri.prototype.close=ri.prototype.close,ne.NO_ERROR=0,ne.TIMEOUT=8,ne.HTTP_ERROR=6,ie.COMPLETE="complete",oe.EventType=ce,ce.OPEN="a",ce.CLOSE="b",ce.ERROR="c",ce.MESSAGE="d",It.prototype.listen=It.prototype.N,In.prototype.listenOnce=In.prototype.O,In.prototype.getLastError=In.prototype.La,In.prototype.getLastErrorCode=In.prototype.Da,In.prototype.getStatus=In.prototype.ba,In.prototype.getResponseJson=In.prototype.Qa,In.prototype.getResponseText=In.prototype.ga,In.prototype.send=In.prototype.ea;var ci=function(){return new ii},ui=function(){return Xt()},li=ne,hi=ie,di=Gt,fi={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},pi=gn,gi=oe,mi=In},106:(t,e,n)=>{function i(){const t=document.querySelectorAll("#navbarNav .nav-link"),e=window.location.pathname.split("/").pop();console.log(`Current Path: ${e}`),t.forEach((t=>{const n=t.getAttribute("href");console.log(`Link path: ${n}`),(n.endsWith(".html")?n.slice(0,-5):n)===(e.endsWith(".html")?e.slice(0,-5):e)?t.classList.add("active"):t.classList.remove("active")}))}n.d(e,{S:()=>i})},134:(t,e,n)=>{n.d(e,{h1:()=>c,uA:()=>s});var i=n(635),r=n(625),s=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),o="[DEFAULT]",a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new r.cY;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var i=this.getOrInitializeService({instanceIdentifier:e});i&&n.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:o})}catch(t){}try{for(var r=(0,i.Ju)(this.instancesDeferred.entries()),s=r.next();!s.done;s=r.next()){var a=(0,i.zs)(s.value,2),c=a[0],u=a[1],l=this.normalizeInstanceIdentifier(c);try{var h=this.getOrInitializeService({instanceIdentifier:l});u.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=o),this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,i.sH)(this,void 0,void 0,(function(){var t;return(0,i.YH)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,i.fX)((0,i.fX)([],(0,i.zs)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),(0,i.zs)(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=o),this.instances.has(t)},t.prototype.getOptions=function(t){return void 0===t&&(t=o),this.instancesOptions.get(t)||{}},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var r=t.options,s=void 0===r?{}:r,o=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(o))throw Error(this.name+"("+o+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var a=this.getOrInitializeService({instanceIdentifier:o,options:s});try{for(var c=(0,i.Ju)(this.instancesDeferred.entries()),u=c.next();!u.done;u=c.next()){var l=(0,i.zs)(u.value,2),h=l[0],d=l[1];o===this.normalizeInstanceIdentifier(h)&&d.resolve(a)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(e)throw e.error}}return a},t.prototype.onInit=function(t,e){var n,i=this.normalizeInstanceIdentifier(e),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(t),this.onInitCallbacks.set(i,r);var s=this.instances.get(i);return s&&t(s,i),function(){r.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,r,s=this.onInitCallbacks.get(e);if(s)try{for(var o=(0,i.Ju)(s),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,i=t.options,r=void 0===i?{}:i,s=this.instances.get(n);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===o?void 0:e),options:r}),this.instances.set(n,s),this.instancesOptions.set(n,r),this.invokeOnInitCallbacks(s,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,s)}catch(t){}return s||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=o),this.component?this.component.multipleInstances?t:o:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}(),c=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},137:(t,e,n)=>{n.d(e,{n:()=>Ae});var i=n(625),r=n(468),s=n(635),o=n(477),a=n(134);const c=new i.FA("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),u=new o.Vy("@firebase/auth");function l(t,...e){u.logLevel<=o.$b.ERROR&&u.error(`Auth (${r.MF}): ${t}`,...e)}function h(t,...e){throw f(t,...e)}function d(t,...e){return f(t,...e)}function f(t,...e){if("string"!=typeof t){const n=e[0],i=[...e.slice(1)];return i[0]&&(i[0].appName=t.name),t._errorFactory.create(n,...i)}return c.create(t,...e)}function p(t,e,...n){if(!t)throw f(e,...n)}function g(t){const e="INTERNAL ASSERTION FAILED: "+t;throw l(e),new Error(e)}function m(t,e){t||g(e)}const y=new Map;function v(t){m(t instanceof Function,"Expected a class definition");let e=y.get(t);return e?(m(e instanceof t,"Instance stored in cache mismatched with class"),e):(e=new t,y.set(t,e),e)}function w(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.href)||""}function b(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.protocol)||null}class _{constructor(t,e){this.shortDelay=t,this.longDelay=e,m(e>t,"Short delay should be less than long delay!"),this.isMobile=(0,i.jZ)()||(0,i.lV)()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===b()||"https:"===b()||(0,i.sr)()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function I(t,e){m(t.emulator,"Emulator should always be set here");const{url:n}=t.emulator;return e?`${n}${e.startsWith("/")?e.slice(1):e}`:n}class T{static initialize(t,e,n){this.fetchImpl=t,e&&(this.headersImpl=e),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void g("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void g("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void g("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const E={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded"},S=new _(3e4,6e4);function A(t,e){return t.tenantId&&!e.tenantId?Object.assign(Object.assign({},e),{tenantId:t.tenantId}):e}async function k(t,e,n,r,s={}){return R(t,s,(()=>{let s={},o={};r&&("GET"===e?o=r:s={body:JSON.stringify(r)});const a=(0,i.Am)(Object.assign({key:t.config.apiKey},o)).slice(1),c=new(T.headers());return c.set("Content-Type","application/json"),c.set("X-Client-Version",t._getSdkClientVersion()),t.languageCode&&c.set("X-Firebase-Locale",t.languageCode),T.fetch()(C(t,t.config.apiHost,n,a),Object.assign({method:e,headers:c,referrerPolicy:"no-referrer"},s))}))}async function R(t,e,n){t._canInitEmulator=!1;const r=Object.assign(Object.assign({},E),e);try{const e=new O(t),i=await Promise.race([n(),e.promise]);e.clearNetworkTimeout();const s=await i.json();if("needConfirmation"in s)throw D(t,"account-exists-with-different-credential",s);if(i.ok&&!("errorMessage"in s))return s;{const e=(i.ok?s.errorMessage:s.error.message).split(" : ")[0];if("FEDERATED_USER_ID_ALREADY_LINKED"===e)throw D(t,"credential-already-in-use",s);if("EMAIL_EXISTS"===e)throw D(t,"email-already-in-use",s);h(t,r[e]||e.toLowerCase().replace(/[_\s]+/g,"-"))}}catch(e){if(e instanceof i.g)throw e;h(t,"network-request-failed")}}async function N(t,e,n,i,r={}){const s=await k(t,e,n,i,r);return"mfaPendingCredential"in s&&h(t,"multi-factor-auth-required",{serverResponse:s}),s}function C(t,e,n,i){const r=`${e}${n}?${i}`;return t.config.emulator?I(t.config,r):`${t.config.apiScheme}://${r}`}class O{constructor(t){this.auth=t,this.timer=null,this.promise=new Promise(((t,e)=>{this.timer=setTimeout((()=>e(d(this.auth,"timeout"))),S.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function D(t,e,n){const i={appName:t.name};n.email&&(i.email=n.email),n.phoneNumber&&(i.phoneNumber=n.phoneNumber);const r=d(t,e,i);return r.customData._tokenResponse=n,r}function P(t){if(t)try{const e=new Date(Number(t));if(!isNaN(e.getTime()))return e.toUTCString()}catch(t){}}function L(t){return 1e3*Number(t)}function x(t){const[e,n,r]=t.split(".");if(void 0===e||void 0===n||void 0===r)return l("JWT malformed, contained fewer than 3 sections"),null;try{const t=(0,i.u)(n);return t?JSON.parse(t):(l("Failed to decode base64 JWT payload"),null)}catch(t){return l("Caught error parsing JWT payload as JSON",t),null}}async function M(t,e,n=!1){if(n)return e;try{return await e}catch(e){throw e instanceof i.g&&function({code:t}){return"auth/user-disabled"===t||"auth/user-token-expired"===t}(e)&&t.auth.currentUser===t&&await t.auth.signOut(),e}}class U{constructor(t){this.user=t,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(t){var e;if(t){const t=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),t}{this.errorBackoff=3e4;const t=(null!==(e=this.user.stsTokenManager.expirationTime)&&void 0!==e?e:0)-Date.now()-3e5;return Math.max(0,t)}}schedule(t=!1){if(!this.isRunning)return;const e=this.getInterval(t);this.timerId=setTimeout((async()=>{await this.iteration()}),e)}async iteration(){try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===t.code&&this.schedule(!0))}this.schedule()}}class F{constructor(t,e){this.createdAt=t,this.lastLoginAt=e,this._initializeTime()}_initializeTime(){this.lastSignInTime=P(this.lastLoginAt),this.creationTime=P(this.createdAt)}_copy(t){this.createdAt=t.createdAt,this.lastLoginAt=t.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function V(t){var e;const n=t.auth,i=await t.getIdToken(),r=await M(t,async function(t,e){return k(t,"POST","/v1/accounts:lookup",e)}(n,{idToken:i}));p(null==r?void 0:r.users.length,n,"internal-error");const o=r.users[0];t._notifyReloadListener(o);const a=(null===(e=o.providerUserInfo)||void 0===e?void 0:e.length)?o.providerUserInfo.map((t=>{var{providerId:e}=t,n=(0,s.Tt)(t,["providerId"]);return{providerId:e,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],c=(u=t.providerData,l=a,[...u.filter((t=>!l.some((e=>e.providerId===t.providerId)))),...l]);var u,l;const h=t.isAnonymous,d=!(t.email&&o.passwordHash||(null==c?void 0:c.length)),f=!!h&&d,g={uid:o.localId,displayName:o.displayName||null,photoURL:o.photoUrl||null,email:o.email||null,emailVerified:o.emailVerified||!1,phoneNumber:o.phoneNumber||null,tenantId:o.tenantId||null,providerData:c,metadata:new F(o.createdAt,o.lastLoginAt),isAnonymous:f};Object.assign(t,g)}class j{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(t){p(t.idToken,"internal-error"),p(void 0!==t.idToken,"internal-error"),p(void 0!==t.refreshToken,"internal-error");const e="expiresIn"in t&&void 0!==t.expiresIn?Number(t.expiresIn):function(t){const e=x(t);return p(e,"internal-error"),p(void 0!==e.exp,"internal-error"),p(void 0!==e.iat,"internal-error"),Number(e.exp)-Number(e.iat)}(t.idToken);this.updateTokensAndExpiration(t.idToken,t.refreshToken,e)}async getToken(t,e=!1){return p(!this.accessToken||this.refreshToken,t,"user-token-expired"),e||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(t,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(t,e){const{accessToken:n,refreshToken:r,expiresIn:s}=await async function(t,e){const n=await R(t,{},(()=>{const n=(0,i.Am)({grant_type:"refresh_token",refresh_token:e}).slice(1),{tokenApiHost:r,apiKey:s}=t.config,o=C(t,r,"/v1/token",`key=${s}`);return T.fetch()(o,{method:"POST",headers:{"X-Client-Version":t._getSdkClientVersion(),"Content-Type":"application/x-www-form-urlencoded"},body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(t,e);this.updateTokensAndExpiration(n,r,Number(s))}updateTokensAndExpiration(t,e,n){this.refreshToken=e||null,this.accessToken=t||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(t,e){const{refreshToken:n,accessToken:i,expirationTime:r}=e,s=new j;return n&&(p("string"==typeof n,"internal-error",{appName:t}),s.refreshToken=n),i&&(p("string"==typeof i,"internal-error",{appName:t}),s.accessToken=i),r&&(p("number"==typeof r,"internal-error",{appName:t}),s.expirationTime=r),s}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(t){this.accessToken=t.accessToken,this.refreshToken=t.refreshToken,this.expirationTime=t.expirationTime}_clone(){return Object.assign(new j,this.toJSON())}_performRefresh(){return g("not implemented")}}function B(t,e){p("string"==typeof t||void 0===t,"internal-error",{appName:e})}class H{constructor(t){var{uid:e,auth:n,stsTokenManager:i}=t,r=(0,s.Tt)(t,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.emailVerified=!1,this.isAnonymous=!1,this.tenantId=null,this.providerData=[],this.proactiveRefresh=new U(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=e,this.auth=n,this.stsTokenManager=i,this.accessToken=i.accessToken,this.displayName=r.displayName||null,this.email=r.email||null,this.phoneNumber=r.phoneNumber||null,this.photoURL=r.photoURL||null,this.isAnonymous=r.isAnonymous||!1,this.metadata=new F(r.createdAt||void 0,r.lastLoginAt||void 0)}async getIdToken(t){const e=await M(this,this.stsTokenManager.getToken(this.auth,t));return p(e,this.auth,"internal-error"),this.accessToken!==e&&(this.accessToken=e,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),e}getIdTokenResult(t){return async function(t,e=!1){const n=(0,i.Ku)(t),r=await n.getIdToken(e),s=x(r);p(s&&s.exp&&s.auth_time&&s.iat,n.auth,"internal-error");const o="object"==typeof s.firebase?s.firebase:void 0,a=null==o?void 0:o.sign_in_provider;return{claims:s,token:r,authTime:P(L(s.auth_time)),issuedAtTime:P(L(s.iat)),expirationTime:P(L(s.exp)),signInProvider:a||null,signInSecondFactor:(null==o?void 0:o.sign_in_second_factor)||null}}(this,t)}reload(){return async function(t){const e=(0,i.Ku)(t);await V(e),await e.auth._persistUserIfCurrent(e),e.auth._notifyListenersIfCurrent(e)}(this)}_assign(t){this!==t&&(p(this.uid===t.uid,this.auth,"internal-error"),this.displayName=t.displayName,this.photoURL=t.photoURL,this.email=t.email,this.emailVerified=t.emailVerified,this.phoneNumber=t.phoneNumber,this.isAnonymous=t.isAnonymous,this.tenantId=t.tenantId,this.providerData=t.providerData.map((t=>Object.assign({},t))),this.metadata._copy(t.metadata),this.stsTokenManager._assign(t.stsTokenManager))}_clone(t){return new H(Object.assign(Object.assign({},this),{auth:t,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(t){p(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=t,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(t){this.reloadListener?this.reloadListener(t):this.reloadUserInfo=t}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(t,e=!1){let n=!1;t.idToken&&t.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(t),n=!0),e&&await V(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const t=await this.getIdToken();return await M(this,async function(t,e){return k(t,"POST","/v1/accounts:delete",e)}(this.auth,{idToken:t})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((t=>Object.assign({},t))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(t,e){var n,i,r,s,o,a,c,u;const l=null!==(n=e.displayName)&&void 0!==n?n:void 0,h=null!==(i=e.email)&&void 0!==i?i:void 0,d=null!==(r=e.phoneNumber)&&void 0!==r?r:void 0,f=null!==(s=e.photoURL)&&void 0!==s?s:void 0,g=null!==(o=e.tenantId)&&void 0!==o?o:void 0,m=null!==(a=e._redirectEventId)&&void 0!==a?a:void 0,y=null!==(c=e.createdAt)&&void 0!==c?c:void 0,v=null!==(u=e.lastLoginAt)&&void 0!==u?u:void 0,{uid:w,emailVerified:b,isAnonymous:_,providerData:I,stsTokenManager:T}=e;p(w&&T,t,"internal-error");const E=j.fromJSON(this.name,T);p("string"==typeof w,t,"internal-error"),B(l,t.name),B(h,t.name),p("boolean"==typeof b,t,"internal-error"),p("boolean"==typeof _,t,"internal-error"),B(d,t.name),B(f,t.name),B(g,t.name),B(m,t.name),B(y,t.name),B(v,t.name);const S=new H({uid:w,auth:t,email:h,emailVerified:b,displayName:l,isAnonymous:_,photoURL:f,phoneNumber:d,tenantId:g,stsTokenManager:E,createdAt:y,lastLoginAt:v});return I&&Array.isArray(I)&&(S.providerData=I.map((t=>Object.assign({},t)))),m&&(S._redirectEventId=m),S}static async _fromIdTokenResponse(t,e,n=!1){const i=new j;i.updateFromServerResponse(e);const r=new H({uid:e.localId,auth:t,stsTokenManager:i,isAnonymous:n});return await V(r),r}}class K{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(t,e){this.storage[t]=e}async _get(t){const e=this.storage[t];return void 0===e?null:e}async _remove(t){delete this.storage[t]}_addListener(t,e){}_removeListener(t,e){}}K.type="NONE";const q=K;function z(t,e,n){return`firebase:${t}:${e}:${n}`}class ${constructor(t,e,n){this.persistence=t,this.auth=e,this.userKey=n;const{config:i,name:r}=this.auth;this.fullUserKey=z(this.userKey,i.apiKey,r),this.fullPersistenceKey=z("persistence",i.apiKey,r),this.boundEventHandler=e._onStorageEvent.bind(e),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(t){return this.persistence._set(this.fullUserKey,t.toJSON())}async getCurrentUser(){const t=await this.persistence._get(this.fullUserKey);return t?H._fromJSON(this.auth,t):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(t){if(this.persistence===t)return;const e=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=t,e?this.setCurrentUser(e):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(t,e,n="authUser"){if(!e.length)return new $(v(q),t,n);const i=(await Promise.all(e.map((async t=>{if(await t._isAvailable())return t})))).filter((t=>t));let r=i[0]||v(q);const s=z(n,t.config.apiKey,t.name);let o=null;for(const n of e)try{const e=await n._get(s);if(e){const i=H._fromJSON(t,e);n!==r&&(o=i),r=n;break}}catch(t){}const a=i.filter((t=>t._shouldAllowMigration));return r._shouldAllowMigration&&a.length?(r=a[0],o&&await r._set(s,o.toJSON()),await Promise.all(e.map((async t=>{if(t!==r)try{await t._remove(s)}catch(t){}}))),new $(r,t,n)):new $(r,t,n)}}function G(t){const e=t.toLowerCase();if(e.includes("opera/")||e.includes("opr/")||e.includes("opios/"))return"Opera";if(J(e))return"IEMobile";if(e.includes("msie")||e.includes("trident/"))return"IE";if(e.includes("edge/"))return"Edge";if(W(e))return"Firefox";if(e.includes("silk/"))return"Silk";if(Z(e))return"Blackberry";if(tt(e))return"Webos";if(X(e))return"Safari";if((e.includes("chrome/")||Q(e))&&!e.includes("edge/"))return"Chrome";if(Y(e))return"Android";{const e=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=t.match(e);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function W(t=(0,i.ZQ)()){return/firefox\//i.test(t)}function X(t=(0,i.ZQ)()){const e=t.toLowerCase();return e.includes("safari/")&&!e.includes("chrome/")&&!e.includes("crios/")&&!e.includes("android")}function Q(t=(0,i.ZQ)()){return/crios\//i.test(t)}function J(t=(0,i.ZQ)()){return/iemobile/i.test(t)}function Y(t=(0,i.ZQ)()){return/android/i.test(t)}function Z(t=(0,i.ZQ)()){return/blackberry/i.test(t)}function tt(t=(0,i.ZQ)()){return/webos/i.test(t)}function et(t=(0,i.ZQ)()){return/iphone|ipad|ipod/i.test(t)}function nt(t=(0,i.ZQ)()){return et(t)||Y(t)||tt(t)||Z(t)||/windows phone/i.test(t)||J(t)}function it(t,e=[]){let n;switch(t){case"Browser":n=G((0,i.ZQ)());break;case"Worker":n=`${G((0,i.ZQ)())}-${t}`;break;default:n=t}const s=e.length?e.join(","):"FirebaseCore-web";return`${n}/JsCore/${r.MF}/${s}`}class rt{constructor(t,e){this.app=t,this.config=e,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new ot(this),this.idTokenSubscription=new ot(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=c,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=t.name,this.clientVersion=e.sdkClientVersion}_initializeWithPersistence(t,e){return e&&(this._popupRedirectResolver=v(e)),this._initializationPromise=this.queue((async()=>{var n;this._deleted||(this.persistenceManager=await $.create(this,t),this._deleted||((null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)&&await this._popupRedirectResolver._initialize(this),await this.initializeCurrentUser(e),this._deleted||(this._isInitialized=!0)))})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const t=await this.assertedPersistence.getCurrentUser();return this.currentUser||t?this.currentUser&&t&&this.currentUser.uid===t.uid?(this._currentUser._assign(t),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(t):void 0}async initializeCurrentUser(t){var e;let n=await this.assertedPersistence.getCurrentUser();if(t&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const i=null===(e=this.redirectUser)||void 0===e?void 0:e._redirectEventId,r=null==n?void 0:n._redirectEventId,s=await this.tryRedirectSignIn(t);i&&i!==r||!(null==s?void 0:s.user)||(n=s.user)}return n?n._redirectEventId?(p(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===n._redirectEventId?this.directlySetCurrentUser(n):this.reloadAndSetCurrentUserOrClear(n)):this.reloadAndSetCurrentUserOrClear(n):this.directlySetCurrentUser(null)}async tryRedirectSignIn(t){let e=null;try{e=await this._popupRedirectResolver._completeRedirectFn(this,t,!0)}catch(t){await this._setRedirectUser(null)}return e}async reloadAndSetCurrentUserOrClear(t){try{await V(t)}catch(t){if("auth/network-request-failed"!==t.code)return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(t)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const t=navigator;return t.languages&&t.languages[0]||t.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(t){const e=t?(0,i.Ku)(t):null;return e&&p(e.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(e&&e._clone(this))}async _updateCurrentUser(t){if(!this._deleted)return t&&p(this.tenantId===t.tenantId,this,"tenant-id-mismatch"),this.queue((async()=>{await this.directlySetCurrentUser(t),this.notifyAuthListeners()}))}async signOut(){return(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null)}setPersistence(t){return this.queue((async()=>{await this.assertedPersistence.setPersistence(v(t))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(t){this._errorFactory=new i.FA("auth","Firebase",t())}onAuthStateChanged(t,e,n){return this.registerStateListener(this.authStateSubscription,t,e,n)}onIdTokenChanged(t,e,n){return this.registerStateListener(this.idTokenSubscription,t,e,n)}toJSON(){var t;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(t=this._currentUser)||void 0===t?void 0:t.toJSON()}}async _setRedirectUser(t,e){const n=await this.getOrInitRedirectPersistenceManager(e);return null===t?n.removeCurrentUser():n.setCurrentUser(t)}async getOrInitRedirectPersistenceManager(t){if(!this.redirectPersistenceManager){const e=t&&v(t)||this._popupRedirectResolver;p(e,this,"argument-error"),this.redirectPersistenceManager=await $.create(this,[v(e._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(t){var e,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(e=this._currentUser)||void 0===e?void 0:e._redirectEventId)===t?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===t?this.redirectUser:null}async _persistUserIfCurrent(t){if(t===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(t)))}_notifyListenersIfCurrent(t){t===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var t,e;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(e=null===(t=this.currentUser)||void 0===t?void 0:t.uid)&&void 0!==e?e:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(t,e,n,i){if(this._deleted)return()=>{};const r="function"==typeof e?e:e.next.bind(e),s=this._isInitialized?Promise.resolve():this._initializationPromise;return p(s,this,"internal-error"),s.then((()=>r(this.currentUser))),"function"==typeof e?t.addObserver(e,n,i):t.addObserver(e)}async directlySetCurrentUser(t){this.currentUser&&this.currentUser!==t&&(this._currentUser._stopProactiveRefresh(),t&&this.isProactiveRefreshEnabled&&t._startProactiveRefresh()),this.currentUser=t,t?await this.assertedPersistence.setCurrentUser(t):await this.assertedPersistence.removeCurrentUser()}queue(t){return this.operations=this.operations.then(t,t),this.operations}get assertedPersistence(){return p(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(t){t&&!this.frameworks.includes(t)&&(this.frameworks.push(t),this.frameworks.sort(),this.clientVersion=it(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}_getSdkClientVersion(){return this.clientVersion}}function st(t){return(0,i.Ku)(t)}class ot{constructor(t){this.auth=t,this.observer=null,this.addObserver=(0,i.tD)((t=>this.observer=t))}get next(){return p(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class at{constructor(t,e){this.providerId=t,this.signInMethod=e}toJSON(){return g("not implemented")}_getIdTokenResponse(t){return g("not implemented")}_linkToIdToken(t,e){return g("not implemented")}_getReauthenticationResolver(t){return g("not implemented")}}class ct extends at{constructor(t,e,n,i=null){super("password",n),this._email=t,this._password=e,this._tenantId=i}static _fromEmailAndPassword(t,e){return new ct(t,e,"password")}static _fromEmailAndCode(t,e,n=null){return new ct(t,e,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t;if((null==e?void 0:e.email)&&(null==e?void 0:e.password)){if("password"===e.signInMethod)return this._fromEmailAndPassword(e.email,e.password);if("emailLink"===e.signInMethod)return this._fromEmailAndCode(e.email,e.password,e.tenantId)}return null}async _getIdTokenResponse(t){switch(this.signInMethod){case"password":return async function(t,e){return N(t,"POST","/v1/accounts:signInWithPassword",A(t,e))}(t,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return N(t,"POST","/v1/accounts:signInWithEmailLink",A(t,e))}(t,{email:this._email,oobCode:this._password});default:h(t,"internal-error")}}async _linkToIdToken(t,e){switch(this.signInMethod){case"password":return async function(t,e){return k(t,"POST","/v1/accounts:update",e)}(t,{idToken:e,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return N(t,"POST","/v1/accounts:signInWithEmailLink",A(t,e))}(t,{idToken:e,email:this._email,oobCode:this._password});default:h(t,"internal-error")}}_getReauthenticationResolver(t){return this._getIdTokenResponse(t)}}async function ut(t,e){return N(t,"POST","/v1/accounts:signInWithIdp",A(t,e))}class lt extends at{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(t){const e=new lt(t.providerId,t.signInMethod);return t.idToken||t.accessToken?(t.idToken&&(e.idToken=t.idToken),t.accessToken&&(e.accessToken=t.accessToken),t.nonce&&!t.pendingToken&&(e.nonce=t.nonce),t.pendingToken&&(e.pendingToken=t.pendingToken)):t.oauthToken&&t.oauthTokenSecret?(e.accessToken=t.oauthToken,e.secret=t.oauthTokenSecret):h("argument-error"),e}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t,{providerId:n,signInMethod:i}=e,r=(0,s.Tt)(e,["providerId","signInMethod"]);if(!n||!i)return null;const o=new lt(n,i);return Object.assign(o,r),o}_getIdTokenResponse(t){return ut(t,this.buildRequest())}_linkToIdToken(t,e){const n=this.buildRequest();return n.idToken=e,ut(t,n)}_getReauthenticationResolver(t){const e=this.buildRequest();return e.autoCreate=!1,ut(t,e)}buildRequest(){const t={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)t.pendingToken=this.pendingToken;else{const e={};this.idToken&&(e.id_token=this.idToken),this.accessToken&&(e.access_token=this.accessToken),this.secret&&(e.oauth_token_secret=this.secret),e.providerId=this.providerId,this.nonce&&!this.pendingToken&&(e.nonce=this.nonce),t.postBody=(0,i.Am)(e)}return t}}const ht={USER_NOT_FOUND:"user-not-found"};class dt extends at{constructor(t){super("phone","phone"),this.params=t}static _fromVerification(t,e){return new dt({verificationId:t,verificationCode:e})}static _fromTokenResponse(t,e){return new dt({phoneNumber:t,temporaryProof:e})}_getIdTokenResponse(t){return async function(t,e){return N(t,"POST","/v1/accounts:signInWithPhoneNumber",A(t,e))}(t,this._makeVerificationRequest())}_linkToIdToken(t,e){return async function(t,e){const n=await N(t,"POST","/v1/accounts:signInWithPhoneNumber",A(t,e));if(n.temporaryProof)throw D(t,"account-exists-with-different-credential",n);return n}(t,Object.assign({idToken:e},this._makeVerificationRequest()))}_getReauthenticationResolver(t){return async function(t,e){return N(t,"POST","/v1/accounts:signInWithPhoneNumber",A(t,Object.assign(Object.assign({},e),{operation:"REAUTH"})),ht)}(t,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:t,phoneNumber:e,verificationId:n,verificationCode:i}=this.params;return t&&e?{temporaryProof:t,phoneNumber:e}:{sessionInfo:n,code:i}}toJSON(){const t={providerId:this.providerId};return this.params.phoneNumber&&(t.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(t.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(t.verificationCode=this.params.verificationCode),this.params.verificationId&&(t.verificationId=this.params.verificationId),t}static fromJSON(t){"string"==typeof t&&(t=JSON.parse(t));const{verificationId:e,verificationCode:n,phoneNumber:i,temporaryProof:r}=t;return n||e||i||r?new dt({verificationId:e,verificationCode:n,phoneNumber:i,temporaryProof:r}):null}}class ft{constructor(t){var e,n,r,s,o,a;const c=(0,i.I9)((0,i.hp)(t)),u=null!==(e=c.apiKey)&&void 0!==e?e:null,l=null!==(n=c.oobCode)&&void 0!==n?n:null,h=function(t){switch(t){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(r=c.mode)&&void 0!==r?r:null);p(u&&l&&h,"argument-error"),this.apiKey=u,this.operation=h,this.code=l,this.continueUrl=null!==(s=c.continueUrl)&&void 0!==s?s:null,this.languageCode=null!==(o=c.languageCode)&&void 0!==o?o:null,this.tenantId=null!==(a=c.tenantId)&&void 0!==a?a:null}static parseLink(t){const e=function(t){const e=(0,i.I9)((0,i.hp)(t)).link,n=e?(0,i.I9)((0,i.hp)(e)).deep_link_id:null,r=(0,i.I9)((0,i.hp)(t)).deep_link_id;return(r?(0,i.I9)((0,i.hp)(r)).link:null)||r||n||e||t}(t);try{return new ft(e)}catch(t){return null}}}class pt{constructor(){this.providerId=pt.PROVIDER_ID}static credential(t,e){return ct._fromEmailAndPassword(t,e)}static credentialWithLink(t,e){const n=ft.parseLink(e);return p(n,"argument-error"),ct._fromEmailAndCode(t,n.code,n.tenantId)}}pt.PROVIDER_ID="password",pt.EMAIL_PASSWORD_SIGN_IN_METHOD="password",pt.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class gt{constructor(t){this.providerId=t,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(t){this.defaultLanguageCode=t}setCustomParameters(t){return this.customParameters=t,this}getCustomParameters(){return this.customParameters}}class mt extends gt{constructor(){super(...arguments),this.scopes=[]}addScope(t){return this.scopes.includes(t)||this.scopes.push(t),this}getScopes(){return[...this.scopes]}}class yt extends mt{constructor(){super("facebook.com")}static credential(t){return lt._fromParams({providerId:yt.PROVIDER_ID,signInMethod:yt.FACEBOOK_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return yt.credentialFromTaggedObject(t)}static credentialFromError(t){return yt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return yt.credential(t.oauthAccessToken)}catch(t){return null}}}yt.FACEBOOK_SIGN_IN_METHOD="facebook.com",yt.PROVIDER_ID="facebook.com";class vt extends mt{constructor(){super("google.com"),this.addScope("profile")}static credential(t,e){return lt._fromParams({providerId:vt.PROVIDER_ID,signInMethod:vt.GOOGLE_SIGN_IN_METHOD,idToken:t,accessToken:e})}static credentialFromResult(t){return vt.credentialFromTaggedObject(t)}static credentialFromError(t){return vt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthIdToken:e,oauthAccessToken:n}=t;if(!e&&!n)return null;try{return vt.credential(e,n)}catch(t){return null}}}vt.GOOGLE_SIGN_IN_METHOD="google.com",vt.PROVIDER_ID="google.com";class wt extends mt{constructor(){super("github.com")}static credential(t){return lt._fromParams({providerId:wt.PROVIDER_ID,signInMethod:wt.GITHUB_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return wt.credentialFromTaggedObject(t)}static credentialFromError(t){return wt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return wt.credential(t.oauthAccessToken)}catch(t){return null}}}wt.GITHUB_SIGN_IN_METHOD="github.com",wt.PROVIDER_ID="github.com";class bt extends mt{constructor(){super("twitter.com")}static credential(t,e){return lt._fromParams({providerId:bt.PROVIDER_ID,signInMethod:bt.TWITTER_SIGN_IN_METHOD,oauthToken:t,oauthTokenSecret:e})}static credentialFromResult(t){return bt.credentialFromTaggedObject(t)}static credentialFromError(t){return bt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthAccessToken:e,oauthTokenSecret:n}=t;if(!e||!n)return null;try{return bt.credential(e,n)}catch(t){return null}}}bt.TWITTER_SIGN_IN_METHOD="twitter.com",bt.PROVIDER_ID="twitter.com";class _t{constructor(t){this.user=t.user,this.providerId=t.providerId,this._tokenResponse=t._tokenResponse,this.operationType=t.operationType}static async _fromIdTokenResponse(t,e,n,i=!1){const r=await H._fromIdTokenResponse(t,n,i),s=It(n);return new _t({user:r,providerId:s,_tokenResponse:n,operationType:e})}static async _forOperation(t,e,n){await t._updateTokensIfNecessary(n,!0);const i=It(n);return new _t({user:t,providerId:i,_tokenResponse:n,operationType:e})}}function It(t){return t.providerId?t.providerId:"phoneNumber"in t?"phone":null}class Tt extends i.g{constructor(t,e,n,i){var r;super(e.code,e.message),this.operationType=n,this.user=i,this.name="FirebaseError",Object.setPrototypeOf(this,Tt.prototype),this.appName=t.name,this.code=e.code,this.tenantId=null!==(r=t.tenantId)&&void 0!==r?r:void 0,this.serverResponse=e.customData.serverResponse}static _fromErrorAndOperation(t,e,n,i){return new Tt(t,e,n,i)}}function Et(t,e,n,i){return("reauthenticate"===e?n._getReauthenticationResolver(t):n._getIdTokenResponse(t)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Tt._fromErrorAndOperation(t,n,e,i);throw n}))}new WeakMap;const St="__sak";class At{constructor(t,e){this.storage=t,this.type=e}_isAvailable(){try{return this.storage?(this.storage.setItem(St,"1"),this.storage.removeItem(St),Promise.resolve(!0)):Promise.resolve(!1)}catch(t){return Promise.resolve(!1)}}_set(t,e){return this.storage.setItem(t,JSON.stringify(e)),Promise.resolve()}_get(t){const e=this.storage.getItem(t);return Promise.resolve(e?JSON.parse(e):null)}_remove(t){return this.storage.removeItem(t),Promise.resolve()}}class kt extends At{constructor(){super(window.localStorage,"LOCAL"),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const t=(0,i.ZQ)();return X(t)||et(t)}()&&function(){try{return!(!window||window===window.top)}catch(t){return!1}}(),this.fallbackToPolling=nt(),this._shouldAllowMigration=!0,this.boundEventHandler=this.onStorageEvent.bind(this)}forAllChangedKeys(t){for(const e of Object.keys(this.listeners)){const n=this.storage.getItem(e),i=this.localCache[e];n!==i&&t(e,i,n)}}onStorageEvent(t,e=!1){if(!t.key)return void this.forAllChangedKeys(((t,e,n)=>{this.notifyListeners(t,n)}));const n=t.key;if(e?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const i=this.storage.getItem(n);if(t.newValue!==i)null!==t.newValue?this.storage.setItem(n,t.newValue):this.storage.removeItem(n);else if(this.localCache[n]===t.newValue&&!e)return}const r=()=>{const t=this.storage.getItem(n);(e||this.localCache[n]!==t)&&this.notifyListeners(n,t)},s=this.storage.getItem(n);(0,i.lT)()&&10===document.documentMode&&s!==t.newValue&&t.newValue!==t.oldValue?setTimeout(r,10):r()}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e?JSON.parse(e):e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((t,e,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:t,oldValue:e,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(t,e){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[t]||(this.listeners[t]=new Set,this.localCache[t]=this.storage.getItem(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(t,e){await super._set(t,e),this.localCache[t]=JSON.stringify(e)}async _get(t){const e=await super._get(t);return this.localCache[t]=JSON.stringify(e),e}async _remove(t){await super._remove(t),delete this.localCache[t]}}kt.type="LOCAL";const Rt=kt;class Nt extends At{constructor(){super(window.sessionStorage,"SESSION")}_addListener(t,e){}_removeListener(t,e){}}Nt.type="SESSION";const Ct=Nt;class Ot{constructor(t){this.eventTarget=t,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(t){const e=this.receivers.find((e=>e.isListeningto(t)));if(e)return e;const n=new Ot(t);return this.receivers.push(n),n}isListeningto(t){return this.eventTarget===t}async handleEvent(t){const e=t,{eventId:n,eventType:i,data:r}=e.data,s=this.handlersMap[i];if(!(null==s?void 0:s.size))return;e.ports[0].postMessage({status:"ack",eventId:n,eventType:i});const o=Array.from(s).map((async t=>t(e.origin,r))),a=await function(t){return Promise.all(t.map((async t=>{try{return{fulfilled:!0,value:await t}}catch(t){return{fulfilled:!1,reason:t}}})))}(o);e.ports[0].postMessage({status:"done",eventId:n,eventType:i,response:a})}_subscribe(t,e){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[t]||(this.handlersMap[t]=new Set),this.handlersMap[t].add(e)}_unsubscribe(t,e){this.handlersMap[t]&&e&&this.handlersMap[t].delete(e),e&&0!==this.handlersMap[t].size||delete this.handlersMap[t],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Dt(t="",e=10){let n="";for(let t=0;t<e;t++)n+=Math.floor(10*Math.random());return t+n}Ot.receivers=[];class Pt{constructor(t){this.target=t,this.handlers=new Set}removeMessageHandler(t){t.messageChannel&&(t.messageChannel.port1.removeEventListener("message",t.onMessage),t.messageChannel.port1.close()),this.handlers.delete(t)}async _send(t,e,n=50){const i="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!i)throw new Error("connection_unavailable");let r,s;return new Promise(((o,a)=>{const c=Dt("",20);i.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);s={messageChannel:i,onMessage(t){const e=t;if(e.data.eventId===c)switch(e.data.status){case"ack":clearTimeout(u),r=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(r),o(e.data.response);break;default:clearTimeout(u),clearTimeout(r),a(new Error("invalid_response"))}}},this.handlers.add(s),i.port1.addEventListener("message",s.onMessage),this.target.postMessage({eventType:t,eventId:c,data:e},[i.port2])})).finally((()=>{s&&this.removeMessageHandler(s)}))}}function Lt(){return window}function xt(){return void 0!==Lt().WorkerGlobalScope&&"function"==typeof Lt().importScripts}const Mt="firebaseLocalStorageDb",Ut="firebaseLocalStorage",Ft="fbase_key";class Vt{constructor(t){this.request=t}toPromise(){return new Promise(((t,e)=>{this.request.addEventListener("success",(()=>{t(this.request.result)})),this.request.addEventListener("error",(()=>{e(this.request.error)}))}))}}function jt(t,e){return t.transaction([Ut],e?"readwrite":"readonly").objectStore(Ut)}function Bt(){const t=indexedDB.open(Mt,1);return new Promise(((e,n)=>{t.addEventListener("error",(()=>{n(t.error)})),t.addEventListener("upgradeneeded",(()=>{const e=t.result;try{e.createObjectStore(Ut,{keyPath:Ft})}catch(t){n(t)}})),t.addEventListener("success",(async()=>{const n=t.result;n.objectStoreNames.contains(Ut)?e(n):(n.close(),await function(){const t=indexedDB.deleteDatabase(Mt);return new Vt(t).toPromise()}(),e(await Bt()))}))}))}async function Ht(t,e,n){const i=jt(t,!0).put({[Ft]:e,value:n});return new Vt(i).toPromise()}function Kt(t,e){const n=jt(t,!0).delete(e);return new Vt(n).toPromise()}class qt{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await Bt()),this.db}async _withRetries(t){let e=0;for(;;)try{const e=await this._openDb();return await t(e)}catch(t){if(e++>3)throw t;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return xt()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Ot._getInstance(xt()?self:null),this.receiver._subscribe("keyChanged",(async(t,e)=>({keyProcessed:(await this._poll()).includes(e.key)}))),this.receiver._subscribe("ping",(async(t,e)=>["keyChanged"]))}async initializeSender(){var t,e;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(t){return null}}(),!this.activeServiceWorker)return;this.sender=new Pt(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(t=n[0])||void 0===t?void 0:t.fulfilled)&&(null===(e=n[0])||void 0===e?void 0:e.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(t){var e;if(this.sender&&this.activeServiceWorker&&((null===(e=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===e?void 0:e.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:t},this.serviceWorkerReceiverAvailable?800:50)}catch(e){}}async _isAvailable(){try{if(!indexedDB)return!1;const t=await Bt();return await Ht(t,St,"1"),await Kt(t,St),!0}catch(t){}return!1}async _withPendingWrite(t){this.pendingWrites++;try{await t()}finally{this.pendingWrites--}}async _set(t,e){return this._withPendingWrite((async()=>(await this._withRetries((n=>Ht(n,t,e))),this.localCache[t]=e,this.notifyServiceWorker(t))))}async _get(t){const e=await this._withRetries((e=>async function(t,e){const n=jt(t,!1).get(e),i=await new Vt(n).toPromise();return void 0===i?null:i.value}(e,t)));return this.localCache[t]=e,e}async _remove(t){return this._withPendingWrite((async()=>(await this._withRetries((e=>Kt(e,t))),delete this.localCache[t],this.notifyServiceWorker(t))))}async _poll(){const t=await this._withRetries((t=>{const e=jt(t,!1).getAll();return new Vt(e).toPromise()}));if(!t)return[];if(0!==this.pendingWrites)return[];const e=[],n=new Set;for(const{fbase_key:i,value:r}of t)n.add(i),JSON.stringify(this.localCache[i])!==JSON.stringify(r)&&(this.notifyListeners(i,r),e.push(i));for(const t of Object.keys(this.localCache))this.localCache[t]&&!n.has(t)&&(this.notifyListeners(t,null),e.push(t));return e}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(t,e){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[t]||(this.listeners[t]=new Set,this._get(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&this.stopPolling()}}qt.type="LOCAL";const zt=qt;function $t(t){return`__${t}${Math.floor(1e6*Math.random())}`}$t("rcb"),new _(3e4,6e4);class Gt{constructor(t){this.providerId=Gt.PROVIDER_ID,this.auth=st(t)}verifyPhoneNumber(t,e){return async function(t,e,n){var i;const r=await n.verify();try{let s;if(p("string"==typeof r,t,"argument-error"),p("recaptcha"===n.type,t,"argument-error"),s="string"==typeof e?{phoneNumber:e}:e,"session"in s){const e=s.session;if("phoneNumber"in s){p("enroll"===e.type,t,"internal-error");const n=await function(t,e){return k(t,"POST","/v2/accounts/mfaEnrollment:start",Object.assign({tenantId:t.tenantId},e))}(t,{idToken:e.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,recaptchaToken:r}});return n.phoneSessionInfo.sessionInfo}{p("signin"===e.type,t,"internal-error");const n=(null===(i=s.multiFactorHint)||void 0===i?void 0:i.uid)||s.multiFactorUid;p(n,t,"missing-multi-factor-info");const o=await function(t,e){return k(t,"POST","/v2/accounts/mfaSignIn:start",Object.assign({tenantId:t.tenantId},e))}(t,{mfaPendingCredential:e.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:r}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:e}=await async function(t,e){return k(t,"POST","/v1/accounts:sendVerificationCode",A(t,e))}(t,{phoneNumber:s.phoneNumber,recaptchaToken:r});return e}}finally{n._reset()}}(this.auth,t,(0,i.Ku)(e))}static credential(t,e){return dt._fromVerification(t,e)}static credentialFromResult(t){const e=t;return Gt.credentialFromTaggedObject(e)}static credentialFromError(t){return Gt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{phoneNumber:e,temporaryProof:n}=t;return e&&n?dt._fromTokenResponse(e,n):null}}Gt.PROVIDER_ID="phone",Gt.PHONE_SIGN_IN_METHOD="phone";class Wt extends at{constructor(t){super("custom","custom"),this.params=t}_getIdTokenResponse(t){return ut(t,this._buildIdpRequest())}_linkToIdToken(t,e){return ut(t,this._buildIdpRequest(e))}_getReauthenticationResolver(t){return ut(t,this._buildIdpRequest())}_buildIdpRequest(t){const e={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return t&&(e.idToken=t),e}}function Xt(t){return async function(t,e,n=!1){const i="signIn",r=await Et(t,i,e),s=await _t._fromIdTokenResponse(t,i,r);return n||await t._updateCurrentUser(s.user),s}(t.auth,new Wt(t),t.bypassAuthState)}function Qt(t){const{auth:e,user:n}=t;return p(n,e,"internal-error"),async function(t,e,n=!1){const{auth:i}=t,r="reauthenticate";try{const s=await M(t,Et(i,r,e,t),n);p(s.idToken,i,"internal-error");const o=x(s.idToken);p(o,i,"internal-error");const{sub:a}=o;return p(t.uid===a,i,"user-mismatch"),_t._forOperation(t,r,s)}catch(t){throw"auth/user-not-found"===(null==t?void 0:t.code)&&h(i,"user-mismatch"),t}}(n,new Wt(t),t.bypassAuthState)}async function Jt(t){const{auth:e,user:n}=t;return p(n,e,"internal-error"),async function(t,e,n=!1){const i=await M(t,e._linkToIdToken(t.auth,await t.getIdToken()),n);return _t._forOperation(t,"link",i)}(n,new Wt(t),t.bypassAuthState)}class Yt{constructor(t,e,n,i,r=!1){this.auth=t,this.resolver=n,this.user=i,this.bypassAuthState=r,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(e)?e:[e]}execute(){return new Promise((async(t,e)=>{this.pendingPromise={resolve:t,reject:e};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(t){this.reject(t)}}))}async onAuthEvent(t){const{urlResponse:e,sessionId:n,postBody:i,tenantId:r,error:s,type:o}=t;if(s)return void this.reject(s);const a={auth:this.auth,requestUri:e,sessionId:n,tenantId:r||void 0,postBody:i||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(t){this.reject(t)}}onError(t){this.reject(t)}getIdpTask(t){switch(t){case"signInViaPopup":case"signInViaRedirect":return Xt;case"linkViaPopup":case"linkViaRedirect":return Jt;case"reauthViaPopup":case"reauthViaRedirect":return Qt;default:h(this.auth,"internal-error")}}resolve(t){m(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(t),this.unregisterAndCleanUp()}reject(t){m(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(t),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const Zt=new _(2e3,1e4);class te extends Yt{constructor(t,e,n,i,r){super(t,e,i,r),this.provider=n,this.authWindow=null,this.pollId=null,te.currentPopupAction&&te.currentPopupAction.cancel(),te.currentPopupAction=this}async executeNotNull(){const t=await this.execute();return p(t,this.auth,"internal-error"),t}async onExecution(){m(1===this.filter.length,"Popup operations only handle one event");const t=Dt();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],t),this.authWindow.associatedEvent=t,this.resolver._originValidation(this.auth).catch((t=>{this.reject(t)})),this.resolver._isIframeWebStorageSupported(this.auth,(t=>{t||this.reject(d(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var t;return(null===(t=this.authWindow)||void 0===t?void 0:t.associatedEvent)||null}cancel(){this.reject(d(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,te.currentPopupAction=null}pollUserCancellation(){const t=()=>{var e,n;(null===(n=null===(e=this.authWindow)||void 0===e?void 0:e.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(d(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(t,Zt.get())};t()}}te.currentPopupAction=null;const ee=new Map;class ne extends Yt{constructor(t,e,n=!1){super(t,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],e,void 0,n),this.eventId=null}async execute(){let t=ee.get(this.auth._key());if(!t){try{const e=await async function(t,e){const n=function(t){return z("pendingRedirect",t.config.apiKey,t.name)}(e),i="true"===await ie(t)._get(n);return await ie(t)._remove(n),i}(this.resolver,this.auth)?await super.execute():null;t=()=>Promise.resolve(e)}catch(e){t=()=>Promise.reject(e)}ee.set(this.auth._key(),t)}return t()}async onAuthEvent(t){if("signInViaRedirect"===t.type)return super.onAuthEvent(t);if("unknown"!==t.type){if(t.eventId){const e=await this.auth._redirectUserForId(t.eventId);if(e)return this.user=e,super.onAuthEvent(t);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function ie(t){return v(t._redirectPersistence)}async function re(t,e,n=!1){const i=st(t),r=function(t,e){return e?v(e):(p(t._popupRedirectResolver,t,"argument-error"),t._popupRedirectResolver)}(i,e),s=new ne(i,r,n),o=await s.execute();return o&&!n&&(delete o.user._redirectEventId,await i._persistUserIfCurrent(o.user),await i._setRedirectUser(null,e)),o}class se{constructor(t){this.auth=t,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(t){this.consumers.add(t),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,t)&&(this.sendToConsumer(this.queuedRedirectEvent,t),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(t){this.consumers.delete(t)}onEvent(t){if(this.hasEventBeenHandled(t))return!1;let e=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(t,n)&&(e=!0,this.sendToConsumer(t,n),this.saveEventToCache(t))})),this.hasHandledPotentialRedirect||!function(t){switch(t.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return ae(t);default:return!1}}(t)||(this.hasHandledPotentialRedirect=!0,e||(this.queuedRedirectEvent=t,e=!0)),e}sendToConsumer(t,e){var n;if(t.error&&!ae(t)){const i=(null===(n=t.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";e.onError(d(this.auth,i))}else e.onAuthEvent(t)}isEventForConsumer(t,e){const n=null===e.eventId||!!t.eventId&&t.eventId===e.eventId;return e.filter.includes(t.type)&&n}hasEventBeenHandled(t){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(oe(t))}saveEventToCache(t){this.cachedEventUids.add(oe(t)),this.lastProcessedEventTime=Date.now()}}function oe(t){return[t.type,t.eventId,t.sessionId,t.tenantId].filter((t=>t)).join("-")}function ae({type:t,error:e}){return"unknown"===t&&"auth/no-auth-event"===(null==e?void 0:e.code)}const ce=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,ue=/^https?/;function le(t){const e=w(),{protocol:n,hostname:i}=new URL(e);if(t.startsWith("chrome-extension://")){const r=new URL(t);return""===r.hostname&&""===i?"chrome-extension:"===n&&t.replace("chrome-extension://","")===e.replace("chrome-extension://",""):"chrome-extension:"===n&&r.hostname===i}if(!ue.test(n))return!1;if(ce.test(t))return i===t;const r=t.replace(/\./g,"\\.");return new RegExp("^(.+\\."+r+"|"+r+")$","i").test(i)}const he=new _(3e4,6e4);function de(){const t=Lt().___jsl;if(null==t?void 0:t.H)for(const e of Object.keys(t.H))if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=[...t.H[e].L],t.CP)for(let e=0;e<t.CP.length;e++)t.CP[e]=null}let fe=null;function pe(t){return fe=fe||function(t){return new Promise(((e,n)=>{var i,r,s,o;function a(){de(),gapi.load("gapi.iframes",{callback:()=>{e(gapi.iframes.getContext())},ontimeout:()=>{de(),n(d(t,"network-request-failed"))},timeout:he.get()})}if(null===(r=null===(i=Lt().gapi)||void 0===i?void 0:i.iframes)||void 0===r?void 0:r.Iframe)e(gapi.iframes.getContext());else{if(!(null===(s=Lt().gapi)||void 0===s?void 0:s.load)){const e=$t("iframefcb");return Lt()[e]=()=>{gapi.load?a():n(d(t,"network-request-failed"))},o=`https://apis.google.com/js/api.js?onload=${e}`,new Promise(((t,e)=>{const n=document.createElement("script");var i,r;n.setAttribute("src",o),n.onload=t,n.onerror=t=>{const n=d("internal-error");n.customData=t,e(n)},n.type="text/javascript",n.charset="UTF-8",(null!==(r=null===(i=document.getElementsByTagName("head"))||void 0===i?void 0:i[0])&&void 0!==r?r:document).appendChild(n)}))}a()}})).catch((t=>{throw fe=null,t}))}(t),fe}const ge=new _(5e3,15e3),me={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},ye=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function ve(t){const e=t.config;p(e.authDomain,t,"auth-domain-config-required");const n=e.emulator?I(e,"emulator/auth/iframe"):`https://${t.config.authDomain}/__/auth/iframe`,s={apiKey:e.apiKey,appName:t.name,v:r.MF},o=ye.get(t.config.apiHost);o&&(s.eid=o);const a=t._getFrameworks();return a.length&&(s.fw=a.join(",")),`${n}?${(0,i.Am)(s).slice(1)}`}const we={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class be{constructor(t){this.window=t,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(t){}}}function _e(t,e,n,s,o,a){p(t.config.authDomain,t,"auth-domain-config-required"),p(t.config.apiKey,t,"invalid-api-key");const c={apiKey:t.config.apiKey,appName:t.name,authType:n,redirectUrl:s,v:r.MF,eventId:o};if(e instanceof gt){e.setDefaultLanguage(t.languageCode),c.providerId=e.providerId||"",(0,i.Im)(e.getCustomParameters())||(c.customParameters=JSON.stringify(e.getCustomParameters()));for(const[t,e]of Object.entries(a||{}))c[t]=e}if(e instanceof mt){const t=e.getScopes().filter((t=>""!==t));t.length>0&&(c.scopes=t.join(","))}t.tenantId&&(c.tid=t.tenantId);const u=c;for(const t of Object.keys(u))void 0===u[t]&&delete u[t];return`${function({config:t}){return t.emulator?I(t,"emulator/auth/handler"):`https://${t.authDomain}/__/auth/handler`}(t)}?${(0,i.Am)(u).slice(1)}`}const Ie="webStorageSupport",Te=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Ct,this._completeRedirectFn=re}async _openPopup(t,e,n,r){var s;return m(null===(s=this.eventManagers[t._key()])||void 0===s?void 0:s.manager,"_initialize() not called before _openPopup()"),function(t,e,n,r=500,s=600){const o=Math.max((window.screen.availHeight-s)/2,0).toString(),a=Math.max((window.screen.availWidth-r)/2,0).toString();let c="";const u=Object.assign(Object.assign({},we),{width:r.toString(),height:s.toString(),top:o,left:a}),l=(0,i.ZQ)().toLowerCase();n&&(c=Q(l)?"_blank":n),W(l)&&(e=e||"http://localhost",u.scrollbars="yes");const h=Object.entries(u).reduce(((t,[e,n])=>`${t}${e}=${n},`),"");if(function(t=(0,i.ZQ)()){var e;return et(t)&&!!(null===(e=window.navigator)||void 0===e?void 0:e.standalone)}(l)&&"_self"!==c)return function(t,e){const n=document.createElement("a");n.href=t,n.target=e;const i=document.createEvent("MouseEvent");i.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(i)}(e||"",c),new be(null);const d=window.open(e||"",c,h);p(d,t,"popup-blocked");try{d.focus()}catch(t){}return new be(d)}(t,_e(t,e,n,w(),r),Dt())}async _openRedirect(t,e,n,i){var r;return await this._originValidation(t),r=_e(t,e,n,w(),i),Lt().location.href=r,new Promise((()=>{}))}_initialize(t){const e=t._key();if(this.eventManagers[e]){const{manager:t,promise:n}=this.eventManagers[e];return t?Promise.resolve(t):(m(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(t);return this.eventManagers[e]={promise:n},n}async initAndGetManager(t){const e=await async function(t){const e=await pe(t),n=Lt().gapi;return p(n,t,"internal-error"),e.open({where:document.body,url:ve(t),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:me,dontclear:!0},(e=>new Promise((async(n,i)=>{await e.restyle({setHideOnLeave:!1});const r=d(t,"network-request-failed"),s=Lt().setTimeout((()=>{i(r)}),ge.get());function o(){Lt().clearTimeout(s),n(e)}e.ping(o).then(o,(()=>{i(r)}))}))))}(t),n=new se(t);return e.register("authEvent",(e=>(p(null==e?void 0:e.authEvent,t,"invalid-auth-event"),{status:n.onEvent(e.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[t._key()]={manager:n},this.iframes[t._key()]=e,n}_isIframeWebStorageSupported(t,e){this.iframes[t._key()].send(Ie,{type:Ie},(n=>{var i;const r=null===(i=null==n?void 0:n[0])||void 0===i?void 0:i[Ie];void 0!==r&&e(!!r),h(t,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(t){const e=t._key();return this.originValidationPromises[e]||(this.originValidationPromises[e]=async function(t){if(t.config.emulator)return;const{authorizedDomains:e}=await async function(t,e={}){return k(t,"GET","/v1/projects",e)}(t);for(const t of e)try{if(le(t))return}catch(t){}h(t,"unauthorized-domain")}(t)),this.originValidationPromises[e]}get _shouldInitProactively(){return nt()||X()||et()}};var Ee;class Se{constructor(t){this.auth=t,this.internalListeners=new Map}getUid(){var t;return this.assertAuthConfigured(),(null===(t=this.auth.currentUser)||void 0===t?void 0:t.uid)||null}async getToken(t){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(t)}:null}addAuthTokenListener(t){if(this.assertAuthConfigured(),this.internalListeners.has(t))return;const e=this.auth.onIdTokenChanged((e=>{var n;t((null===(n=e)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(t,e),this.updateProactiveRefresh()}removeAuthTokenListener(t){this.assertAuthConfigured();const e=this.internalListeners.get(t);e&&(this.internalListeners.delete(t),e(),this.updateProactiveRefresh())}assertAuthConfigured(){p(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}function Ae(t=(0,r.Sx)()){const e=(0,r.j6)(t,"auth");return e.isInitialized()?e.getImmediate():function(t,e){const n=(0,r.j6)(t,"auth");if(n.isInitialized()){const t=n.getImmediate(),r=n.getOptions();if((0,i.bD)(r,null!=e?e:{}))return t;h(t,"already-initialized")}return n.initialize({options:e})}(t,{popupRedirectResolver:Te,persistence:[zt,Rt,Ct]})}Ee="Browser",(0,r.om)(new a.uA("auth",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),{apiKey:i,authDomain:r}=n.options;return(t=>{p(i&&!i.includes(":"),"invalid-api-key",{appName:t.name}),p(!(null==r?void 0:r.includes(":")),"argument-error",{appName:t.name});const n={apiKey:i,authDomain:r,clientPlatform:Ee,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:it(Ee)},s=new rt(t,n);return function(t,e){const n=(null==e?void 0:e.persistence)||[],i=(Array.isArray(n)?n:[n]).map(v);(null==e?void 0:e.errorMap)&&t._updateErrorMap(e.errorMap),t._initializeWithPersistence(i,null==e?void 0:e.popupRedirectResolver)}(s,e),s})(n)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((t,e,n)=>{t.getProvider("auth-internal").initialize()}))),(0,r.om)(new a.uA("auth-internal",(t=>{return e=st(t.getProvider("auth").getImmediate()),new Se(e);var e}),"PRIVATE").setInstantiationMode("EXPLICIT")),(0,r.KO)("@firebase/auth","0.17.1",function(t){switch(t){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";default:return}}(Ee))},226:(t,e,n)=>{n.d(e,{D:()=>i.D,KR:()=>i.KR,c7:()=>i.c7,qk:()=>i.qk});var i=n(334)},237:(t,e,n)=>{n.d(e,{xI:()=>i.xI});var i=n(440)},334:(t,e,n)=>{n.d(e,{D:()=>et,KR:()=>it,c7:()=>rt,qk:()=>nt});var i,r=n(468),s=n(625),o=n(134);!function(t){t[t.NO_ERROR=0]="NO_ERROR",t[t.NETWORK_ERROR=1]="NETWORK_ERROR",t[t.ABORT=2]="ABORT"}(i||(i={}));const a="firebasestorage.googleapis.com",c="storageBucket";class u extends s.g{constructor(t,e){super(l(t),`Firebase Storage: ${e} (${l(t)})`),this.customData={serverResponse:null},this._baseMessage=this.message,Object.setPrototypeOf(this,u.prototype)}_codeEquals(t){return l(t)===this.code}get serverResponse(){return this.customData.serverResponse}set serverResponse(t){this.customData.serverResponse=t,this.customData.serverResponse?this.message=`${this._baseMessage}\n${this.customData.serverResponse}`:this.message=this._baseMessage}}function l(t){return"storage/"+t}function h(){return new u("unknown","An unknown error occurred, please check the error payload for server response.")}function d(t){return new u("invalid-argument",t)}function f(){return new u("app-deleted","The Firebase app was deleted.")}function p(t,e){return new u("invalid-format","String does not match format '"+t+"': "+e)}function g(t){throw new u("internal-error","Internal error: "+t)}class m{constructor(){this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=i.NO_ERROR,this.sendPromise_=new Promise((t=>{this.xhr_.addEventListener("abort",(()=>{this.errorCode_=i.ABORT,t()})),this.xhr_.addEventListener("error",(()=>{this.errorCode_=i.NETWORK_ERROR,t()})),this.xhr_.addEventListener("load",(()=>{t()}))}))}send(t,e,n,i){if(this.sent_)throw g("cannot .send() more than once");if(this.sent_=!0,this.xhr_.open(e,t,!0),void 0!==i)for(const t in i)i.hasOwnProperty(t)&&this.xhr_.setRequestHeader(t,i[t].toString());return void 0!==n?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_}getErrorCode(){if(!this.sent_)throw g("cannot .getErrorCode() before sending");return this.errorCode_}getStatus(){if(!this.sent_)throw g("cannot .getStatus() before sending");try{return this.xhr_.status}catch(t){return-1}}getResponseText(){if(!this.sent_)throw g("cannot .getResponseText() before sending");return this.xhr_.responseText}abort(){this.xhr_.abort()}getResponseHeader(t){return this.xhr_.getResponseHeader(t)}addUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.addEventListener("progress",t)}removeUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.removeEventListener("progress",t)}}class y{createConnection(){return new m}}class v{constructor(t,e){this.bucket=t,this.path_=e}get path(){return this.path_}get isRoot(){return 0===this.path.length}fullServerUrl(){const t=encodeURIComponent;return"/b/"+t(this.bucket)+"/o/"+t(this.path)}bucketOnlyServerUrl(){return"/b/"+encodeURIComponent(this.bucket)+"/o"}static makeFromBucketSpec(t,e){let n;try{n=v.makeFromUrl(t,e)}catch(e){return new v(t,"")}if(""===n.path)return n;throw new u("invalid-default-bucket","Invalid default bucket '"+t+"'.")}static makeFromUrl(t,e){let n=null;const i="([A-Za-z0-9.\\-_]+)",r=new RegExp("^gs://"+i+"(/(.*))?$","i");function s(t){t.path_=decodeURIComponent(t.path)}const o=e.replace(/[.]/g,"\\."),c=[{regex:r,indices:{bucket:1,path:3},postModify:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path_=t.path_.slice(0,-1))}},{regex:new RegExp(`^https?://${o}/v[A-Za-z0-9_]+/b/${i}/o(/([^?#]*).*)?$`,"i"),indices:{bucket:1,path:3},postModify:s},{regex:new RegExp(`^https?://${e===a?"(?:storage.googleapis.com|storage.cloud.google.com)":e}/${i}/([^?#]*)`,"i"),indices:{bucket:1,path:2},postModify:s}];for(let e=0;e<c.length;e++){const i=c[e],r=i.regex.exec(t);if(r){const t=r[i.indices.bucket];let e=r[i.indices.path];e||(e=""),n=new v(t,e),i.postModify(n);break}}if(null==n)throw function(t){return new u("invalid-url","Invalid URL '"+t+"'.")}(t);return n}}class w{constructor(t){this.promise_=Promise.reject(t)}getPromise(){return this.promise_}cancel(t=!1){}}function b(t){return"string"==typeof t||t instanceof String}function _(t){return I()&&t instanceof Blob}function I(){return"undefined"!=typeof Blob}function T(t,e,n,i){if(i<e)throw d(`Invalid value for '${t}'. Expected ${e} or greater.`);if(i>n)throw d(`Invalid value for '${t}'. Expected ${n} or less.`)}function E(t,e){const n=e.match(/^(\w+):\/\/.+/);let i=e;return null==(null==n?void 0:n[1])&&(i=`https://${e}`),`${i}/v0${t}`}function S(t){const e=encodeURIComponent;let n="?";for(const i in t)t.hasOwnProperty(i)&&(n=n+(e(i)+"=")+e(t[i])+"&");return n=n.slice(0,-1),n}class A{constructor(t,e,n,i,r,s,o,a,c,u,l){this.pendingConnection_=null,this.backoffId_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=t,this.method_=e,this.headers_=n,this.body_=i,this.successCodes_=r.slice(),this.additionalRetryCodes_=s.slice(),this.callback_=o,this.errorCallback_=a,this.progressCallback_=u,this.timeout_=c,this.pool_=l,this.promise_=new Promise(((t,e)=>{this.resolve_=t,this.reject_=e,this.start_()}))}start_(){const t=this;function e(e,n){const i=t.resolve_,r=t.reject_,s=n.connection;if(n.wasSuccessCode)try{const e=t.callback_(s,s.getResponseText());void 0===e?i():i(e)}catch(t){r(t)}else if(null!==s){const e=h();e.serverResponse=s.getResponseText(),t.errorCallback_?r(t.errorCallback_(s,e)):r(e)}else n.canceled?r(t.appDelete_?f():new u("canceled","User canceled the upload/download.")):r(new u("retry-limit-exceeded","Max retry time for operation exceeded, please try again."))}this.canceled_?e(0,new k(!1,null,!0)):this.backoffId_=function(e,n,r){let s=1,o=null,a=!1,c=0;function u(){return 2===c}let l=!1;function h(...t){l||(l=!0,n.apply(null,t))}function d(e){o=setTimeout((()=>{o=null,function(e,n){if(n)return void e(!1,new k(!1,null,!0));const r=t.pool_.createConnection();function s(e){const n=e.loaded,i=e.lengthComputable?e.total:-1;null!==t.progressCallback_&&t.progressCallback_(n,i)}t.pendingConnection_=r,null!==t.progressCallback_&&r.addUploadProgressListener(s),r.send(t.url_,t.method_,t.body_,t.headers_).then((()=>{null!==t.progressCallback_&&r.removeUploadProgressListener(s),t.pendingConnection_=null;const n=r.getErrorCode()===i.NO_ERROR,o=r.getStatus();if(!n||t.isRetryStatusCode_(o)){const t=r.getErrorCode()===i.ABORT;return void e(!1,new k(!1,null,t))}const a=-1!==t.successCodes_.indexOf(o);e(!0,new k(a,r))}))}(f,u())}),e)}function f(t,...e){if(l)return;if(t)return void h.call(null,t,...e);if(u()||a)return void h.call(null,t,...e);let n;s<64&&(s*=2),1===c?(c=2,n=0):n=1e3*(s+Math.random()),d(n)}let p=!1;function g(t){p||(p=!0,l||(null!==o?(t||(c=2),clearTimeout(o),d(0)):t||(c=1)))}return d(0),setTimeout((()=>{a=!0,g(!0)}),r),g}(0,e,this.timeout_)}getPromise(){return this.promise_}cancel(t){this.canceled_=!0,this.appDelete_=t||!1,null!==this.backoffId_&&(0,this.backoffId_)(!1),null!==this.pendingConnection_&&this.pendingConnection_.abort()}isRetryStatusCode_(t){const e=t>=500&&t<600,n=-1!==[408,429].indexOf(t),i=-1!==this.additionalRetryCodes_.indexOf(t);return e||n||i}}class k{constructor(t,e,n){this.wasSuccessCode=t,this.connection=e,this.canceled=!!n}}function R(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}function N(...t){const e=R();if(void 0!==e){const n=new e;for(let e=0;e<t.length;e++)n.append(t[e]);return n.getBlob()}if(I())return new Blob(t);throw new u("unsupported-environment","This browser doesn't seem to support creating Blobs")}const C="base64",O="base64url",D="data_url";class P{constructor(t,e){this.data=t,this.contentType=e||null}}function L(t){const e=[];for(let n=0;n<t.length;n++){let i=t.charCodeAt(n);i<=127?e.push(i):i<=2047?e.push(192|i>>6,128|63&i):55296==(64512&i)?n<t.length-1&&56320==(64512&t.charCodeAt(n+1))?(i=65536|(1023&i)<<10|1023&t.charCodeAt(++n),e.push(240|i>>18,128|i>>12&63,128|i>>6&63,128|63&i)):e.push(239,191,189):56320==(64512&i)?e.push(239,191,189):e.push(224|i>>12,128|i>>6&63,128|63&i)}return new Uint8Array(e)}function x(t,e){switch(t){case C:{const n=-1!==e.indexOf("-"),i=-1!==e.indexOf("_");if(n||i)throw p(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break}case O:{const n=-1!==e.indexOf("+"),i=-1!==e.indexOf("/");if(n||i)throw p(t,"Invalid character '"+(n?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/");break}}let n;try{n=atob(e)}catch(e){throw p(t,"Invalid character found")}const i=new Uint8Array(n.length);for(let t=0;t<n.length;t++)i[t]=n.charCodeAt(t);return i}class M{constructor(t){this.base64=!1,this.contentType=null;const e=t.match(/^data:([^,]+)?,/);if(null===e)throw p(D,"Must be formatted 'data:[<mediatype>][;base64],<data>");const n=e[1]||null;var i,r;null!=n&&(this.base64=(r=";base64",(i=n).length>=7&&i.substring(i.length-7)===r),this.contentType=this.base64?n.substring(0,n.length-7):n),this.rest=t.substring(t.indexOf(",")+1)}}class U{constructor(t,e){let n=0,i="";_(t)?(this.data_=t,n=t.size,i=t.type):t instanceof ArrayBuffer?(e?this.data_=new Uint8Array(t):(this.data_=new Uint8Array(t.byteLength),this.data_.set(new Uint8Array(t))),n=this.data_.length):t instanceof Uint8Array&&(e?this.data_=t:(this.data_=new Uint8Array(t.length),this.data_.set(t)),n=t.length),this.size_=n,this.type_=i}size(){return this.size_}type(){return this.type_}slice(t,e){if(_(this.data_)){const s=(n=this.data_,i=t,r=e,n.webkitSlice?n.webkitSlice(i,r):n.mozSlice?n.mozSlice(i,r):n.slice?n.slice(i,r):null);return null===s?null:new U(s)}var n,i,r;{const n=new Uint8Array(this.data_.buffer,t,e-t);return new U(n,!0)}}static getBlob(...t){if(I()){const e=t.map((t=>t instanceof U?t.data_:t));return new U(N.apply(null,e))}{const e=t.map((t=>b(t)?function(t,e){switch(t){case"raw":return new P(L(e));case C:case O:return new P(x(t,e));case D:return new P(function(t){const e=new M(t);return e.base64?x(C,e.rest):function(t){let e;try{e=decodeURIComponent(t)}catch(t){throw p(D,"Malformed data URL.")}return L(e)}(e.rest)}(e),new M(e).contentType)}throw h()}("raw",t).data:t.data_));let n=0;e.forEach((t=>{n+=t.byteLength}));const i=new Uint8Array(n);let r=0;return e.forEach((t=>{for(let e=0;e<t.length;e++)i[r++]=t[e]})),new U(i,!0)}}uploadData(){return this.data_}}function F(t){let e;try{e=JSON.parse(t)}catch(t){return null}return"object"!=typeof(n=e)||Array.isArray(n)?null:e;var n}function V(t){const e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)}function j(t,e){return e}class B{constructor(t,e,n,i){this.server=t,this.local=e||t,this.writable=!!n,this.xform=i||j}}let H=null;function K(){if(H)return H;const t=[];t.push(new B("bucket")),t.push(new B("generation")),t.push(new B("metageneration")),t.push(new B("name","fullPath",!0));const e=new B("name");e.xform=function(t,e){return function(t){return!b(t)||t.length<2?t:V(t)}(e)},t.push(e);const n=new B("size");return n.xform=function(t,e){return void 0!==e?Number(e):e},t.push(n),t.push(new B("timeCreated")),t.push(new B("updated")),t.push(new B("md5Hash",null,!0)),t.push(new B("cacheControl",null,!0)),t.push(new B("contentDisposition",null,!0)),t.push(new B("contentEncoding",null,!0)),t.push(new B("contentLanguage",null,!0)),t.push(new B("contentType",null,!0)),t.push(new B("metadata","customMetadata",!0)),H=t,H}function q(t,e,n){const i=F(e);return null===i?null:function(t,e,n){const i={type:"file"},r=n.length;for(let t=0;t<r;t++){const r=n[t];i[r.local]=r.xform(i,e[r.server])}return function(t,e){Object.defineProperty(t,"ref",{get:function(){const n=t.bucket,i=t.fullPath,r=new v(n,i);return e._makeStorageReference(r)}})}(i,t),i}(t,i,n)}class z{constructor(t,e,n,i){this.url=t,this.method=e,this.handler=n,this.timeout=i,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}function $(t){if(!t)throw h()}function G(t){return function(e,n){let i;var r,s;return 401===e.getStatus()?i=e.getResponseText().includes("Firebase App Check token is invalid")?new u("unauthorized-app","This app does not have permission to access Firebase Storage on this project."):new u("unauthenticated","User is not authenticated, please authenticate using Firebase Authentication and try again."):402===e.getStatus()?(s=t.bucket,i=new u("quota-exceeded","Quota for bucket '"+s+"' exceeded, please view quota on https://firebase.google.com/pricing/.")):403===e.getStatus()?(r=t.path,i=new u("unauthorized","User does not have permission to access '"+r+"'.")):i=n,i.serverResponse=n.serverResponse,i}}function W(t,e,n,i,r){const s=e.bucketOnlyServerUrl(),o={"X-Goog-Upload-Protocol":"multipart"},a=function(){let t="";for(let e=0;e<2;e++)t+=Math.random().toString().slice(2);return t}();o["Content-Type"]="multipart/related; boundary="+a;const c=function(t,e,n){const i=Object.assign({},n);return i.fullPath=t.path,i.size=e.size(),i.contentType||(i.contentType=function(t,e){return e&&e.type()||"application/octet-stream"}(0,e)),i}(e,i,r),l="--"+a+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+function(t,e){const n={},i=e.length;for(let r=0;r<i;r++){const i=e[r];i.writable&&(n[i.server]=t[i.local])}return JSON.stringify(n)}(c,n)+"\r\n--"+a+"\r\nContent-Type: "+c.contentType+"\r\n\r\n",h="\r\n--"+a+"--",d=U.getBlob(l,i,h);if(null===d)throw new u("cannot-slice-blob","Cannot slice blob for upload. Please retry the upload.");const f={name:c.fullPath},p=E(s,t.host),g=t.maxUploadRetryTime,m=new z(p,"POST",function(t,e){return function(n,i){const r=q(t,i,e);return $(null!==r),r}}(t,n),g);return m.urlParams=f,m.headers=o,m.body=d.uploadData(),m.errorHandler=G(e),m}class X{constructor(t,e){this._service=t,this._location=e instanceof v?e:v.makeFromUrl(e,t.host)}toString(){return"gs://"+this._location.bucket+"/"+this._location.path}_newRef(t,e){return new X(t,e)}get root(){const t=new v(this._location.bucket,"");return this._newRef(this._service,t)}get bucket(){return this._location.bucket}get fullPath(){return this._location.path}get name(){return V(this._location.path)}get storage(){return this._service}get parent(){const t=function(t){if(0===t.length)return null;const e=t.lastIndexOf("/");return-1===e?"":t.slice(0,e)}(this._location.path);if(null===t)return null;const e=new v(this._location.bucket,t);return new X(this._service,e)}_throwIfRoot(t){if(""===this._location.path)throw function(t){return new u("invalid-root-operation","The operation '"+t+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(t)}}async function Q(t){t._throwIfRoot("getDownloadURL");const e=function(t,e,n){const i=E(e.fullServerUrl(),t.host),r=t.maxOperationRetryTime,s=new z(i,"GET",function(t,e){return function(n,i){const r=q(t,i,e);return $(null!==r),function(t,e,n){const i=F(e);if(null===i)return null;if(!b(i.downloadTokens))return null;const r=i.downloadTokens;if(0===r.length)return null;const s=encodeURIComponent;return r.split(",").map((e=>{const i=t.bucket,r=t.fullPath;return E("/b/"+s(i)+"/o/"+s(r),n)+S({alt:"media",token:e})}))[0]}(r,i,t.host)}}(t,n),r);return s.errorHandler=function(t){const e=G(t);return function(n,i){let r=e(n,i);var s;return 404===n.getStatus()&&(s=t.path,r=new u("object-not-found","Object '"+s+"' does not exist.")),r.serverResponse=i.serverResponse,r}}(e),s}(t.storage,t._location,K());return(await t.storage.makeRequestWithTokens(e)).getPromise().then((t=>{if(null===t)throw new u("no-download-url","The given file does not have any download URLs.");return t}))}function J(t,e){if(t instanceof Z){const n=t;if(null==n._bucket)throw new u("no-default-bucket","No default bucket found. Did you set the '"+c+"' property when initializing the app?");const i=new X(n,n._bucket);return null!=e?J(i,e):i}return void 0!==e?function(t,e){const n=function(t,e){const n=e.split("/").filter((t=>t.length>0)).join("/");return 0===t.length?n:t+"/"+n}(t._location.path,e),i=new v(t._location.bucket,n);return new X(t.storage,i)}(t,e):t}function Y(t,e){const n=null==e?void 0:e[c];return null==n?null:v.makeFromBucketSpec(n,t)}class Z{constructor(t,e,n,i,r,s){this.app=t,this._authProvider=e,this._appCheckProvider=n,this._pool=i,this._url=r,this._firebaseVersion=s,this._bucket=null,this._host=a,this._appId=null,this._deleted=!1,this._maxOperationRetryTime=12e4,this._maxUploadRetryTime=6e5,this._requests=new Set,this._bucket=null!=r?v.makeFromBucketSpec(r,this._host):Y(this._host,this.app.options)}get host(){return this._host}set host(t){this._host=t,null!=this._url?this._bucket=v.makeFromBucketSpec(this._url,t):this._bucket=Y(t,this.app.options)}get maxUploadRetryTime(){return this._maxUploadRetryTime}set maxUploadRetryTime(t){T("time",0,Number.POSITIVE_INFINITY,t),this._maxUploadRetryTime=t}get maxOperationRetryTime(){return this._maxOperationRetryTime}set maxOperationRetryTime(t){T("time",0,Number.POSITIVE_INFINITY,t),this._maxOperationRetryTime=t}async _getAuthToken(){if(this._overrideAuthToken)return this._overrideAuthToken;const t=this._authProvider.getImmediate({optional:!0});if(t){const e=await t.getToken();if(null!==e)return e.accessToken}return null}async _getAppCheckToken(){const t=this._appCheckProvider.getImmediate({optional:!0});return t?(await t.getToken()).token:null}_delete(){return this._deleted||(this._deleted=!0,this._requests.forEach((t=>t.cancel())),this._requests.clear()),Promise.resolve()}_makeStorageReference(t){return new X(this,t)}_makeRequest(t,e,n){if(this._deleted)return new w(f());{const i=function(t,e,n,i,r,s){const o=S(t.urlParams),a=t.url+o,c=Object.assign({},t.headers);return function(t,e){e&&(t["X-Firebase-GMPID"]=e)}(c,e),function(t,e){null!==e&&e.length>0&&(t.Authorization="Firebase "+e)}(c,n),function(t,e){t["X-Firebase-Storage-Version"]="webjs/"+(null!=e?e:"AppManager")}(c,s),function(t,e){null!==e&&(t["X-Firebase-AppCheck"]=e)}(c,i),new A(a,t.method,c,t.body,t.successCodes,t.additionalRetryCodes,t.handler,t.errorHandler,t.timeout,t.progressCallback,r)}(t,this._appId,e,n,this._pool,this._firebaseVersion);return this._requests.add(i),i.getPromise().then((()=>this._requests.delete(i)),(()=>this._requests.delete(i))),i}}async makeRequestWithTokens(t){const[e,n]=await Promise.all([this._getAuthToken(),this._getAppCheckToken()]);return this._makeRequest(t,e,n)}}const tt="storage";function et(t,e,n){return function(t,e,n){t._throwIfRoot("uploadBytes");const i=W(t.storage,t._location,K(),new U(e,!0),n);return t.storage.makeRequestWithTokens(i).then((t=>t.getPromise())).then((e=>({metadata:e,ref:t})))}(t=(0,s.Ku)(t),e,n)}function nt(t){return Q(t=(0,s.Ku)(t))}function it(t,e){return function(t,e){if(e&&/^[A-Za-z]+:\/\//.test(e)){if(t instanceof Z)return new X(t,e);throw d("To use ref(service, url), the first argument must be a Storage instance.")}return J(t,e)}(t=(0,s.Ku)(t),e)}function rt(t=(0,r.Sx)(),e){return t=(0,s.Ku)(t),(0,r.j6)(t,tt).getImmediate({identifier:e})}(0,r.om)(new o.uA(tt,(function(t,{instanceIdentifier:e}){const n=t.getProvider("app").getImmediate(),i=t.getProvider("auth-internal"),s=t.getProvider("app-check-internal");return new Z(n,i,s,new y,e,r.MF)}),"PUBLIC").setMultipleInstances(!0)),(0,r.KO)("@firebase/storage","0.8.1")},440:(t,e,n)=>{n.d(e,{xI:()=>i.n});var i=n(137);n(625),n(468),n(477),n(134)},468:(t,e,n)=>{n.d(e,{KO:()=>z,MF:()=>H,Sx:()=>q,Wp:()=>K,j6:()=>V,om:()=>F});var i=n(134),r=n(477),s=n(625);class o{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const a="@firebase/app",c=new r.Vy("@firebase/app"),u="@firebase/app-compat",l="@firebase/analytics-compat",h="@firebase/analytics",d="@firebase/app-check-compat",f="@firebase/app-check",p="@firebase/auth",g="@firebase/auth-compat",m="@firebase/database",y="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",b="@firebase/installations",_="@firebase/installations-compat",I="@firebase/messaging",T="@firebase/messaging-compat",E="@firebase/performance",S="@firebase/performance-compat",A="@firebase/remote-config",k="@firebase/remote-config-compat",R="@firebase/storage",N="@firebase/storage-compat",C="@firebase/firestore",O="@firebase/firestore-compat",D="firebase",P="[DEFAULT]",L={[a]:"fire-core",[u]:"fire-core-compat",[h]:"fire-analytics",[l]:"fire-analytics-compat",[f]:"fire-app-check",[d]:"fire-app-check-compat",[p]:"fire-auth",[g]:"fire-auth-compat",[m]:"fire-rtdb",[y]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[b]:"fire-iid",[_]:"fire-iid-compat",[I]:"fire-fcm",[T]:"fire-fcm-compat",[E]:"fire-perf",[S]:"fire-perf-compat",[A]:"fire-rc",[k]:"fire-rc-compat",[R]:"fire-gcs",[N]:"fire-gcs-compat",[C]:"fire-fst",[O]:"fire-fst-compat","fire-js":"fire-js",[D]:"fire-js-all"},x=new Map,M=new Map;function U(t,e){try{t.container.addComponent(e)}catch(n){c.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function F(t){const e=t.name;if(M.has(e))return c.debug(`There were multiple attempts to register component ${e}.`),!1;M.set(e,t);for(const e of x.values())U(e,t);return!0}function V(t,e){return t.container.getProvider(e)}const j=new s.FA("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class B{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new i.uA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw j.create("app-deleted",{appName:this._name})}}const H="9.0.0";function K(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:P,automaticDataCollectionEnabled:!1},e),r=n.name;if("string"!=typeof r||!r)throw j.create("bad-app-name",{appName:String(r)});const o=x.get(r);if(o){if((0,s.bD)(t,o.options)&&(0,s.bD)(n,o.config))return o;throw j.create("duplicate-app",{appName:r})}const a=new i.h1(r);for(const t of M.values())a.addComponent(t);const c=new B(t,n,a);return x.set(r,c),c}function q(t=P){const e=x.get(t);if(!e)throw j.create("no-app",{appName:t});return e}function z(t,e,n){var r;let s=null!==(r=L[t])&&void 0!==r?r:t;n&&(s+=`-${n}`);const o=s.match(/\s|\//),a=e.match(/\s|\//);if(o||a){const t=[`Unable to register library "${s}" with version "${e}":`];return o&&t.push(`library name "${s}" contains illegal characters (whitespace or "/")`),o&&a&&t.push("and"),a&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void c.warn(t.join(" "))}F(new i.uA(`${s}-version`,(()=>({library:s,version:e})),"VERSION"))}F(new i.uA("platform-logger",(t=>new o(t)),"PRIVATE")),z(a,"0.7.0",undefined),z("fire-js","")},477:(t,e,n)=>{function i(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,r++)i[r]=s[o];return i}var r;n.d(e,{$b:()=>s,Vy:()=>h});var s,o=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(s||(s={}));var a={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},c=s.INFO,u=((r={})[s.DEBUG]="log",r[s.VERBOSE]="log",r[s.INFO]="info",r[s.WARN]="warn",r[s.ERROR]="error",r),l=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(e<t.logLevel)){var s=(new Date).toISOString(),o=u[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,i(["["+s+"]  "+t.name+":"],n))}},h=function(){function t(t){this.name=t,this._logLevel=c,this._logHandler=l,this._userLogHandler=null,o.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in s))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?a[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,s.DEBUG],t)),this._logHandler.apply(this,i([this,s.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,s.VERBOSE],t)),this._logHandler.apply(this,i([this,s.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,s.INFO],t)),this._logHandler.apply(this,i([this,s.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,s.WARN],t)),this._logHandler.apply(this,i([this,s.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,i([this,s.ERROR],t)),this._logHandler.apply(this,i([this,s.ERROR],t))},t}()},625:(t,e,n)=>{n.d(e,{Am:()=>_,FA:()=>m,I9:()=>I,Im:()=>v,Ku:()=>k,ZQ:()=>a,b8:()=>h,bD:()=>w,cY:()=>o,g:()=>g,hp:()=>T,jZ:()=>c,lT:()=>d,lV:()=>l,n4:()=>f,nr:()=>p,sr:()=>u,tD:()=>E,u:()=>s});var i=n(635),r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[],r=0;r<t.length;r+=3){var s=t[r],o=r+1<t.length,a=o?t[r+1]:0,c=r+2<t.length,u=c?t[r+2]:0,l=s>>2,h=(3&s)<<4|a>>4,d=(15&a)<<2|u>>6,f=63&u;c||(f=64,o||(d=64)),i.push(n[l],n[h],n[d],n[f])}return i.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++i)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e}(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,i=0;n<t.length;){var r=t[n++];if(r<128)e[i++]=String.fromCharCode(r);else if(r>191&&r<224){var s=t[n++];e[i++]=String.fromCharCode((31&r)<<6|63&s)}else if(r>239&&r<365){var o=((7&r)<<18|(63&(s=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[i++]=String.fromCharCode(55296+(o>>10)),e[i++]=String.fromCharCode(56320+(1023&o))}else{s=t[n++];var a=t[n++];e[i++]=String.fromCharCode((15&r)<<12|(63&s)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[],r=0;r<t.length;){var s=n[t.charAt(r++)],o=r<t.length?n[t.charAt(r)]:0,a=++r<t.length?n[t.charAt(r)]:64,c=++r<t.length?n[t.charAt(r)]:64;if(++r,null==s||null==o||null==a||null==c)throw Error();var u=s<<2|o>>4;if(i.push(u),64!==a){var l=o<<4&240|a>>2;if(i.push(l),64!==c){var h=a<<6&192|c;i.push(h)}}}return i},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},s=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null},o=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,i){n?e.reject(n):e.resolve(i),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,i))}},t}();function a(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function c(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(a())}function u(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function l(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function h(){return a().indexOf("Electron/")>=0}function d(){var t=a();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function f(){return a().indexOf("MSAppHost/")>=0}function p(){return!function(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}var g=function(t){function e(n,i,r){var s=t.call(this,i)||this;return s.code=n,s.customData=r,s.name="FirebaseError",Object.setPrototypeOf(s,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(s,m.prototype.create),s}return(0,i.C6)(e,t),e}(Error),m=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i=e[0]||{},r=this.service+"/"+t,s=this.errors[t],o=s?function(t,e){return t.replace(y,(function(t,n){var i=e[n];return null!=i?String(i):"<"+n+"?>"}))}(s,i):"Error",a=this.serviceName+": "+o+" ("+r+").";return new g(r,a,i)},t}(),y=/\{\$([^}]+)}/g;function v(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function w(t,e){if(t===e)return!0;for(var n=Object.keys(t),i=Object.keys(e),r=0,s=n;r<s.length;r++){var o=s[r];if(!i.includes(o))return!1;var a=t[o],c=e[o];if(b(a)&&b(c)){if(!w(a,c))return!1}else if(a!==c)return!1}for(var u=0,l=i;u<l.length;u++)if(o=l[u],!n.includes(o))return!1;return!0}function b(t){return null!==t&&"object"==typeof t}function _(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},i=0,r=Object.entries(t);i<r.length;i++){var s=r[i];n(s[0],s[1])}return e.length?"&"+e.join("&"):""}function I(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("="),i=n[0],r=n[1];e[decodeURIComponent(i)]=decodeURIComponent(r)}})),e}function T(t){var e=t.indexOf("?");if(!e)return"";var n=t.indexOf("#",e);return t.substring(e,n>0?n:void 0)}function E(t,e){var n=new S(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var i=0;i<16;i++)n[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(i=0;i<16;i++)n[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(i=16;i<80;i++){var r=n[i-3]^n[i-8]^n[i-14]^n[i-16];n[i]=4294967295&(r<<1|r>>>31)}var s,o,a=this.chain_[0],c=this.chain_[1],u=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(i=0;i<80;i++)i<40?i<20?(s=l^c&(u^l),o=1518500249):(s=c^u^l,o=1859775393):i<60?(s=c&u|l&(c|u),o=2400959708):(s=c^u^l,o=3395469782),r=(a<<5|a>>>27)+s+h+o+n[i]&4294967295,h=l,l=u,u=4294967295&(c<<30|c>>>2),c=a,a=r;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+c&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,i=0,r=this.buf_,s=this.inbuf_;i<e;){if(0===s)for(;i<=n;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(r[s]=t.charCodeAt(i),++i,++s===this.blockSize){this.compress_(r),s=0;break}}else for(;i<e;)if(r[s]=t[i],++i,++s===this.blockSize){this.compress_(r),s=0;break}}this.inbuf_=s,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var i=0;for(n=0;n<5;n++)for(var r=24;r>=0;r-=8)t[i]=this.chain_[n]>>r&255,++i;return t}}();var S=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var i,r=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(i=function(t){if("object"!=typeof t||null===t)return!1;for(var e=0,n=["next","error","complete"];e<n.length;e++){var i=n[e];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(i.next=A),void 0===i.error&&(i.error=A),void 0===i.complete&&(i.complete=A);var s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}})),this.observers.push(i),s},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function A(){}function k(t){return t&&t._delegate?t._delegate:t}},635:(t,e,n)=>{n.d(e,{C6:()=>r,Ju:()=>c,Tt:()=>s,YH:()=>a,fX:()=>l,sH:()=>o,zs:()=>u});var i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function s(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]])}return n}function o(t,e,n,i){return new(n||(n=Promise))((function(r,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function a(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((i=i.apply(t,e||[])).next())}))}function a(t,e){var n,i,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},o=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return o.next=a(0),o.throw=a(1),o.return=a(2),"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,s=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return o}function l(t,e,n){if(n||2===arguments.length)for(var i,r=0,s=e.length;r<s;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError},790:(t,e,n)=>{n.d(e,{H9:()=>zi,O5:()=>mr,aU:()=>Wi,mZ:()=>gr});var i=n(468),r=n(134),s=n(477),o=n(625),a=n(36);class c{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}c.UNAUTHENTICATED=new c(null),c.GOOGLE_CREDENTIALS=new c("google-credentials-uid"),c.FIRST_PARTY=new c("first-party-uid"),c.MOCK_USER=new c("mock-user");let u="9.0.1";const l=new s.Vy("@firebase/firestore");function h(){return l.logLevel}function d(t,...e){if(l.logLevel<=s.$b.DEBUG){const n=e.map(g);l.debug(`Firestore (${u}): ${t}`,...n)}}function f(t,...e){if(l.logLevel<=s.$b.ERROR){const n=e.map(g);l.error(`Firestore (${u}): ${t}`,...n)}}function p(t,...e){if(l.logLevel<=s.$b.WARN){const n=e.map(g);l.warn(`Firestore (${u}): ${t}`,...n)}}function g(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function m(t="Unexpected state"){const e=`FIRESTORE (${u}) INTERNAL ASSERTION FAILED: `+t;throw f(e),new Error(e)}function y(t,e){t||m()}function v(t,e){return t}const w={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class b extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class _{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class I{constructor(t,e){this.user=e,this.type="OAuth",this.authHeaders={},this.authHeaders.Authorization=`Bearer ${t}`}}class T{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(c.UNAUTHENTICATED)))}shutdown(){}}class E{constructor(t){this.t=t,this.currentUser=c.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const i=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let r=new _;this.o=()=>{this.i++,this.currentUser=this.u(),r.resolve(),r=new _,t.enqueueRetryable((()=>i(this.currentUser)))};const s=e=>{t.enqueueRetryable((async()=>{d("FirebaseCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),await r.promise,await i(this.currentUser)}))};this.t.onInit((t=>s(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?s(t):(d("FirebaseCredentialsProvider","Auth not yet detected"),r.resolve(),r=new _)}}),0),t.enqueueRetryable((async()=>{0===this.i&&(await r.promise,await i(this.currentUser))}))}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(d("FirebaseCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(y("string"==typeof e.accessToken),new I(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return y(null===t||"string"==typeof t),new c(t)}}class S{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=c.FIRST_PARTY}get authHeaders(){const t={"X-Goog-AuthUser":this.l},e=this.h.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),this.m&&(t["X-Goog-Iam-Authorization-Token"]=this.m),t}}class A{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new S(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(c.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class k{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.g(t),this.p=t=>e.writeSequenceNumber(t))}g(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.p&&this.p(t),t}}function R(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}k.T=-1;class N{static I(){const t=62*Math.floor(256/62);let e="";for(;e.length<20;){const n=R(40);for(let i=0;i<n.length;++i)e.length<20&&n[i]<t&&(e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[i]%62))}return e}}function C(t,e){return t<e?-1:t>e?1:0}function O(t,e,n){return t.length===e.length&&t.every(((t,i)=>n(t,e[i])))}class D{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new b(w.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new b(w.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new b(w.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new b(w.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return D.fromMillis(Date.now())}static fromDate(t){return D.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new D(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?C(this.nanoseconds,t.nanoseconds):C(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class P{constructor(t){this.timestamp=t}static fromTimestamp(t){return new P(t)}static min(){return new P(new D(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function L(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function x(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function M(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class U{constructor(t,e,n){void 0===e?e=0:e>t.length&&m(),void 0===n?n=t.length-e:n>t.length-e&&m(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===U.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof U?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++){const n=t.get(i),r=e.get(i);if(n<r)return-1;if(n>r)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class F extends U{construct(t,e,n){return new F(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new b(w.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new F(e)}static emptyPath(){return new F([])}}const V=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class j extends U{construct(t,e,n){return new j(t,e,n)}static isValidIdentifier(t){return V.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),j.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new j(["__name__"])}static fromServerFormat(t){const e=[];let n="",i=0;const r=()=>{if(0===n.length)throw new b(w.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let s=!1;for(;i<t.length;){const e=t[i];if("\\"===e){if(i+1===t.length)throw new b(w.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[i+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new b(w.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,i+=2}else"`"===e?(s=!s,i++):"."!==e||s?(n+=e,i++):(r(),i++)}if(r(),s)throw new b(w.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new j(e)}static emptyPath(){return new j([])}}class B{constructor(t){this.fields=t,t.sort(j.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return O(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class H{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new H(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new H(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return C(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}H.EMPTY_BYTE_STRING=new H("");const K=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function q(t){if(y(!!t),"string"==typeof t){let e=0;const n=K.exec(t);if(y(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:z(t.seconds),nanos:z(t.nanos)}}function z(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function $(t){return"string"==typeof t?H.fromBase64String(t):H.fromUint8Array(t)}function G(t){const e=q(t.mapValue.fields.__local_write_time__.timestampValue);return new D(e.seconds,e.nanos)}function W(t){return null==t}function X(t){return 0===t&&1/t==-1/0}class Q{constructor(t){this.path=t}static fromPath(t){return new Q(F.fromString(t))}static fromName(t){return new Q(F.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===F.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return F.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new Q(new F(t.slice()))}}function J(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?function(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}(t)?4:10:m()}function Y(t,e){const n=J(t);if(n!==J(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return G(t).isEqual(G(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=q(t.timestampValue),i=q(e.timestampValue);return n.seconds===i.seconds&&n.nanos===i.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return $(t.bytesValue).isEqual($(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return z(t.geoPointValue.latitude)===z(e.geoPointValue.latitude)&&z(t.geoPointValue.longitude)===z(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return z(t.integerValue)===z(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=z(t.doubleValue),i=z(e.doubleValue);return n===i?X(n)===X(i):isNaN(n)&&isNaN(i)}return!1}(t,e);case 9:return O(t.arrayValue.values||[],e.arrayValue.values||[],Y);case 10:return function(t,e){const n=t.mapValue.fields||{},i=e.mapValue.fields||{};if(L(n)!==L(i))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===i[t]||!Y(n[t],i[t])))return!1;return!0}(t,e);default:return m()}}function Z(t,e){return void 0!==(t.values||[]).find((t=>Y(t,e)))}function tt(t,e){const n=J(t),i=J(e);if(n!==i)return C(n,i);switch(n){case 0:return 0;case 1:return C(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=z(t.integerValue||t.doubleValue),i=z(e.integerValue||e.doubleValue);return n<i?-1:n>i?1:n===i?0:isNaN(n)?isNaN(i)?0:-1:1}(t,e);case 3:return et(t.timestampValue,e.timestampValue);case 4:return et(G(t),G(e));case 5:return C(t.stringValue,e.stringValue);case 6:return function(t,e){const n=$(t),i=$(e);return n.compareTo(i)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),i=e.split("/");for(let t=0;t<n.length&&t<i.length;t++){const e=C(n[t],i[t]);if(0!==e)return e}return C(n.length,i.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=C(z(t.latitude),z(e.latitude));return 0!==n?n:C(z(t.longitude),z(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],i=e.values||[];for(let t=0;t<n.length&&t<i.length;++t){const e=tt(n[t],i[t]);if(e)return e}return C(n.length,i.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},i=Object.keys(n),r=e.fields||{},s=Object.keys(r);i.sort(),s.sort();for(let t=0;t<i.length&&t<s.length;++t){const e=C(i[t],s[t]);if(0!==e)return e;const o=tt(n[i[t]],r[s[t]]);if(0!==o)return o}return C(i.length,s.length)}(t.mapValue,e.mapValue);default:throw m()}}function et(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return C(t,e);const n=q(t),i=q(e),r=C(n.seconds,i.seconds);return 0!==r?r:C(n.nanos,i.nanos)}function nt(t){return it(t)}function it(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=q(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?$(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Q.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const i of t.values||[])n?n=!1:e+=",",e+=it(i);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",i=!0;for(const r of e)i?i=!1:n+=",",n+=`${r}:${it(t.fields[r])}`;return n+"}"}(t.mapValue):m();var e,n}function rt(t){return!!t&&"integerValue"in t}function st(t){return!!t&&"arrayValue"in t}function ot(t){return!!t&&"mapValue"in t}function at(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return x(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=at(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=at(t.arrayValue.values[n]);return e}return Object.assign({},t)}class ct{constructor(t){this.value=t}static empty(){return new ct({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!ot(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=at(e)}setAll(t){let e=j.emptyPath(),n={},i=[];t.forEach(((t,r)=>{if(!e.isImmediateParentOf(r)){const t=this.getFieldsMap(e);this.applyChanges(t,n,i),n={},i=[],e=r.popLast()}t?n[r.lastSegment()]=at(t):i.push(r.lastSegment())}));const r=this.getFieldsMap(e);this.applyChanges(r,n,i)}delete(t){const e=this.field(t.popLast());ot(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return Y(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let i=e.mapValue.fields[t.get(n)];ot(i)&&i.mapValue.fields||(i={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=i),e=i}return e.mapValue.fields}applyChanges(t,e,n){x(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new ct(at(this.value))}}function ut(t){const e=[];return x(t.fields,((t,n)=>{const i=new j([t]);if(ot(n)){const t=ut(n.mapValue).fields;if(0===t.length)e.push(i);else for(const n of t)e.push(i.child(n))}else e.push(i)})),new B(e)}class lt{constructor(t,e,n,i,r){this.key=t,this.documentType=e,this.version=n,this.data=i,this.documentState=r}static newInvalidDocument(t){return new lt(t,0,P.min(),ct.empty(),0)}static newFoundDocument(t,e,n){return new lt(t,1,e,n,0)}static newNoDocument(t,e){return new lt(t,2,e,ct.empty(),0)}static newUnknownDocument(t,e){return new lt(t,3,e,ct.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=ct.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=ct.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof lt&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new lt(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class ht{constructor(t,e=null,n=[],i=[],r=null,s=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=i,this.limit=r,this.startAt=s,this.endAt=o,this.A=null}}function dt(t,e=null,n=[],i=[],r=null,s=null,o=null){return new ht(t,e,n,i,r,s,o)}function ft(t){const e=v(t);if(null===e.A){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+nt(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),W(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=St(e.startAt)),e.endAt&&(t+="|ub:",t+=St(e.endAt)),e.A=t}return e.A}function pt(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!kt(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let r=0;r<t.filters.length;r++)if(n=t.filters[r],i=e.filters[r],n.op!==i.op||!n.field.isEqual(i.field)||!Y(n.value,i.value))return!1;var n,i;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Nt(t.startAt,e.startAt)&&Nt(t.endAt,e.endAt)}class gt extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.R(t,e,n):new mt(t,e,n):"array-contains"===e?new bt(t,n):"in"===e?new _t(t,n):"not-in"===e?new It(t,n):"array-contains-any"===e?new Tt(t,n):new gt(t,e,n)}static R(t,e,n){return"in"===e?new yt(t,n):new vt(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.P(tt(e,this.value)):null!==e&&J(this.value)===J(e)&&this.P(tt(e,this.value))}P(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return m()}}v(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class mt extends gt{constructor(t,e,n){super(t,e,n),this.key=Q.fromName(n.referenceValue)}matches(t){const e=Q.comparator(t.key,this.key);return this.P(e)}}class yt extends gt{constructor(t,e){super(t,"in",e),this.keys=wt(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class vt extends gt{constructor(t,e){super(t,"not-in",e),this.keys=wt(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function wt(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>Q.fromName(t.referenceValue)))}class bt extends gt{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return st(e)&&Z(e.arrayValue,this.value)}}class _t extends gt{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&Z(this.value.arrayValue,e)}}class It extends gt{constructor(t,e){super(t,"not-in",e)}matches(t){if(Z(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!Z(this.value.arrayValue,e)}}class Tt extends gt{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!st(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>Z(this.value.arrayValue,t)))}}class Et{constructor(t,e){this.position=t,this.before=e}}function St(t){return`${t.before?"b":"a"}:${t.position.map((t=>nt(t))).join(",")}`}class At{constructor(t,e="asc"){this.field=t,this.dir=e}}function kt(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function Rt(t,e,n){let i=0;for(let r=0;r<t.position.length;r++){const s=e[r],o=t.position[r];if(i=s.field.isKeyField()?Q.comparator(Q.fromName(o.referenceValue),n.key):tt(o,n.data.field(s.field)),"desc"===s.dir&&(i*=-1),0!==i)break}return t.before?i<=0:i<0}function Nt(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!Y(t.position[n],e.position[n]))return!1;return!0}class Ct{constructor(t,e=null,n=[],i=[],r=null,s="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=i,this.limit=r,this.limitType=s,this.startAt=o,this.endAt=a,this.V=null,this.S=null,this.startAt,this.endAt}}function Ot(t){const e=v(t);if(null===e.V){e.V=[];const t=function(t){for(const e of t.filters)if(e.v())return e.field;return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.V.push(new At(t)),e.V.push(new At(j.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.V.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.V.push(new At(j.keyField(),t))}}}return e.V}function Dt(t){const e=v(t);if(!e.S)if("F"===e.limitType)e.S=dt(e.path,e.collectionGroup,Ot(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Ot(e)){const e="desc"===n.dir?"asc":"desc";t.push(new At(n.field,e))}const n=e.endAt?new Et(e.endAt.position,!e.endAt.before):null,i=e.startAt?new Et(e.startAt.position,!e.startAt.before):null;e.S=dt(e.path,e.collectionGroup,t,e.filters,e.limit,n,i)}return e.S}function Pt(t,e){return pt(Dt(t),Dt(e))&&t.limitType===e.limitType}function Lt(t){return`${ft(Dt(t))}|lt:${t.limitType}`}function xt(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${nt(e.value)}`;var e})).join(", ")}]`),W(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+St(t.startAt)),t.endAt&&(e+=", endAt: "+St(t.endAt)),`Target(${e})`}(Dt(t))}; limitType=${t.limitType})`}function Mt(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):Q.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Rt(t.startAt,Ot(t),e)||t.endAt&&Rt(t.endAt,Ot(t),e))}(t,e)}function Ut(t,e,n){const i=t.field.isKeyField()?Q.comparator(e.key,n.key):function(t,e,n){const i=e.data.field(t),r=n.data.field(t);return null!==i&&null!==r?tt(i,r):m()}(t.field,e,n);switch(t.dir){case"asc":return i;case"desc":return-1*i;default:return m()}}function Ft(t,e){if(t.D){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:X(e)?"-0":e}}function Vt(t){return{integerValue:""+t}}function jt(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!X(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?Vt(e):Ft(t,e)}class Bt{constructor(){this._=void 0}}function Ht(t,e,n){return t instanceof zt?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof $t?Gt(t,e):t instanceof Wt?Xt(t,e):function(t,e){const n=qt(t,e),i=Jt(n)+Jt(t.C);return rt(n)&&rt(t.C)?Vt(i):Ft(t.N,i)}(t,e)}function Kt(t,e,n){return t instanceof $t?Gt(t,e):t instanceof Wt?Xt(t,e):n}function qt(t,e){return t instanceof Qt?rt(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class zt extends Bt{}class $t extends Bt{constructor(t){super(),this.elements=t}}function Gt(t,e){const n=Yt(e);for(const e of t.elements)n.some((t=>Y(t,e)))||n.push(e);return{arrayValue:{values:n}}}class Wt extends Bt{constructor(t){super(),this.elements=t}}function Xt(t,e){let n=Yt(e);for(const e of t.elements)n=n.filter((t=>!Y(t,e)));return{arrayValue:{values:n}}}class Qt extends Bt{constructor(t,e){super(),this.N=t,this.C=e}}function Jt(t){return z(t.integerValue||t.doubleValue)}function Yt(t){return st(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class Zt{constructor(t,e){this.field=t,this.transform=e}}class te{constructor(t,e){this.version=t,this.transformResults=e}}class ee{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new ee}static exists(t){return new ee(void 0,t)}static updateTime(t){return new ee(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function ne(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class ie{}function re(t,e,n){t instanceof ue?function(t,e,n){const i=t.value.clone(),r=de(t.fieldTransforms,e,n.transformResults);i.setAll(r),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):t instanceof le?function(t,e,n){if(!ne(t.precondition,e))return void e.convertToUnknownDocument(n.version);const i=de(t.fieldTransforms,e,n.transformResults),r=e.data;r.setAll(he(t)),r.setAll(i),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function se(t,e,n){t instanceof ue?function(t,e,n){if(!ne(t.precondition,e))return;const i=t.value.clone(),r=fe(t.fieldTransforms,n,e);i.setAll(r),e.convertToFoundDocument(ce(e),i).setHasLocalMutations()}(t,e,n):t instanceof le?function(t,e,n){if(!ne(t.precondition,e))return;const i=fe(t.fieldTransforms,n,e),r=e.data;r.setAll(he(t)),r.setAll(i),e.convertToFoundDocument(ce(e),r).setHasLocalMutations()}(t,e,n):function(t,e){ne(t.precondition,e)&&e.convertToNoDocument(P.min())}(t,e)}function oe(t,e){let n=null;for(const i of t.fieldTransforms){const t=e.data.field(i.field),r=qt(i.transform,t||null);null!=r&&(null==n&&(n=ct.empty()),n.set(i.field,r))}return n||null}function ae(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&O(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof $t&&e instanceof $t||t instanceof Wt&&e instanceof Wt?O(t.elements,e.elements,Y):t instanceof Qt&&e instanceof Qt?Y(t.C,e.C):t instanceof zt&&e instanceof zt}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function ce(t){return t.isFoundDocument()?t.version:P.min()}class ue extends ie{constructor(t,e,n,i=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=i,this.type=0}}class le extends ie{constructor(t,e,n,i,r=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=i,this.fieldTransforms=r,this.type=1}}function he(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const i=t.data.field(n);e.set(n,i)}})),e}function de(t,e,n){const i=new Map;y(t.length===n.length);for(let r=0;r<n.length;r++){const s=t[r],o=s.transform,a=e.data.field(s.field);i.set(s.field,Kt(o,a,n[r]))}return i}function fe(t,e,n){const i=new Map;for(const r of t){const t=r.transform,s=n.data.field(r.field);i.set(r.field,Ht(t,s,e))}return i}class pe extends ie{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class ge extends ie{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}var me,ye;(ye=me||(me={}))[ye.OK=0]="OK",ye[ye.CANCELLED=1]="CANCELLED",ye[ye.UNKNOWN=2]="UNKNOWN",ye[ye.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",ye[ye.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",ye[ye.NOT_FOUND=5]="NOT_FOUND",ye[ye.ALREADY_EXISTS=6]="ALREADY_EXISTS",ye[ye.PERMISSION_DENIED=7]="PERMISSION_DENIED",ye[ye.UNAUTHENTICATED=16]="UNAUTHENTICATED",ye[ye.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",ye[ye.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",ye[ye.ABORTED=10]="ABORTED",ye[ye.OUT_OF_RANGE=11]="OUT_OF_RANGE",ye[ye.UNIMPLEMENTED=12]="UNIMPLEMENTED",ye[ye.INTERNAL=13]="INTERNAL",ye[ye.UNAVAILABLE=14]="UNAVAILABLE",ye[ye.DATA_LOSS=15]="DATA_LOSS";class ve{constructor(t,e){this.comparator=t,this.root=e||be.EMPTY}insert(t,e){return new ve(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,be.BLACK,null,null))}remove(t){return new ve(this.comparator,this.root.remove(t,this.comparator).copy(null,null,be.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const i=this.comparator(t,n.key);if(0===i)return e+n.left.size;i<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new we(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new we(this.root,t,this.comparator,!1)}getReverseIterator(){return new we(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new we(this.root,t,this.comparator,!0)}}class we{constructor(t,e,n,i){this.isReverse=i,this.nodeStack=[];let r=1;for(;!t.isEmpty();)if(r=e?n(t.key,e):1,i&&(r*=-1),r<0)t=this.isReverse?t.left:t.right;else{if(0===r){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class be{constructor(t,e,n,i,r){this.key=t,this.value=e,this.color=null!=n?n:be.RED,this.left=null!=i?i:be.EMPTY,this.right=null!=r?r:be.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,i,r){return new be(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=r?r:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let i=this;const r=n(t,i.key);return i=r<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n)),i.fixUp()}removeMin(){if(this.left.isEmpty())return be.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,i=this;if(e(t,i.key)<0)i.left.isEmpty()||i.left.isRed()||i.left.left.isRed()||(i=i.moveRedLeft()),i=i.copy(null,null,null,i.left.remove(t,e),null);else{if(i.left.isRed()&&(i=i.rotateRight()),i.right.isEmpty()||i.right.isRed()||i.right.left.isRed()||(i=i.moveRedRight()),0===e(t,i.key)){if(i.right.isEmpty())return be.EMPTY;n=i.right.min(),i=i.copy(n.key,n.value,null,null,i.right.removeMin())}i=i.copy(null,null,null,null,i.right.remove(t,e))}return i.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,be.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,be.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw m();if(this.right.isRed())throw m();const t=this.left.check();if(t!==this.right.check())throw m();return t+(this.isRed()?0:1)}}be.EMPTY=null,be.RED=!0,be.BLACK=!1,be.EMPTY=new class{constructor(){this.size=0}get key(){throw m()}get value(){throw m()}get color(){throw m()}get left(){throw m()}get right(){throw m()}copy(t,e,n,i,r){return this}insert(t,e,n){return new be(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class _e{constructor(t){this.comparator=t,this.data=new ve(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const i=n.getNext();if(this.comparator(i.key,t[1])>=0)return;e(i.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new Ie(this.data.getIterator())}getIteratorFrom(t){return new Ie(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof _e))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,i=n.getNext().key;if(0!==this.comparator(t,i))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new _e(this.comparator);return e.data=t,e}}class Ie{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const Te=new ve(Q.comparator);function Ee(){return Te}const Se=new ve(Q.comparator);function Ae(){return Se}const ke=new ve(Q.comparator);const Re=new _e(Q.comparator);function Ne(...t){let e=Re;for(const n of t)e=e.add(n);return e}const Ce=new _e(C);class Oe{constructor(t,e){this.databaseId=t,this.D=e}}function De(t,e){return t.D?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function Pe(t,e){return t.D?e.toBase64():e.toUint8Array()}function Le(t,e){return De(t,e.toTimestamp())}function xe(t){return y(!!t),P.fromTimestamp(function(t){const e=q(t);return new D(e.seconds,e.nanos)}(t))}function Me(t,e){return function(t){return new F(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function Ue(t,e){return Me(t.databaseId,e.path)}function Fe(t){const e=function(t){const e=F.fromString(t);return y(function(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}(e)),e}(t);return 4===e.length?F.emptyPath():function(t){return y(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}(e)}function Ve(t,e,n){return{name:Ue(t,e),fields:n.value.mapValue.fields}}function je(t){let e=Fe(t.parent);const n=t.structuredQuery,i=n.from?n.from.length:0;let r=null;if(i>0){y(1===i);const t=n.from[0];t.allDescendants?r=t.collectionId:e=e.child(t.collectionId)}let s=[];n.where&&(s=Be(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new At(Ke(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,W(e)?null:e}(n.limit));let c=null;n.startAt&&(c=He(n.startAt));let u=null;return n.endAt&&(u=He(n.endAt)),function(t,e,n,i,r,s,o,a){return new Ct(t,e,n,i,r,s,o,a)}(e,r,o,s,a,"F",c,u)}function Be(t){return t?void 0!==t.unaryFilter?[ze(t)]:void 0!==t.fieldFilter?[qe(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>Be(t))).reduce(((t,e)=>t.concat(e))):m():[]}function He(t){const e=!!t.before,n=t.values||[];return new Et(n,e)}function Ke(t){return j.fromServerFormat(t.fieldPath)}function qe(t){return gt.create(Ke(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return m()}}(t.fieldFilter.op),t.fieldFilter.value)}function ze(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Ke(t.unaryFilter.field);return gt.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Ke(t.unaryFilter.field);return gt.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const i=Ke(t.unaryFilter.field);return gt.create(i,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const r=Ke(t.unaryFilter.field);return gt.create(r,"!=",{nullValue:"NULL_VALUE"});default:return m()}}function $e(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Ge(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=Xe(e)),e=We(t.get(n),e);return Xe(e)}function We(t,e){let n=e;const i=t.length;for(let e=0;e<i;e++){const i=t.charAt(e);switch(i){case"\0":n+="";break;case"":n+="";break;default:n+=i}}return n}function Xe(t){return t+""}class Qe{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}Qe.store="owner",Qe.key="owner";class Je{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}Je.store="mutationQueues",Je.keyPath="userId";class Ye{constructor(t,e,n,i,r){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=i,this.mutations=r}}Ye.store="mutations",Ye.keyPath="batchId",Ye.userMutationsIndex="userMutationsIndex",Ye.userMutationsKeyPath=["userId","batchId"];class Ze{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,Ge(e)]}static key(t,e,n){return[t,Ge(e),n]}}Ze.store="documentMutations",Ze.PLACEHOLDER=new Ze;class tn{constructor(t,e,n,i,r,s){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=i,this.readTime=r,this.parentPath=s}}tn.store="remoteDocuments",tn.readTimeIndex="readTimeIndex",tn.readTimeIndexPath="readTime",tn.collectionReadTimeIndex="collectionReadTimeIndex",tn.collectionReadTimeIndexPath=["parentPath","readTime"];class en{constructor(t){this.byteSize=t}}en.store="remoteDocumentGlobal",en.key="remoteDocumentGlobalKey";class nn{constructor(t,e,n,i,r,s,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=i,this.lastListenSequenceNumber=r,this.lastLimboFreeSnapshotVersion=s,this.query=o}}nn.store="targets",nn.keyPath="targetId",nn.queryTargetsIndexName="queryTargetsIndex",nn.queryTargetsKeyPath=["canonicalId","targetId"];class rn{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}rn.store="targetDocuments",rn.keyPath=["targetId","path"],rn.documentTargetsIndex="documentTargetsIndex",rn.documentTargetsKeyPath=["path","targetId"];class sn{constructor(t,e,n,i){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=i}}sn.key="targetGlobalKey",sn.store="targetGlobal";class on{constructor(t,e){this.collectionId=t,this.parent=e}}on.store="collectionParents",on.keyPath=["collectionId","parent"];class an{constructor(t,e,n,i){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=i}}an.store="clientMetadata",an.keyPath="clientId";class cn{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}cn.store="bundles",cn.keyPath="bundleId";class un{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}un.store="namedQueries",un.keyPath="name",Je.store,Ye.store,Ze.store,tn.store,nn.store,Qe.store,sn.store,rn.store,an.store,en.store,on.store,cn.store,un.store;const ln="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class hn{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}class dn{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&m(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new dn(((n,i)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,i)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,i)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof dn?e:dn.resolve(e)}catch(t){return dn.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):dn.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):dn.reject(e)}static resolve(t){return new dn(((e,n)=>{e(t)}))}static reject(t){return new dn(((e,n)=>{n(t)}))}static waitFor(t){return new dn(((e,n)=>{let i=0,r=0,s=!1;t.forEach((t=>{++i,t.next((()=>{++r,s&&r===i&&e()}),(t=>n(t)))})),s=!0,r===i&&e()}))}static or(t){let e=dn.resolve(!1);for(const n of t)e=e.next((t=>t?dn.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,i)=>{n.push(e.call(this,t,i))})),this.waitFor(n)}}function fn(t){return"IndexedDbTransactionError"===t.name}class pn{constructor(t,e,n,i){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=i}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const i=this.mutations[e];i.key.isEqual(t.key)&&re(i,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&se(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&se(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),i=n;this.applyToLocalView(i),n.isValidDocument()||i.convertToNoDocument(P.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),Ne())}isEqual(t){return this.batchId===t.batchId&&O(this.mutations,t.mutations,((t,e)=>ae(t,e)))&&O(this.baseMutations,t.baseMutations,((t,e)=>ae(t,e)))}}class gn{constructor(t,e,n,i){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=i}static from(t,e,n){y(t.mutations.length===n.length);let i=ke;const r=t.mutations;for(let t=0;t<r.length;t++)i=i.insert(r[t].key,n[t].version);return new gn(t,e,n,i)}}class mn{constructor(t){this.Wt=t}}function yn(t){const e=je({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new Ct(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class vn{constructor(){this.Gt=new wn}addToCollectionParentIndex(t,e){return this.Gt.add(e),dn.resolve()}getCollectionParents(t,e){return dn.resolve(this.Gt.getEntries(e))}}class wn{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e]||new _e(F.comparator),r=!i.has(n);return this.index[e]=i.add(n),r}has(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e];return i&&i.has(n)}getEntries(t){return(this.index[t]||new _e(F.comparator)).toArray()}}class bn{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new bn(t,bn.DEFAULT_COLLECTION_PERCENTILE,bn.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}bn.DEFAULT_COLLECTION_PERCENTILE=10,bn.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,bn.DEFAULT=new bn(41943040,bn.DEFAULT_COLLECTION_PERCENTILE,bn.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),bn.DISABLED=new bn(-1,0,0);class _n{constructor(t){this.ne=t}next(){return this.ne+=2,this.ne}static se(){return new _n(0)}static ie(){return new _n(-1)}}async function In(t){if(t.code!==w.FAILED_PRECONDITION||t.message!==ln)throw t;d("LocalStore","Unexpectedly lost primary lease")}class Tn{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,i]of n)if(this.equalsFn(e,t))return i}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),i=this.inner[n];if(void 0!==i){for(let n=0;n<i.length;n++)if(this.equalsFn(i[n][0],t))return void(i[n]=[t,e]);i.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let i=0;i<n.length;i++)if(this.equalsFn(n[i][0],t))return 1===n.length?delete this.inner[e]:n.splice(i,1),!0;return!1}forEach(t){x(this.inner,((e,n)=>{for(const[e,i]of n)t(e,i)}))}isEmpty(){return M(this.inner)}}class En{constructor(){this.changes=new Tn((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:P.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:lt.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?dn.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class Sn{constructor(t,e,n){this.He=t,this.In=e,this.Ht=n}An(t,e){return this.In.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Rn(t,e,n)))}Rn(t,e,n){return this.He.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}Pn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}bn(t,e){return this.He.getEntries(t,e).next((e=>this.vn(t,e).next((()=>e))))}vn(t,e){return this.In.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.Pn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return Q.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Vn(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.Sn(t,e,n):this.Dn(t,e,n)}Vn(t,e){return this.An(t,new Q(e)).next((t=>{let e=Ae();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Sn(t,e,n){const i=e.collectionGroup;let r=Ae();return this.Ht.getCollectionParents(t,i).next((s=>dn.forEach(s,(s=>{const o=function(t,e){return new Ct(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(i));return this.Dn(t,o,n).next((t=>{t.forEach(((t,e)=>{r=r.insert(t,e)}))}))})).next((()=>r))))}Dn(t,e,n){let i,r;return this.He.getDocumentsMatchingQuery(t,e,n).next((n=>(i=n,this.In.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(r=e,this.Cn(t,r,i).next((t=>{i=t;for(const t of r)for(const e of t.mutations){const n=e.key;let r=i.get(n);null==r&&(r=lt.newInvalidDocument(n),i=i.insert(n,r)),se(e,r,t.localWriteTime),r.isFoundDocument()||(i=i.remove(n))}}))))).next((()=>(i.forEach(((t,n)=>{Mt(e,n)||(i=i.remove(t))})),i)))}Cn(t,e,n){let i=Ne();for(const t of e)for(const e of t.mutations)e instanceof le&&null===n.get(e.key)&&(i=i.add(e.key));let r=n;return this.He.getEntries(t,i).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(r=r.insert(t,e))})),r)))}}class An{constructor(t,e,n,i){this.targetId=t,this.fromCache=e,this.Nn=n,this.xn=i}static kn(t,e){let n=Ne(),i=Ne();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:i=i.add(t.doc.key)}return new An(t,e.fromCache,n,i)}}class kn{$n(t){this.On=t}getDocumentsMatchingQuery(t,e,n,i){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(P.min())?this.Fn(t,e):this.On.bn(t,i).next((r=>{const o=this.Mn(e,r);return(function(t){return!W(t.limit)&&"F"===t.limitType}(e)||function(t){return!W(t.limit)&&"L"===t.limitType}(e))&&this.Ln(e.limitType,o,i,n)?this.Fn(t,e):(h()<=s.$b.DEBUG&&d("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),xt(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(o.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Mn(t,e){let n=new _e(function(t){return(e,n)=>{let i=!1;for(const r of Ot(t)){const t=Ut(r,e,n);if(0!==t)return t;i=i||r.field.isKeyField()}return 0}}(t));return e.forEach(((e,i)=>{Mt(t,i)&&(n=n.add(i))})),n}Ln(t,e,n,i){if(n.size!==e.size)return!0;const r="F"===t?e.last():e.first();return!!r&&(r.hasPendingWrites||r.version.compareTo(i)>0)}Fn(t,e){return h()<=s.$b.DEBUG&&d("QueryEngine","Using full collection scan to execute query:",xt(e)),this.On.getDocumentsMatchingQuery(t,e,P.min())}}class Rn{constructor(t,e,n,i){this.persistence=t,this.Bn=e,this.N=i,this.Un=new ve(C),this.qn=new Tn((t=>ft(t)),pt),this.Kn=P.min(),this.In=t.getMutationQueue(n),this.jn=t.getRemoteDocumentCache(),this.ze=t.getTargetCache(),this.Qn=new Sn(this.jn,this.In,this.persistence.getIndexManager()),this.Je=t.getBundleCache(),this.Bn.$n(this.Qn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Un)))}}async function Nn(t,e){const n=v(t);let i=n.In,r=n.Qn;const s=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.In.getAllMutationBatches(t).next((o=>(s=o,i=n.persistence.getMutationQueue(e),r=new Sn(n.jn,i,n.persistence.getIndexManager()),i.getAllMutationBatches(t)))).next((e=>{const n=[],i=[];let o=Ne();for(const t of s){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){i.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return r.bn(t,o).next((t=>({Wn:t,removedBatchIds:n,addedBatchIds:i})))}))}));return n.In=i,n.Qn=r,n.Bn.$n(n.Qn),s}function Cn(t,e){const n=v(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.In.getNextMutationBatchAfterBatchId(t,e))))}class On{constructor(t){this.N=t,this.Yn=new Map,this.Xn=new Map}getBundleMetadata(t,e){return dn.resolve(this.Yn.get(e))}saveBundleMetadata(t,e){var n;return this.Yn.set(e.id,{id:(n=e).id,version:n.version,createTime:xe(n.createTime)}),dn.resolve()}getNamedQuery(t,e){return dn.resolve(this.Xn.get(e))}saveNamedQuery(t,e){return this.Xn.set(e.name,function(t){return{name:t.name,query:yn(t.bundledQuery),readTime:xe(t.readTime)}}(e)),dn.resolve()}}class Dn{constructor(){this.Zn=new _e(Pn.ts),this.es=new _e(Pn.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(t,e){const n=new Pn(t,e);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.rs(new Pn(t,e))}os(t,e){t.forEach((t=>this.removeReference(t,e)))}cs(t){const e=new Q(new F([])),n=new Pn(e,t),i=new Pn(e,t+1),r=[];return this.es.forEachInRange([n,i],(t=>{this.rs(t),r.push(t.key)})),r}us(){this.Zn.forEach((t=>this.rs(t)))}rs(t){this.Zn=this.Zn.delete(t),this.es=this.es.delete(t)}hs(t){const e=new Q(new F([])),n=new Pn(e,t),i=new Pn(e,t+1);let r=Ne();return this.es.forEachInRange([n,i],(t=>{r=r.add(t.key)})),r}containsKey(t){const e=new Pn(t,0),n=this.Zn.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class Pn{constructor(t,e){this.key=t,this.ls=e}static ts(t,e){return Q.comparator(t.key,e.key)||C(t.ls,e.ls)}static ns(t,e){return C(t.ls,e.ls)||Q.comparator(t.key,e.key)}}class Ln{constructor(t,e){this.Ht=t,this.referenceDelegate=e,this.In=[],this.fs=1,this.ds=new _e(Pn.ts)}checkEmpty(t){return dn.resolve(0===this.In.length)}addMutationBatch(t,e,n,i){const r=this.fs;this.fs++,this.In.length>0&&this.In[this.In.length-1];const s=new pn(r,e,n,i);this.In.push(s);for(const e of i)this.ds=this.ds.add(new Pn(e.key,r)),this.Ht.addToCollectionParentIndex(t,e.key.path.popLast());return dn.resolve(s)}lookupMutationBatch(t,e){return dn.resolve(this.ws(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,i=this._s(n),r=i<0?0:i;return dn.resolve(this.In.length>r?this.In[r]:null)}getHighestUnacknowledgedBatchId(){return dn.resolve(0===this.In.length?-1:this.fs-1)}getAllMutationBatches(t){return dn.resolve(this.In.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new Pn(e,0),i=new Pn(e,Number.POSITIVE_INFINITY),r=[];return this.ds.forEachInRange([n,i],(t=>{const e=this.ws(t.ls);r.push(e)})),dn.resolve(r)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new _e(C);return e.forEach((t=>{const e=new Pn(t,0),i=new Pn(t,Number.POSITIVE_INFINITY);this.ds.forEachInRange([e,i],(t=>{n=n.add(t.ls)}))})),dn.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,i=n.length+1;let r=n;Q.isDocumentKey(r)||(r=r.child(""));const s=new Pn(new Q(r),0);let o=new _e(C);return this.ds.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===i&&(o=o.add(t.ls)),!0)}),s),dn.resolve(this.gs(o))}gs(t){const e=[];return t.forEach((t=>{const n=this.ws(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){y(0===this.ys(e.batchId,"removed")),this.In.shift();let n=this.ds;return dn.forEach(e.mutations,(i=>{const r=new Pn(i.key,e.batchId);return n=n.delete(r),this.referenceDelegate.markPotentiallyOrphaned(t,i.key)})).next((()=>{this.ds=n}))}te(t){}containsKey(t,e){const n=new Pn(e,0),i=this.ds.firstAfterOrEqual(n);return dn.resolve(e.isEqual(i&&i.key))}performConsistencyCheck(t){return this.In.length,dn.resolve()}ys(t,e){return this._s(t)}_s(t){return 0===this.In.length?0:t-this.In[0].batchId}ws(t){const e=this._s(t);return e<0||e>=this.In.length?null:this.In[e]}}class xn{constructor(t,e){this.Ht=t,this.ps=e,this.docs=new ve(Q.comparator),this.size=0}addEntry(t,e,n){const i=e.key,r=this.docs.get(i),s=r?r.size:0,o=this.ps(e);return this.docs=this.docs.insert(i,{document:e.clone(),size:o,readTime:n}),this.size+=o-s,this.Ht.addToCollectionParentIndex(t,i.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return dn.resolve(n?n.document.clone():lt.newInvalidDocument(e))}getEntries(t,e){let n=Ee();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():lt.newInvalidDocument(t))})),dn.resolve(n)}getDocumentsMatchingQuery(t,e,n){let i=Ee();const r=new Q(e.path.child("")),s=this.docs.getIteratorFrom(r);for(;s.hasNext();){const{key:t,value:{document:r,readTime:o}}=s.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||Mt(e,r)&&(i=i.insert(r.key,r.clone()))}return dn.resolve(i)}Es(t,e){return dn.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new Mn(this)}getSize(t){return dn.resolve(this.size)}}class Mn extends En{constructor(t){super(),this.Se=t}applyChanges(t){const e=[];return this.changes.forEach(((n,i)=>{i.document.isValidDocument()?e.push(this.Se.addEntry(t,i.document,this.getReadTime(n))):this.Se.removeEntry(n)})),dn.waitFor(e)}getFromCache(t,e){return this.Se.getEntry(t,e)}getAllFromCache(t,e){return this.Se.getEntries(t,e)}}class Un{constructor(t){this.persistence=t,this.Ts=new Tn((t=>ft(t)),pt),this.lastRemoteSnapshotVersion=P.min(),this.highestTargetId=0,this.Is=0,this.As=new Dn,this.targetCount=0,this.Rs=_n.se()}forEachTarget(t,e){return this.Ts.forEach(((t,n)=>e(n))),dn.resolve()}getLastRemoteSnapshotVersion(t){return dn.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return dn.resolve(this.Is)}allocateTargetId(t){return this.highestTargetId=this.Rs.next(),dn.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Is&&(this.Is=e),dn.resolve()}ae(t){this.Ts.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Rs=new _n(e),this.highestTargetId=e),t.sequenceNumber>this.Is&&(this.Is=t.sequenceNumber)}addTargetData(t,e){return this.ae(e),this.targetCount+=1,dn.resolve()}updateTargetData(t,e){return this.ae(e),dn.resolve()}removeTargetData(t,e){return this.Ts.delete(e.target),this.As.cs(e.targetId),this.targetCount-=1,dn.resolve()}removeTargets(t,e,n){let i=0;const r=[];return this.Ts.forEach(((s,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Ts.delete(s),r.push(this.removeMatchingKeysForTargetId(t,o.targetId)),i++)})),dn.waitFor(r).next((()=>i))}getTargetCount(t){return dn.resolve(this.targetCount)}getTargetData(t,e){const n=this.Ts.get(e)||null;return dn.resolve(n)}addMatchingKeys(t,e,n){return this.As.ss(e,n),dn.resolve()}removeMatchingKeys(t,e,n){this.As.os(e,n);const i=this.persistence.referenceDelegate,r=[];return i&&e.forEach((e=>{r.push(i.markPotentiallyOrphaned(t,e))})),dn.waitFor(r)}removeMatchingKeysForTargetId(t,e){return this.As.cs(e),dn.resolve()}getMatchingKeysForTargetId(t,e){const n=this.As.hs(e);return dn.resolve(n)}containsKey(t,e){return dn.resolve(this.As.containsKey(e))}}class Fn{constructor(t,e){this.Ps={},this.Le=new k(0),this.Be=!1,this.Be=!0,this.referenceDelegate=t(this),this.ze=new Un(this),this.Ht=new vn,this.He=function(t,e){return new xn(t,e)}(this.Ht,(t=>this.referenceDelegate.bs(t))),this.N=new mn(e),this.Je=new On(this.N)}start(){return Promise.resolve()}shutdown(){return this.Be=!1,Promise.resolve()}get started(){return this.Be}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Ht}getMutationQueue(t){let e=this.Ps[t.toKey()];return e||(e=new Ln(this.Ht,this.referenceDelegate),this.Ps[t.toKey()]=e),e}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getBundleCache(){return this.Je}runTransaction(t,e,n){d("MemoryPersistence","Starting transaction:",t);const i=new Vn(this.Le.next());return this.referenceDelegate.vs(),n(i).next((t=>this.referenceDelegate.Vs(i).next((()=>t)))).toPromise().then((t=>(i.raiseOnCommittedEvent(),t)))}Ss(t,e){return dn.or(Object.values(this.Ps).map((n=>()=>n.containsKey(t,e))))}}class Vn extends hn{constructor(t){super(),this.currentSequenceNumber=t}}class jn{constructor(t){this.persistence=t,this.Ds=new Dn,this.Cs=null}static Ns(t){return new jn(t)}get xs(){if(this.Cs)return this.Cs;throw m()}addReference(t,e,n){return this.Ds.addReference(n,e),this.xs.delete(n.toString()),dn.resolve()}removeReference(t,e,n){return this.Ds.removeReference(n,e),this.xs.add(n.toString()),dn.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),dn.resolve()}removeTarget(t,e){this.Ds.cs(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}vs(){this.Cs=new Set}Vs(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return dn.forEach(this.xs,(n=>{const i=Q.fromPath(n);return this.ks(t,i).next((t=>{t||e.removeEntry(i)}))})).next((()=>(this.Cs=null,e.apply(t))))}updateLimboDocument(t,e){return this.ks(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}bs(t){return 0}ks(t,e){return dn.or([()=>dn.resolve(this.Ds.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ss(t,e)])}}class Bn{constructor(){this.activeTargetIds=Ce}Fs(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ms(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Hn{constructor(){this.yi=new Bn,this.pi={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.yi.Fs(t),this.pi[t]||"not-current"}updateQueryState(t,e,n){this.pi[t]=e}removeLocalQueryTarget(t){this.yi.Ms(t)}isLocalQueryTarget(t){return this.yi.activeTargetIds.has(t)}clearQueryState(t){delete this.pi[t]}getAllActiveQueryTargets(){return this.yi.activeTargetIds}isActiveQueryTarget(t){return this.yi.activeTargetIds.has(t)}start(){return this.yi=new Bn,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Kn{Ei(t){}shutdown(){}}class qn{constructor(){this.Ti=()=>this.Ii(),this.Ai=()=>this.Ri(),this.Pi=[],this.bi()}Ei(t){this.Pi.push(t)}shutdown(){window.removeEventListener("online",this.Ti),window.removeEventListener("offline",this.Ai)}bi(){window.addEventListener("online",this.Ti),window.addEventListener("offline",this.Ai)}Ii(){d("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.Pi)t(0)}Ri(){d("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.Pi)t(1)}static Pt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const zn={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class $n{constructor(t){this.vi=t.vi,this.Vi=t.Vi}Si(t){this.Di=t}Ci(t){this.Ni=t}onMessage(t){this.xi=t}close(){this.Vi()}send(t){this.vi(t)}ki(){this.Di()}$i(t){this.Ni(t)}Oi(t){this.xi(t)}}class Gn extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Fi=e+"://"+t.host,this.Mi="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Li(t,e,n,i){const r=this.Bi(t,e);d("RestConnection","Sending: ",r,n);const s={};return this.Ui(s,i),this.qi(t,r,s,n).then((t=>(d("RestConnection","Received: ",t),t)),(e=>{throw p("RestConnection",`${t} failed with error: `,e,"url: ",r,"request:",n),e}))}Ki(t,e,n,i){return this.Li(t,e,n,i)}Ui(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/"+u,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e)for(const n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n])}Bi(t,e){const n=zn[t];return`${this.Fi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}qi(t,e,n,i){return new Promise(((r,s)=>{const o=new a.ZS;o.listenOnce(a.Bx.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case a.O4.NO_ERROR:const e=o.getResponseJson();d("Connection","XHR received:",JSON.stringify(e)),r(e);break;case a.O4.TIMEOUT:d("Connection",'RPC "'+t+'" timed out'),s(new b(w.DEADLINE_EXCEEDED,"Request time out"));break;case a.O4.HTTP_ERROR:const n=o.getStatus();if(d("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(w).indexOf(e)>=0?e:w.UNKNOWN}(t.status);s(new b(e,t.message))}else s(new b(w.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new b(w.UNAVAILABLE,"Connection failed."));break;default:m()}}finally{d("Connection",'RPC "'+t+'" completed.')}}));const c=JSON.stringify(i);o.send(e,"POST",c,n,15)}))}ji(t,e){const n=[this.Fi,"/","google.firestore.v1.Firestore","/",t,"/channel"],i=(0,a.fF)(),r=(0,a.Ao)(),s={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(s.xmlHttpFactory=new a._L({})),this.Ui(s.initMessageHeaders,e),(0,o.jZ)()||(0,o.lV)()||(0,o.b8)()||(0,o.lT)()||(0,o.n4)()||(0,o.sr)()||(s.httpHeadersOverwriteParam="$httpHeaders");const c=n.join("");d("Connection","Creating WebChannel: "+c,s);const u=i.createWebChannel(c,s);let l=!1,h=!1;const g=new $n({vi:t=>{h?d("Connection","Not sending because WebChannel is closed:",t):(l||(d("Connection","Opening WebChannel transport."),u.open(),l=!0),d("Connection","WebChannel sending:",t),u.send(t))},Vi:()=>u.close()}),v=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return v(u,a.iO.EventType.OPEN,(()=>{h||d("Connection","WebChannel transport opened.")})),v(u,a.iO.EventType.CLOSE,(()=>{h||(h=!0,d("Connection","WebChannel transport closed"),g.$i())})),v(u,a.iO.EventType.ERROR,(t=>{h||(h=!0,p("Connection","WebChannel transport errored:",t),g.$i(new b(w.UNAVAILABLE,"The operation could not be completed")))})),v(u,a.iO.EventType.MESSAGE,(t=>{var e;if(!h){const n=t.data[0];y(!!n);const i=n,r=i.error||(null===(e=i[0])||void 0===e?void 0:e.error);if(r){d("Connection","WebChannel received error:",r);const t=r.status;let e=function(t){const e=me[t];if(void 0!==e)return function(t){if(void 0===t)return f("GRPC error has no .code"),w.UNKNOWN;switch(t){case me.OK:return w.OK;case me.CANCELLED:return w.CANCELLED;case me.UNKNOWN:return w.UNKNOWN;case me.DEADLINE_EXCEEDED:return w.DEADLINE_EXCEEDED;case me.RESOURCE_EXHAUSTED:return w.RESOURCE_EXHAUSTED;case me.INTERNAL:return w.INTERNAL;case me.UNAVAILABLE:return w.UNAVAILABLE;case me.UNAUTHENTICATED:return w.UNAUTHENTICATED;case me.INVALID_ARGUMENT:return w.INVALID_ARGUMENT;case me.NOT_FOUND:return w.NOT_FOUND;case me.ALREADY_EXISTS:return w.ALREADY_EXISTS;case me.PERMISSION_DENIED:return w.PERMISSION_DENIED;case me.FAILED_PRECONDITION:return w.FAILED_PRECONDITION;case me.ABORTED:return w.ABORTED;case me.OUT_OF_RANGE:return w.OUT_OF_RANGE;case me.UNIMPLEMENTED:return w.UNIMPLEMENTED;case me.DATA_LOSS:return w.DATA_LOSS;default:return m()}}(e)}(t),n=r.message;void 0===e&&(e=w.INTERNAL,n="Unknown error status: "+t+" with message "+r.message),h=!0,g.$i(new b(e,n)),u.close()}else d("Connection","WebChannel received:",n),g.Oi(n)}})),v(r,a.Jh.STAT_EVENT,(t=>{t.stat===a.ro.PROXY?d("Connection","Detected buffering proxy"):t.stat===a.ro.NOPROXY&&d("Connection","Detected no buffering proxy")})),setTimeout((()=>{g.ki()}),0),g}}function Wn(){return"undefined"!=typeof document?document:null}function Xn(t){return new Oe(t,!0)}class Qn{constructor(t,e,n=1e3,i=1.5,r=6e4){this.Oe=t,this.timerId=e,this.Qi=n,this.Wi=i,this.Gi=r,this.zi=0,this.Hi=null,this.Ji=Date.now(),this.reset()}reset(){this.zi=0}Yi(){this.zi=this.Gi}Xi(t){this.cancel();const e=Math.floor(this.zi+this.Zi()),n=Math.max(0,Date.now()-this.Ji),i=Math.max(0,e-n);i>0&&d("ExponentialBackoff",`Backing off for ${i} ms (base delay: ${this.zi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Hi=this.Oe.enqueueAfterDelay(this.timerId,i,(()=>(this.Ji=Date.now(),t()))),this.zi*=this.Wi,this.zi<this.Qi&&(this.zi=this.Qi),this.zi>this.Gi&&(this.zi=this.Gi)}tr(){null!==this.Hi&&(this.Hi.skipDelay(),this.Hi=null)}cancel(){null!==this.Hi&&(this.Hi.cancel(),this.Hi=null)}Zi(){return(Math.random()-.5)*this.zi}}class Jn{constructor(t,e,n,i,r,s){this.Oe=t,this.er=n,this.nr=i,this.credentialsProvider=r,this.listener=s,this.state=0,this.sr=0,this.ir=null,this.stream=null,this.rr=new Qn(t,e)}ar(){return 1===this.state||2===this.state||4===this.state}cr(){return 2===this.state}start(){3!==this.state?this.auth():this.ur()}async stop(){this.ar()&&await this.close(0)}hr(){this.state=0,this.rr.reset()}lr(){this.cr()&&null===this.ir&&(this.ir=this.Oe.enqueueAfterDelay(this.er,6e4,(()=>this.dr())))}wr(t){this._r(),this.stream.send(t)}async dr(){if(this.cr())return this.close(0)}_r(){this.ir&&(this.ir.cancel(),this.ir=null)}async close(t,e){this._r(),this.rr.cancel(),this.sr++,3!==t?this.rr.reset():e&&e.code===w.RESOURCE_EXHAUSTED?(f(e.toString()),f("Using maximum backoff delay to prevent overloading the backend."),this.rr.Yi()):e&&e.code===w.UNAUTHENTICATED&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.mr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ci(e)}mr(){}auth(){this.state=1;const t=this.gr(this.sr),e=this.sr;this.credentialsProvider.getToken().then((t=>{this.sr===e&&this.yr(t)}),(e=>{t((()=>{const t=new b(w.UNKNOWN,"Fetching auth token failed: "+e.message);return this.pr(t)}))}))}yr(t){const e=this.gr(this.sr);this.stream=this.Er(t),this.stream.Si((()=>{e((()=>(this.state=2,this.listener.Si())))})),this.stream.Ci((t=>{e((()=>this.pr(t)))})),this.stream.onMessage((t=>{e((()=>this.onMessage(t)))}))}ur(){this.state=4,this.rr.Xi((async()=>{this.state=0,this.start()}))}pr(t){return d("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(3,t)}gr(t){return e=>{this.Oe.enqueueAndForget((()=>this.sr===t?e():(d("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Yn extends Jn{constructor(t,e,n,i,r){super(t,"write_stream_connection_backoff","write_stream_idle",e,n,r),this.N=i,this.Rr=!1}get Pr(){return this.Rr}start(){this.Rr=!1,this.lastStreamToken=void 0,super.start()}mr(){this.Rr&&this.br([])}Er(t){return this.nr.ji("Write",t)}onMessage(t){if(y(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Rr){this.rr.reset();const e=function(t,e){return t&&t.length>0?(y(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?xe(t.updateTime):xe(e);return n.isEqual(P.min())&&(n=xe(e)),new te(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=xe(t.commitTime);return this.listener.vr(n,e)}return y(!t.writeResults||0===t.writeResults.length),this.Rr=!0,this.listener.Vr()}Sr(){const t={};t.database=function(t){return new F(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}(this.N),this.wr(t)}br(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof ue)n={update:Ve(t,e.key,e.value)};else if(e instanceof pe)n={delete:Ue(t,e.key)};else if(e instanceof le)n={update:Ve(t,e.key,e.data),updateMask:$e(e.fieldMask)};else{if(!(e instanceof ge))return m();n={verify:Ue(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof zt)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof $t)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Wt)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Qt)return{fieldPath:e.field.canonicalString(),increment:n.C};throw m()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:Le(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:m()}(t,e.precondition)),n}(this.N,t)))};this.wr(e)}}class Zn extends class{}{constructor(t,e,n){super(),this.credentials=t,this.nr=e,this.N=n,this.Dr=!1}Cr(){if(this.Dr)throw new b(w.FAILED_PRECONDITION,"The client has already been terminated.")}Li(t,e,n){return this.Cr(),this.credentials.getToken().then((i=>this.nr.Li(t,e,n,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===w.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new b(w.UNKNOWN,t.toString())}))}Ki(t,e,n){return this.Cr(),this.credentials.getToken().then((i=>this.nr.Ki(t,e,n,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===w.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new b(w.UNKNOWN,t.toString())}))}terminate(){this.Dr=!0}}class ti{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Nr=0,this.kr=null,this.$r=!0}Or(){0===this.Nr&&(this.Fr("Unknown"),this.kr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.kr=null,this.Mr("Backend didn't respond within 10 seconds."),this.Fr("Offline"),Promise.resolve()))))}Lr(t){"Online"===this.state?this.Fr("Unknown"):(this.Nr++,this.Nr>=1&&(this.Br(),this.Mr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Fr("Offline")))}set(t){this.Br(),this.Nr=0,"Online"===t&&(this.$r=!1),this.Fr(t)}Fr(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}Mr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.$r?(f(e),this.$r=!1):d("OnlineStateTracker",e)}Br(){null!==this.kr&&(this.kr.cancel(),this.kr=null)}}class ei{constructor(t,e,n,i,r){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Ur=[],this.qr=new Map,this.Kr=new Set,this.jr=[],this.Qr=r,this.Qr.Ei((t=>{n.enqueueAndForget((async()=>{ri(this)&&(d("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=v(t);e.Kr.add(4),await ii(e),e.Wr.set("Unknown"),e.Kr.delete(4),await ni(e)}(this))}))})),this.Wr=new ti(n,i)}}async function ni(t){if(ri(t))for(const e of t.jr)await e(!0)}async function ii(t){for(const e of t.jr)await e(!1)}function ri(t){return 0===v(t).Kr.size}async function si(t,e,n){if(!fn(e))throw e;t.Kr.add(1),await ii(t),t.Wr.set("Offline"),n||(n=()=>function(t){const e=v(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.ze.getLastRemoteSnapshotVersion(t)))}(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{d("RemoteStore","Retrying IndexedDB access"),await n(),t.Kr.delete(1),await ni(t)}))}function oi(t,e){return e().catch((n=>si(t,n,e)))}async function ai(t){const e=v(t),n=mi(e);let i=e.Ur.length>0?e.Ur[e.Ur.length-1].batchId:-1;for(;ci(e);)try{const t=await Cn(e.localStore,i);if(null===t){0===e.Ur.length&&n.lr();break}i=t.batchId,ui(e,t)}catch(t){await si(e,t)}li(e)&&hi(e)}function ci(t){return ri(t)&&t.Ur.length<10}function ui(t,e){t.Ur.push(e);const n=mi(t);n.cr()&&n.Pr&&n.br(e.mutations)}function li(t){return ri(t)&&!mi(t).ar()&&t.Ur.length>0}function hi(t){mi(t).start()}async function di(t){mi(t).Sr()}async function fi(t){const e=mi(t);for(const n of t.Ur)e.br(n.mutations)}async function pi(t,e,n){const i=t.Ur.shift(),r=gn.from(i,e,n);await oi(t,(()=>t.remoteSyncer.applySuccessfulWrite(r))),await ai(t)}async function gi(t,e){e&&mi(t).Pr&&await async function(t,e){if(function(t){switch(t){case w.OK:return m();case w.CANCELLED:case w.UNKNOWN:case w.DEADLINE_EXCEEDED:case w.RESOURCE_EXHAUSTED:case w.INTERNAL:case w.UNAVAILABLE:case w.UNAUTHENTICATED:return!1;case w.INVALID_ARGUMENT:case w.NOT_FOUND:case w.ALREADY_EXISTS:case w.PERMISSION_DENIED:case w.FAILED_PRECONDITION:case w.ABORTED:case w.OUT_OF_RANGE:case w.UNIMPLEMENTED:case w.DATA_LOSS:return!0;default:return m()}}(n=e.code)&&n!==w.ABORTED){const n=t.Ur.shift();mi(t).hr(),await oi(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await ai(t)}var n}(t,e),li(t)&&hi(t)}function mi(t){return t.Hr||(t.Hr=function(t,e,n){const i=v(t);return i.Cr(),new Yn(e,i.nr,i.credentials,i.N,n)}(t.datastore,t.asyncQueue,{Si:di.bind(null,t),Ci:gi.bind(null,t),Vr:fi.bind(null,t),vr:pi.bind(null,t)}),t.jr.push((async e=>{e?(t.Hr.hr(),await ai(t)):(await t.Hr.stop(),t.Ur.length>0&&(d("RemoteStore",`Stopping write stream with ${t.Ur.length} pending writes`),t.Ur=[]))}))),t.Hr}class yi{constructor(t,e,n,i,r){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=i,this.removalCallback=r,this.deferred=new _,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,i,r){const s=Date.now()+n,o=new yi(t,e,s,i,r);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new b(w.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function vi(t,e){if(f("AsyncQueue",`${e}: ${t}`),fn(t))return new b(w.UNAVAILABLE,`${e}: ${t}`);throw t}class wi{constructor(){this.queries=new Tn((t=>Lt(t)),Pt),this.onlineState="Unknown",this.Zr=new Set}}class bi{constructor(t,e,n,i,r,s){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=i,this.currentUser=r,this.maxConcurrentLimboResolutions=s,this.No={},this.xo=new Tn((t=>Lt(t)),Pt),this.ko=new Map,this.$o=new Set,this.Oo=new ve(Q.comparator),this.Fo=new Map,this.Mo=new Dn,this.Lo={},this.Bo=new Map,this.Uo=_n.ie(),this.onlineState="Unknown",this.qo=void 0}get isPrimaryClient(){return!0===this.qo}}function _i(t,e,n){const i=v(t);if(i.isPrimaryClient&&0===n||!i.isPrimaryClient&&1===n){const t=[];i.xo.forEach(((n,i)=>{const r=i.view.eo(e);r.snapshot&&t.push(r.snapshot)})),function(t,e){const n=v(t);n.onlineState=e;let i=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.eo(e)&&(i=!0)})),i&&function(t){t.Zr.forEach((t=>{t.next()}))}(n)}(i.eventManager,e),t.length&&i.No.Tr(t),i.onlineState=e,i.isPrimaryClient&&i.sharedClientState.setOnlineState(e)}}async function Ii(t,e){const n=v(t),i=e.batch.batchId;try{const t=await function(t,e){const n=v(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const i=e.batch.keys(),r=n.jn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,i){const r=n.batch,s=r.keys();let o=dn.resolve();return s.forEach((t=>{o=o.next((()=>i.getEntry(e,t))).next((e=>{const s=n.docVersions.get(t);y(null!==s),e.version.compareTo(s)<0&&(r.applyToRemoteDocument(e,n),e.isValidDocument()&&i.addEntry(e,n.commitVersion))}))})),o.next((()=>t.In.removeMutationBatch(e,r)))}(n,t,e,r).next((()=>r.apply(t))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,i)))}))}(n.localStore,e);Si(n,i,null),Ei(n,i),n.sharedClientState.updateMutationState(i,"acknowledged"),await Ai(n,t)}catch(t){await In(t)}}async function Ti(t,e,n){const i=v(t);try{const t=await function(t,e){const n=v(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let i;return n.In.lookupMutationBatch(t,e).next((e=>(y(null!==e),i=e.keys(),n.In.removeMutationBatch(t,e)))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,i)))}))}(i.localStore,e);Si(i,e,n),Ei(i,e),i.sharedClientState.updateMutationState(e,"rejected",n),await Ai(i,t)}catch(n){await In(n)}}function Ei(t,e){(t.Bo.get(e)||[]).forEach((t=>{t.resolve()})),t.Bo.delete(e)}function Si(t,e,n){const i=v(t);let r=i.Lo[i.currentUser.toKey()];if(r){const t=r.get(e);t&&(n?t.reject(n):t.resolve(),r=r.remove(e)),i.Lo[i.currentUser.toKey()]=r}}async function Ai(t,e,n){const i=v(t),r=[],s=[],o=[];i.xo.isEmpty()||(i.xo.forEach(((t,a)=>{o.push(i.Ko(a,e,n).then((t=>{if(t){i.isPrimaryClient&&i.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),r.push(t);const e=An.kn(a.targetId,t);s.push(e)}})))})),await Promise.all(o),i.No.Tr(r),await async function(t,e){const n=v(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>dn.forEach(e,(e=>dn.forEach(e.Nn,(i=>n.persistence.referenceDelegate.addReference(t,e.targetId,i))).next((()=>dn.forEach(e.xn,(i=>n.persistence.referenceDelegate.removeReference(t,e.targetId,i)))))))))}catch(t){if(!fn(t))throw t;d("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Un.get(e),i=t.snapshotVersion,r=t.withLastLimboFreeSnapshotVersion(i);n.Un=n.Un.insert(e,r)}}}(i.localStore,s))}async function ki(t,e){const n=v(t);if(!n.currentUser.isEqual(e)){d("SyncEngine","User change. New user:",e.toKey());const t=await Nn(n.localStore,e);n.currentUser=e,function(t){t.Bo.forEach((t=>{t.forEach((t=>{t.reject(new b(w.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Bo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Ai(n,t.Wn)}}function Ri(t){const e=v(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=Ii.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=Ti.bind(null,e),e}class Ni{constructor(){this.synchronizeTabs=!1}async initialize(t){this.N=Xn(t.databaseInfo.databaseId),this.sharedClientState=this.Wo(t),this.persistence=this.Go(t),await this.persistence.start(),this.gcScheduler=this.zo(t),this.localStore=this.Ho(t)}zo(t){return null}Ho(t){return function(t,e,n,i){return new Rn(t,e,n,i)}(this.persistence,new kn,t.initialUser,this.N)}Go(t){return new Fn(jn.Ns,this.N)}Wo(t){return new Hn}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class Ci{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>_i(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=ki.bind(null,this.syncEngine),await async function(t,e){const n=v(t);e?(n.Kr.delete(2),await ni(n)):e||(n.Kr.add(2),await ii(n),n.Wr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new wi}createDatastore(t){const e=Xn(t.databaseInfo.databaseId),n=(i=t.databaseInfo,new Gn(i));var i;return function(t,e,n){return new Zn(t,e,n)}(t.credentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,i=t.asyncQueue,r=t=>_i(this.syncEngine,t,0),s=qn.Pt()?new qn:new Kn,new ei(e,n,i,r,s);var e,n,i,r,s}createSyncEngine(t,e){return function(t,e,n,i,r,s,o){const a=new bi(t,e,n,i,r,s);return o&&(a.qo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=v(t);d("RemoteStore","RemoteStore shutting down."),e.Kr.add(5),await ii(e),e.Qr.shutdown(),e.Wr.set("Unknown")}(this.remoteStore)}}class Oi{constructor(t,e,n){this.credentials=t,this.asyncQueue=e,this.databaseInfo=n,this.user=c.UNAUTHENTICATED,this.clientId=N.I(),this.credentialListener=()=>Promise.resolve(),this.credentials.start(e,(async t=>{d("FirestoreClient","Received user=",t.uid),await this.credentialListener(t),this.user=t}))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,credentials:this.credentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.credentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new b(w.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new _;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.credentials.shutdown(),t.resolve()}catch(e){const n=vi(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function Di(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(d("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),d("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let i=n.initialUser;t.setCredentialChangeListener((async t=>{i.isEqual(t)||(await Nn(e.localStore,t),i=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new Ni)),t.offlineComponents}(t);d("FirestoreClient","Initializing OnlineComponentProvider");const i=await t.getConfiguration();await e.initialize(n,i),t.setCredentialChangeListener((t=>async function(t,e){const n=v(t);n.asyncQueue.verifyOperationInProgress(),d("RemoteStore","RemoteStore received new credentials");const i=ri(n);n.Kr.add(3),await ii(n),i&&n.Wr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Kr.delete(3),await ni(n)}(e.remoteStore,t))),t.onlineComponents=e}function Pi(t){return async function(t){return t.onlineComponents||(d("FirestoreClient","Using default OnlineComponentProvider"),await Di(t,new Ci)),t.onlineComponents}(t).then((t=>t.syncEngine))}class Li{constructor(t,e,n,i,r,s,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=i,this.ssl=r,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class xi{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof xi&&t.projectId===this.projectId&&t.database===this.database}}const Mi=new Map;function Ui(t){if(!Q.isDocumentKey(t))throw new b(w.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Fi(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){if(t.constructor){const e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":m()}function Vi(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new b(w.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Fi(t);throw new b(w.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class ji{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new b(w.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new b(w.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,i){if(!0===e&&!0===i)throw new b(w.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class Bi{constructor(t,e){this._credentials=e,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new ji({}),this._settingsFrozen=!1,t instanceof xi?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new b(w.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new xi(t.options.projectId)}(t))}get app(){if(!this._app)throw new b(w.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new b(w.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new ji(t),void 0!==t.credentials&&(this._credentials=function(t){if(!t)return new T;switch(t.type){case"gapi":const e=t.client;return y(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new A(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new b(w.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=Mi.get(t);e&&(d("ComponentProvider","Removing Datastore"),Mi.delete(t),e.terminate())}(this),Promise.resolve()}}class Hi{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new qi(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new Hi(this.firestore,t,this._key)}}class Ki{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new Ki(this.firestore,t,this._query)}}class qi extends Ki{constructor(t,e,n){super(t,e,function(t){return new Ct(t)}(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new Hi(this.firestore,null,new Q(t))}withConverter(t){return new qi(this.firestore,t,this._path)}}function zi(t,e,...n){if(t=(0,o.Ku)(t),1===arguments.length&&(e=N.I()),function(t,e,n){if(!n)throw new b(w.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}("doc","path",e),t instanceof Bi){const i=F.fromString(e,...n);return Ui(i),new Hi(t,null,new Q(i))}{if(!(t instanceof Hi||t instanceof qi))throw new b(w.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const i=t._path.child(F.fromString(e,...n));return Ui(i),new Hi(t.firestore,t instanceof qi?t.converter:null,new Q(i))}}class $i{constructor(){this.fa=Promise.resolve(),this.da=[],this.wa=!1,this._a=[],this.ma=null,this.ga=!1,this.ya=!1,this.pa=[],this.rr=new Qn(this,"async_queue_retry"),this.Ea=()=>{const t=Wn();t&&d("AsyncQueue","Visibility state changed to "+t.visibilityState),this.rr.tr()};const t=Wn();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ea)}get isShuttingDown(){return this.wa}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Ta(),this.Ia(t)}enterRestrictedMode(t){if(!this.wa){this.wa=!0,this.ya=t||!1;const e=Wn();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ea)}}enqueue(t){if(this.Ta(),this.wa)return new Promise((()=>{}));const e=new _;return this.Ia((()=>this.wa&&this.ya?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.da.push(t),this.Aa())))}async Aa(){if(0!==this.da.length){try{await this.da[0](),this.da.shift(),this.rr.reset()}catch(t){if(!fn(t))throw t;d("AsyncQueue","Operation failed with retryable error: "+t)}this.da.length>0&&this.rr.Xi((()=>this.Aa()))}}Ia(t){const e=this.fa.then((()=>(this.ga=!0,t().catch((t=>{throw this.ma=t,this.ga=!1,f("INTERNAL UNHANDLED ERROR: ",function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((t=>(this.ga=!1,t))))));return this.fa=e,e}enqueueAfterDelay(t,e,n){this.Ta(),this.pa.indexOf(t)>-1&&(e=0);const i=yi.createAndSchedule(this,t,e,n,(t=>this.Ra(t)));return this._a.push(i),i}Ta(){this.ma&&m()}verifyOperationInProgress(){}async Pa(){let t;do{t=this.fa,await t}while(t!==this.fa)}ba(t){for(const e of this._a)if(e.timerId===t)return!0;return!1}va(t){return this.Pa().then((()=>{this._a.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this._a)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Pa()}))}Va(t){this.pa.push(t)}Ra(t){const e=this._a.indexOf(t);this._a.splice(e,1)}}class Gi extends Bi{constructor(t,e){super(t,e),this.type="firestore",this._queue=new $i,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Xi(this),this._firestoreClient.terminate()}}function Wi(t=(0,i.Sx)()){return(0,i.j6)(t,"firestore").getImmediate()}function Xi(t){var e;const n=t._freezeSettings(),i=function(t,e,n,i){return new Li(t,e,n,i.host,i.ssl,i.experimentalForceLongPolling,i.experimentalAutoDetectLongPolling,i.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new Oi(t._credentials,t._queue,i)}class Qi{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new b(w.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new j(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class Ji{constructor(t){this._byteString=t}static fromBase64String(t){try{return new Ji(H.fromBase64String(t))}catch(t){throw new b(w.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new Ji(H.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class Yi{constructor(t){this._methodName=t}}class Zi{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new b(w.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new b(w.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return C(this._lat,t._lat)||C(this._long,t._long)}}const tr=/^__.*__$/;class er{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return new le(t,this.data,this.fieldMask,e,this.fieldTransforms)}}function nr(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw m()}}class ir{constructor(t,e,n,i,r,s){this.settings=t,this.databaseId=e,this.N=n,this.ignoreUndefinedProperties=i,void 0===r&&this.Sa(),this.fieldTransforms=r||[],this.fieldMask=s||[]}get path(){return this.settings.path}get Da(){return this.settings.Da}Ca(t){return new ir(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.N,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Na(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.Ca({path:n,xa:!1});return i.ka(t),i}$a(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.Ca({path:n,xa:!1});return i.Sa(),i}Oa(t){return this.Ca({path:void 0,xa:!0})}Fa(t){return fr(t,this.settings.methodName,this.settings.Ma||!1,this.path,this.settings.La)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}Sa(){if(this.path)for(let t=0;t<this.path.length;t++)this.ka(this.path.get(t))}ka(t){if(0===t.length)throw this.Fa("Document fields must not be empty");if(nr(this.Da)&&tr.test(t))throw this.Fa('Document fields cannot begin and end with "__"')}}class rr{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.N=n||Xn(t)}Ba(t,e,n,i=!1){return new ir({Da:t,methodName:e,La:n,path:j.emptyPath(),xa:!1,Ma:i},this.databaseId,this.N,this.ignoreUndefinedProperties)}}class sr extends Yi{_toFieldTransform(t){if(2!==t.Da)throw 1===t.Da?t.Fa(`${this._methodName}() can only appear at the top level of your update data`):t.Fa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return t.fieldMask.push(t.path),null}isEqual(t){return t instanceof sr}}class or extends Yi{_toFieldTransform(t){return new Zt(t.path,new zt)}isEqual(t){return t instanceof or}}function ar(t,e){if(cr(t=(0,o.Ku)(t)))return ur("Unsupported field value:",e,t),function(t,e){const n={};return M(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):x(t,((t,i)=>{const r=ar(i,e.Na(t));null!=r&&(n[t]=r)})),{mapValue:{fields:n}}}(t,e);if(t instanceof Yi)return function(t,e){if(!nr(e.Da))throw e.Fa(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Fa(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.xa&&4!==e.Da)throw e.Fa("Nested arrays are not supported");return function(t,e){const n=[];let i=0;for(const r of t){let t=ar(r,e.Oa(i));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),i++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=(0,o.Ku)(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return jt(e.N,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=D.fromDate(t);return{timestampValue:De(e.N,n)}}if(t instanceof D){const n=new D(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:De(e.N,n)}}if(t instanceof Zi)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof Ji)return{bytesValue:Pe(e.N,t._byteString)};if(t instanceof Hi){const n=e.databaseId,i=t.firestore._databaseId;if(!i.isEqual(n))throw e.Fa(`Document reference is for database ${i.projectId}/${i.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:Me(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Fa(`Unsupported field value: ${Fi(t)}`)}(t,e)}function cr(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof D||t instanceof Zi||t instanceof Ji||t instanceof Hi||t instanceof Yi)}function ur(t,e,n){if(!cr(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const i=Fi(n);throw"an object"===i?e.Fa(t+" a custom object"):e.Fa(t+" "+i)}}function lr(t,e,n){if((e=(0,o.Ku)(e))instanceof Qi)return e._internalPath;if("string"==typeof e)return dr(t,e);throw fr("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const hr=new RegExp("[~\\*/\\[\\]]");function dr(t,e,n){if(e.search(hr)>=0)throw fr(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new Qi(...e.split("."))._internalPath}catch(i){throw fr(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function fr(t,e,n,i,r){const s=i&&!i.isEmpty(),o=void 0!==r;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${i}`),o&&(c+=` in document ${r}`),c+=")"),new b(w.INVALID_ARGUMENT,a+t+c)}function pr(t,e){return t.some((t=>t.isEqual(e)))}function gr(t,e,n,...i){t=Vi(t,Hi);const r=Vi(t.firestore,Gi),s=function(t){const e=t._freezeSettings(),n=Xn(t._databaseId);return new rr(t._databaseId,!!e.ignoreUndefinedProperties,n)}(r);let a;return a="string"==typeof(e=(0,o.Ku)(e))||e instanceof Qi?function(t,e,n,i,r,s){const a=t.Ba(1,e,n),c=[lr(e,i,n)],u=[r];if(s.length%2!=0)throw new b(w.INVALID_ARGUMENT,`Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let t=0;t<s.length;t+=2)c.push(lr(e,s[t])),u.push(s[t+1]);const l=[],h=ct.empty();for(let t=c.length-1;t>=0;--t)if(!pr(l,c[t])){const e=c[t];let n=u[t];n=(0,o.Ku)(n);const i=a.$a(e);if(n instanceof sr)l.push(e);else{const t=ar(n,i);null!=t&&(l.push(e),h.set(e,t))}}const d=new B(l);return new er(h,d,a.fieldTransforms)}(s,"updateDoc",t._key,e,n,i):function(t,e,n,i){const r=t.Ba(1,e,n);ur("Data must be an object, but it was:",r,i);const s=[],a=ct.empty();x(i,((t,i)=>{const c=dr(e,t,n);i=(0,o.Ku)(i);const u=r.$a(c);if(i instanceof sr)s.push(c);else{const t=ar(i,u);null!=t&&(s.push(c),a.set(c,t))}}));const c=new B(s);return new er(a,c,r.fieldTransforms)}(s,"updateDoc",t._key,e),function(t,e){return function(t,e){const n=new _;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const i=Ri(t);try{const t=await function(t,e){const n=v(t),i=D.now(),r=e.reduce(((t,e)=>t.add(e.key)),Ne());let s;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Qn.bn(t,r).next((r=>{s=r;const o=[];for(const t of e){const e=oe(t,s.get(t.key));null!=e&&o.push(new le(t.key,e,ut(e.value.mapValue),ee.exists(!0)))}return n.In.addMutationBatch(t,i,o,e)})))).then((t=>(t.applyToLocalDocumentSet(s),{batchId:t.batchId,changes:s})))}(i.localStore,e);i.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let i=t.Lo[t.currentUser.toKey()];i||(i=new ve(C)),i=i.insert(e,n),t.Lo[t.currentUser.toKey()]=i}(i,t.batchId,n),await Ai(i,t.changes),await ai(i.remoteStore)}catch(t){const e=vi(t,"Failed to persist write");n.reject(e)}}(await Pi(t),e,n))),n.promise}(function(t){return t._firestoreClient||Xi(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}(t),e)}(r,[a.toMutation(t._key,ee.exists(!0))])}function mr(){return new or("serverTimestamp")}var yr;yr=i.MF,u=yr,(0,i.om)(new r.uA("firestore",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),i=new Gi(n,new E(t.getProvider("auth-internal")));return e=Object.assign({useFetchStreams:!0},e),i._setSettings(e),i}),"PUBLIC")),(0,i.KO)("@firebase/firestore","3.0.1",void 0)},923:(t,e,n)=>{n.d(e,{IG:()=>u,db:()=>c});var i=n(944),r=n(237),s=n(982),o=n(226);const a=(0,i.Wp)({apiKey:"AIzaSyDEbX-gQ6FwJD5oZGnaoiJu9qIaAG2LZ0M",authDomain:"upload-25f01.firebaseapp.com",projectId:"upload-25f01",storageBucket:"upload-25f01.firebasestorage.app",messagingSenderId:"97167487690",appId:"1:97167487690:web:88409aded0a1dd13f87a33",measurementId:"G-3Y94K1XCBK"}),c=((0,r.xI)(a),(0,s.aU)(a)),u=(0,o.c7)(a)},944:(t,e,n)=>{n.d(e,{Wp:()=>i.Wp});var i=n(468);(0,i.KO)("firebase","9.0.1","app")},982:(t,e,n)=>{n.d(e,{H9:()=>i.H9,O5:()=>i.O5,aU:()=>i.aU,mZ:()=>i.mZ});var i=n(790)}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var s=e[i]={exports:{}};return t[i](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var i=n(923),r=n(226),s=n(982),o=n(106);window.onload=function(){const t=JSON.parse(sessionStorage.getItem("userData"));if(!t||!t.phone)return alert("User session expired. Please log in again."),void(window.location.href="index.html");const e=localStorage.getItem("documentToBeEdited");e?function(t){document.getElementById("edit-document-page-container").innerHTML=` \n    <div class="container">\n        <div class="row m-3">\n            <div class="col-12 row mb-5 align-items-center justify-content-center">\n                <div id="edit-document-form-wrapper" class="col-lg-7 col-md-10 col-12 my-3 p-md-5 p-3 border border-2 rounded shadow">\n                    <h2 class="text-center mb-4">Edit Document</h2>\n                    <form action="" id="edit-document-page-form">\n                        \x3c!-- Document Name Input Field --\x3e\n                        <div class="mb-4">\n                            <label for="edit-document-page-document-name" class="form-label">Enter name of the document</label>\n                            <input type="text" class="form-control" id="edit-document-page-document-name" value="${t.documentName}">\n                        </div>\n\n                        \x3c!-- Document Type Selection Dropdown --\x3e\n                        <div class="mb-4">\n                            <label for="edit-document-page-type-of-document" class="form-label">Select the type of the document</label>\n                            <select class="form-select" id="edit-document-page-type-of-document">\n                                <option selected>Select the type of document</option>\n                                \x3c!-- List of document types (truncated for brevity) --\x3e\n                                <option value="1">Aadhaar card</option>\n                                <option value="2">Arms license</option>\n                                ...\n                                <option value="24">Voter ID</option>\n                            </select>\n                        </div>\n\n                        \x3c!-- File Upload Field --\x3e\n                        <div class="mb-4">\n                            ${t.fileUrl?`<p>Already uploaded: <a href="${t.fileUrl}" target="_blank">${t.documentName}</a></p>`:""}\n                            <label for="edit-document-page-document-upload" class="form-label">Upload your new document</label>\n                            <input type="file" class="form-control" id="edit-document-page-document-upload" name="document" accept="application/pdf, image/*">\n                        </div>\n\n                        \x3c!-- Submit Button --\x3e\n                        <div class="d-grid">\n                            <button id="edit-document-page-submit-button" type="submit" class="btn btn-primary btn-lg">\n                                Submit\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>`;const e=document.getElementById("edit-document-page-type-of-document"),n=e.options;for(let i=0;i<n.length;i++)if(n[i].text===t.documentType){e.selectedIndex=i;break}document.getElementById("edit-document-page-form").addEventListener("submit",(async function(t){t.preventDefault();const e=localStorage.getItem("editDoc");if(!e)return void alert("No document to edit.");const n=document.getElementById("edit-document-page-document-name").value,o=document.getElementById("edit-document-page-type-of-document"),a=o.options[o.selectedIndex].text,c=JSON.parse(e);let u=c.fileUrl;const l=document.getElementById("edit-document-page-document-upload");let h,d;if(l.files.length){if(h=l.files[0],h.size>2097152)return void alert("File size must be less than 2MB.");const t=(0,r.KR)(i.IG,`documents/${h.name}_${Date.now()}`);await(0,r.D)(t,h),d=await(0,r.qk)(t),u=d}const f=(0,s.H9)(i.db,"documents",c.id);await(0,s.mZ)(f,{documentName:n,documentType:a,fileName:h?h.name:c.fileName,fileType:h?h.type:c.fileType,fileSize:h?h.size:c.fileSize,fileUrl:u,updatedAt:(0,s.O5)()}),alert("Document updated successfully!"),window.location.href="view_documents_page.html"}))}(JSON.parse(e)):alert("No document found to edit!")},document.addEventListener("DOMContentLoaded",(()=>{(0,o.S)()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,