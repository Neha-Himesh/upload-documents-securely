/*! For license information please see view_documents_page.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={36:(t,e,n)=>{n.d(e,{Ao:()=>ur,Bx:()=>lr,Jh:()=>dr,O4:()=>hr,ZS:()=>gr,_L:()=>pr,fF:()=>cr,iO:()=>mr,ro:()=>fr});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var s,o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},a=a||{},c=o||self;function u(){}function h(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function l(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var d="closure_uid_"+(1e9*Math.random()>>>0),f=0;function p(t,e,n){return t.call.apply(t.bind,arguments)}function m(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function g(t,e,n){return(g=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?p:m).apply(null,arguments)}function y(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function v(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,r){for(var i=Array(arguments.length-2),s=2;s<arguments.length;s++)i[s-2]=arguments[s];return e.prototype[n].apply(t,i)}}function w(){this.s=this.s,this.o=this.o}var _={};w.prototype.s=!1,w.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,d)&&t[d]||(t[d]=++f)}(this);delete _[t]}},w.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};var b=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},I=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i="string"==typeof t?t.split(""):t,s=0;s<r;s++)s in i&&e.call(n,i[s],s,t)};function T(t){return Array.prototype.concat.apply([],arguments)}function E(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function S(t){return/^[\s\xa0]*$/.test(t)}var k,A=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function N(t,e){return-1!=t.indexOf(e)}function C(t,e){return t<e?-1:t>e?1:0}t:{var R=c.navigator;if(R){var O=R.userAgent;if(O){k=O;break t}}k=""}function D(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function L(t){var e={};for(var n in t)e[n]=t[n];return e}var P="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function x(t,e){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])t[n]=r[n];for(var s=0;s<P.length;s++)n=P[s],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function M(t){return M[" "](t),t}M[" "]=u;var U,F,V=N(k,"Opera"),j=N(k,"Trident")||N(k,"MSIE"),q=N(k,"Edge"),B=q||j,z=N(k,"Gecko")&&!(N(k.toLowerCase(),"webkit")&&!N(k,"Edge"))&&!(N(k,"Trident")||N(k,"MSIE"))&&!N(k,"Edge"),K=N(k.toLowerCase(),"webkit")&&!N(k,"Edge");function H(){var t=c.document;return t?t.documentMode:void 0}t:{var $="",G=(F=k,z?/rv:([^\);]+)(\)|;)/.exec(F):q?/Edge\/([\d\.]+)/.exec(F):j?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(F):K?/WebKit\/(\S+)/.exec(F):V?/(?:Version)[ \/]?(\S+)/.exec(F):void 0);if(G&&($=G?G[1]:""),j){var W=H();if(null!=W&&W>parseFloat($)){U=String(W);break t}}U=$}var J,Q={};function X(){return t=Q,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){for(var t=0,e=A(String(U)).split("."),n=A("9").split("."),r=Math.max(e.length,n.length),i=0;0==t&&i<r;i++){var s=e[i]||"",o=n[i]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],o=/(\d*)(\D*)(.*)/.exec(o)||["","","",""],0==s[0].length&&0==o[0].length)break;t=C(0==s[1].length?0:parseInt(s[1],10),0==o[1].length?0:parseInt(o[1],10))||C(0==s[2].length,0==o[2].length)||C(s[2],o[2]),s=s[3],o=o[3]}while(0==t)}return 0<=t}();var t}c.document&&j?J=H()||parseInt(U,10)||void 0:J=void 0;var Y=J,Z=function(){if(!c.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{c.addEventListener("test",u,e),c.removeEventListener("test",u,e)}catch(t){}return t}();function tt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function et(t,e){if(tt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(z){t:{try{M(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:nt[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&et.Z.h.call(this)}}tt.prototype.h=function(){this.defaultPrevented=!0},v(et,tt);var nt={2:"touch",3:"pen",4:"mouse"};et.prototype.h=function(){et.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var rt="closure_listenable_"+(1e6*Math.random()|0),it=0;function st(t,e,n,r,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ia=i,this.key=++it,this.ca=this.fa=!1}function ot(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function at(t){this.src=t,this.g={},this.h=0}function ct(t,e){var n=e.type;if(n in t.g){var r,i=t.g[n],s=b(i,e);(r=0<=s)&&Array.prototype.splice.call(i,s,1),r&&(ot(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function ut(t,e,n,r){for(var i=0;i<t.length;++i){var s=t[i];if(!s.ca&&s.listener==e&&s.capture==!!n&&s.ia==r)return i}return-1}at.prototype.add=function(t,e,n,r,i){var s=t.toString();(t=this.g[s])||(t=this.g[s]=[],this.h++);var o=ut(t,e,r,i);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new st(e,this.src,s,!!r,i)).fa=n,t.push(e)),e};var ht="closure_lm_"+(1e6*Math.random()|0),lt={};function dt(t,e,n,r,i){if(r&&r.once)return pt(t,e,n,r,i);if(Array.isArray(e)){for(var s=0;s<e.length;s++)dt(t,e[s],n,r,i);return null}return n=bt(n),t&&t[rt]?t.N(e,n,l(r)?!!r.capture:!!r,i):ft(t,e,n,!1,r,i)}function ft(t,e,n,r,i,s){if(!e)throw Error("Invalid event type");var o=l(i)?!!i.capture:!!i,a=wt(t);if(a||(t[ht]=a=new at(t)),(n=a.add(e,n,r,o,s)).proxy)return n;if(r=function(){var t=vt;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)Z||(i=o),void 0===i&&(i=!1),t.addEventListener(e.toString(),r,i);else if(t.attachEvent)t.attachEvent(yt(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function pt(t,e,n,r,i){if(Array.isArray(e)){for(var s=0;s<e.length;s++)pt(t,e[s],n,r,i);return null}return n=bt(n),t&&t[rt]?t.O(e,n,l(r)?!!r.capture:!!r,i):ft(t,e,n,!0,r,i)}function mt(t,e,n,r,i){if(Array.isArray(e))for(var s=0;s<e.length;s++)mt(t,e[s],n,r,i);else r=l(r)?!!r.capture:!!r,n=bt(n),t&&t[rt]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=ut(s=t.g[e],n,r,i))&&(ot(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete t.g[e],t.h--))):t&&(t=wt(t))&&(e=t.g[e.toString()],t=-1,e&&(t=ut(e,n,r,i)),(n=-1<t?e[t]:null)&&gt(n))}function gt(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[rt])ct(e.i,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(yt(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=wt(e))?(ct(n,t),0==n.h&&(n.src=null,e[ht]=null)):ot(t)}}}function yt(t){return t in lt?lt[t]:lt[t]="on"+t}function vt(t,e){if(t.ca)t=!0;else{e=new et(e,this);var n=t.listener,r=t.ia||t.src;t.fa&&gt(t),t=n.call(r,e)}return t}function wt(t){return(t=t[ht])instanceof at?t:null}var _t="__closure_events_fn_"+(1e9*Math.random()>>>0);function bt(t){return"function"==typeof t?t:(t[_t]||(t[_t]=function(e){return t.handleEvent(e)}),t[_t])}function It(){w.call(this),this.i=new at(this),this.P=this,this.I=null}function Tt(t,e){var n,r=t.I;if(r)for(n=[];r;r=r.I)n.push(r);if(t=t.P,r=e.type||e,"string"==typeof e)e=new tt(e,t);else if(e instanceof tt)e.target=e.target||t;else{var i=e;x(e=new tt(r,t),i)}if(i=!0,n)for(var s=n.length-1;0<=s;s--){var o=e.g=n[s];i=Et(o,r,!0,e)&&i}if(i=Et(o=e.g=t,r,!0,e)&&i,i=Et(o,r,!1,e)&&i,n)for(s=0;s<n.length;s++)i=Et(o=e.g=n[s],r,!1,e)&&i}function Et(t,e,n,r){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var i=!0,s=0;s<e.length;++s){var o=e[s];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&ct(t.i,o),i=!1!==a.call(c,r)&&i}}return i&&!r.defaultPrevented}v(It,w),It.prototype[rt]=!0,It.prototype.removeEventListener=function(t,e,n,r){mt(this,t,e,n,r)},It.prototype.M=function(){if(It.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],r=0;r<n.length;r++)ot(n[r]);delete e.g[t],e.h--}}this.I=null},It.prototype.N=function(t,e,n,r){return this.i.add(String(t),e,!1,n,r)},It.prototype.O=function(t,e,n,r){return this.i.add(String(t),e,!0,n,r)};var St=c.JSON.stringify;function kt(){var t=Pt,e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var At,Nt=function(){function t(){this.h=this.g=null}return t.prototype.add=function(t,e){var n=Ct.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n},t}(),Ct=new(function(){function t(t,e){this.i=t,this.j=e,this.h=0,this.g=null}return t.prototype.get=function(){var t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t},t}())((function(){return new Rt}),(function(t){return t.reset()})),Rt=function(){function t(){this.next=this.g=this.h=null}return t.prototype.set=function(t,e){this.h=t,this.g=e,this.next=null},t.prototype.reset=function(){this.next=this.g=this.h=null},t}();function Ot(t){c.setTimeout((function(){throw t}),0)}function Dt(t,e){At||function(){var t=c.Promise.resolve(void 0);At=function(){t.then(xt)}}(),Lt||(At(),Lt=!0),Pt.add(t,e)}var Lt=!1,Pt=new Nt;function xt(){for(var t;t=kt();){try{t.h.call(t.g)}catch(t){Ot(t)}var e=Ct;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Lt=!1}function Mt(t,e){It.call(this),this.h=t||1,this.g=e||c,this.j=g(this.kb,this),this.l=Date.now()}function Ut(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function Ft(t,e,n){if("function"==typeof t)n&&(t=g(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=g(t.handleEvent,t)}return 2147483647<Number(e)?-1:c.setTimeout(t,e||0)}function Vt(t){t.g=Ft((function(){t.g=null,t.i&&(t.i=!1,Vt(t))}),t.j);var e=t.h;t.h=null,t.m.apply(null,e)}v(Mt,It),(s=Mt.prototype).da=!1,s.S=null,s.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),Tt(this,"tick"),this.da&&(Ut(this),this.start()))}},s.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},s.M=function(){Mt.Z.M.call(this),Ut(this),delete this.g};var jt=function(t){function e(e,n){var r=t.call(this)||this;return r.m=e,r.j=n,r.h=null,r.i=!1,r.g=null,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.l=function(t){this.h=arguments,this.g?this.i=!0:Vt(this)},e.prototype.M=function(){t.prototype.M.call(this),this.g&&(c.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)},e}(w);function qt(t){w.call(this),this.h=t,this.g={}}v(qt,w);var Bt=[];function zt(t,e,n,r){Array.isArray(n)||(n&&(Bt[0]=n.toString()),n=Bt);for(var i=0;i<n.length;i++){var s=dt(e,n[i],r||t.handleEvent,!1,t.h||t);if(!s)break;t.g[s.key]=s}}function Kt(t){D(t.g,(function(t,e){this.g.hasOwnProperty(e)&&gt(t)}),t),t.g={}}function Ht(){this.g=!0}function $t(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var i=r[1];if(Array.isArray(i)&&!(1>i.length)){var s=i[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<i.length;o++)i[o]=""}}}return St(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}qt.prototype.M=function(){qt.Z.M.call(this),Kt(this)},qt.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Ht.prototype.Aa=function(){this.g=!1},Ht.prototype.info=function(){};var Gt={},Wt=null;function Jt(){return Wt=Wt||new It}function Qt(t){tt.call(this,Gt.Ma,t)}function Xt(t){var e=Jt();Tt(e,new Qt(e,t))}function Yt(t,e){tt.call(this,Gt.STAT_EVENT,t),this.stat=e}function Zt(t){var e=Jt();Tt(e,new Yt(e,t))}function te(t,e){tt.call(this,Gt.Na,t),this.size=e}function ee(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return c.setTimeout((function(){t()}),e)}Gt.Ma="serverreachability",v(Qt,tt),Gt.STAT_EVENT="statevent",v(Yt,tt),Gt.Na="timingevent",v(te,tt);var ne={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},re={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function ie(){}function se(t){return t.h||(t.h=t.i())}function oe(){}ie.prototype.h=null;var ae,ce={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function ue(){tt.call(this,"d")}function he(){tt.call(this,"c")}function le(){}function de(t,e,n,r){this.l=t,this.j=e,this.m=n,this.X=r||1,this.V=new qt(this),this.P=pe,t=B?125:void 0,this.W=new Mt(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new fe}function fe(){this.i=null,this.g="",this.h=!1}v(ue,tt),v(he,tt),v(le,ie),le.prototype.g=function(){return new XMLHttpRequest},le.prototype.i=function(){return{}},ae=new le;var pe=45e3,me={},ge={};function ye(t,e,n){t.K=1,t.v=je(Pe(e)),t.s=n,t.U=!0,ve(t,null)}function ve(t,e){t.F=Date.now(),Ie(t),t.A=Pe(t.v);var n=t.A,r=t.X;Array.isArray(r)||(r=[String(r)]),Ze(n.h,"t",r),t.C=0,n=t.l.H,t.h=new fe,t.g=er(t.l,n?e:null,!t.s),0<t.O&&(t.L=new jt(g(t.Ia,t,t.g),t.O)),zt(t.V,t.g,"readystatechange",t.gb),e=t.H?L(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),Xt(1),function(t,e,n,r,i,s){t.info((function(){if(t.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var h=u[0];u=u[1];var l=h.split("_");o=2<=l.length&&"type"==l[1]?o+(h+"=")+u+"&":o+(h+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+r+") [attempt "+i+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function we(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function _e(t,e,n){for(var r,i=!0;!t.I&&t.C<n.length;){if((r=be(t,n))==ge){4==e&&(t.o=4,Zt(14),i=!1),$t(t.j,t.m,null,"[Incomplete Response]");break}if(r==me){t.o=4,Zt(15),$t(t.j,t.m,n,"[Invalid Chunk]"),i=!1;break}$t(t.j,t.m,r,null),Ae(t,r)}we(t)&&r!=ge&&r!=me&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,Zt(16),i=!1),t.i=t.i&&i,i?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Gn(e),e.L=!0,Zt(11))):($t(t.j,t.m,n,"[Invalid Chunked Response]"),ke(t),Se(t))}function be(t,e){var n=t.C,r=e.indexOf("\n",n);return-1==r?ge:(n=Number(e.substring(n,r)),isNaN(n)?me:(r+=1)+n>e.length?ge:(e=e.substr(r,n),t.C=r+n,e))}function Ie(t){t.Y=Date.now()+t.P,Te(t,t.P)}function Te(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=ee(g(t.eb,t),e)}function Ee(t){t.B&&(c.clearTimeout(t.B),t.B=null)}function Se(t){0==t.l.G||t.I||Qn(t.l,t)}function ke(t){Ee(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,Ut(t.W),Kt(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function Ae(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||an(n.i,t)))if(n.I=t.N,!t.J&&an(n.i,t)&&3==n.G){try{var r=n.Ca.g.parse(e)}catch(s){r=null}if(Array.isArray(r)&&3==r.length){var i=r;if(0==i[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Jn(n),Fn(n)}$n(n),Zt(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=ee(g(n.ab,n),6e3));if(1>=on(n.i)&&n.ka){try{n.ka()}catch(s){}n.ka=void 0}}else Yn(n,11)}else if((t.J||n.g==t)&&Jn(n),!S(e))for(i=n.Ca.g.parse(e),e=0;e<i.length;e++){var s=i[e];if(n.U=s[0],s=s[1],2==n.G)if("c"==s[0]){n.J=s[1],n.la=s[2];var o=s[3];null!=o&&(n.ma=o,n.h.info("VER="+n.ma));var a=s[4];null!=a&&(n.za=a,n.h.info("SVER="+n.za));var c=s[5];null!=c&&"number"==typeof c&&0<c&&(r=1.5*c,n.K=r,n.h.info("backChannelRequestTimeoutMs_="+r)),r=n;var u=t.g;if(u){var h=u.g?u.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(h){var l=r.i;!l.g&&(N(h,"spdy")||N(h,"quic")||N(h,"h2"))&&(l.j=l.l,l.g=new Set,l.h&&(cn(l,l.h),l.h=null))}if(r.D){var d=u.g?u.g.getResponseHeader("X-HTTP-Session-Id"):null;d&&(r.sa=d,Ve(r.F,r.D,d))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var f=t;if((r=n).oa=tr(r,r.H?r.la:null,r.W),f.J){un(r.i,f);var p=f,m=r.K;m&&p.setTimeout(m),p.B&&(Ee(p),Ie(p)),r.g=f}else Hn(r);0<n.l.length&&qn(n)}else"stop"!=s[0]&&"close"!=s[0]||Yn(n,7);else 3==n.G&&("stop"==s[0]||"close"==s[0]?"stop"==s[0]?Yn(n,7):Un(n):"noop"!=s[0]&&n.j&&n.j.wa(s),n.A=0)}Xt(4)}catch(s){}}function Ne(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(h(t)||"string"==typeof t)I(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(h(t)||"string"==typeof t){n=[];for(var r=t.length,i=0;i<r;i++)n.push(i)}else for(i in n=[],r=0,t)n[r++]=i;r=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(h(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t),i=r.length;for(var s=0;s<i;s++)e.call(void 0,r[s],n&&n[s],t)}}function Ce(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Ce)for(n=t.T(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Re(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var r=t.g[e];Oe(t.h,r)&&(t.g[n++]=r),e++}t.g.length=n}if(t.i!=t.g.length){var i={};for(n=e=0;e<t.g.length;)Oe(i,r=t.g[e])||(t.g[n++]=r,i[r]=1),e++;t.g.length=n}}function Oe(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(s=de.prototype).setTimeout=function(t){this.P=t},s.gb=function(t){t=t.target;var e=this.L;e&&3==Dn(t)?e.l():this.Ia(t)},s.Ia=function(t){try{if(t==this.g)t:{var e=Dn(this.g),n=this.g.Da(),r=this.g.ba();if(!(3>e)&&(3!=e||B||this.g&&(this.h.h||this.g.ga()||Ln(this.g)))){this.I||4!=e||7==n||Xt(8==n||0>=r?3:2),Ee(this);var i=this.g.ba();this.N=i;e:if(we(this)){var s=Ln(this.g);t="";var o=s.length,a=4==Dn(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){ke(this),Se(this);var u="";break e}this.h.i=new c.TextDecoder}for(n=0;n<o;n++)this.h.h=!0,t+=this.h.i.decode(s[n],{stream:a&&n==o-1});s.splice(0,o),this.h.g+=t,this.C=0,u=this.h.g}else u=this.g.ga();if(this.i=200==i,function(t,e,n,r,i,s,o){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.X,e,i),this.i){if(this.$&&!this.J){e:{if(this.g){var h,l=this.g;if((h=l.g?l.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!S(h)){var d=h;break e}}d=null}if(!(i=d)){this.i=!1,this.o=3,Zt(12),ke(this),Se(this);break t}$t(this.j,this.m,i,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,Ae(this,i)}this.U?(_e(this,e,u),B&&this.i&&3==e&&(zt(this.V,this.W,"tick",this.fb),this.W.start())):($t(this.j,this.m,u,null),Ae(this,u)),4==e&&ke(this),this.i&&!this.I&&(4==e?Qn(this.l,this):(this.i=!1,Ie(this)))}else 400==i&&0<u.indexOf("Unknown SID")?(this.o=3,Zt(12)):(this.o=0,Zt(13)),ke(this),Se(this)}}}catch(e){}},s.fb=function(){if(this.g){var t=Dn(this.g),e=this.g.ga();this.C<e.length&&(Ee(this),_e(this,t,e),this.i&&4!=t&&Ie(this))}},s.cancel=function(){this.I=!0,ke(this)},s.eb=function(){this.B=null;var t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(Xt(3),Zt(17)),ke(this),this.o=2,Se(this)):Te(this,this.Y-t)},(s=Ce.prototype).R=function(){Re(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},s.T=function(){return Re(this),this.g.concat()},s.get=function(t,e){return Oe(this.h,t)?this.h[t]:e},s.set=function(t,e){Oe(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},s.forEach=function(t,e){for(var n=this.T(),r=0;r<n.length;r++){var i=n[r],s=this.get(i);t.call(e,s,i,this)}};var De=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Le(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof Le){this.g=void 0!==e?e:t.g,xe(this,t.j),this.s=t.s,Me(this,t.i),Ue(this,t.m),this.l=t.l,e=t.h;var n=new Je;n.i=e.i,e.g&&(n.g=new Ce(e.g),n.h=e.h),Fe(this,n),this.o=t.o}else t&&(n=String(t).match(De))?(this.g=!!e,xe(this,n[1]||"",!0),this.s=qe(n[2]||""),Me(this,n[3]||"",!0),Ue(this,n[4]),this.l=qe(n[5]||"",!0),Fe(this,n[6]||"",!0),this.o=qe(n[7]||"")):(this.g=!!e,this.h=new Je(null,this.g))}function Pe(t){return new Le(t)}function xe(t,e,n){t.j=n?qe(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function Me(t,e,n){t.i=n?qe(e,!0):e}function Ue(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Fe(t,e,n){e instanceof Je?(t.h=e,function(t,e){e&&!t.j&&(Qe(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Xe(this,e),Ze(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=Be(e,Ge)),t.h=new Je(e,t.g))}function Ve(t,e,n){t.h.set(e,n)}function je(t){return Ve(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function qe(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Be(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,ze),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function ze(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Le.prototype.toString=function(){var t=[],e=this.j;e&&t.push(Be(e,Ke,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(Be(e,Ke,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(Be(n,"/"==n.charAt(0)?$e:He,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",Be(n,We)),t.join("")};var Ke=/[#\/\?@]/g,He=/[#\?:]/g,$e=/[#\?]/g,Ge=/[#\?@]/g,We=/#/g;function Je(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Qe(t){t.g||(t.g=new Ce,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),i=null;if(0<=r){var s=t[n].substring(0,r);i=t[n].substring(r+1)}else s=t[n];e(s,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Xe(t,e){Qe(t),e=tn(t,e),Oe(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,Oe((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&Re(t)))}function Ye(t,e){return Qe(t),e=tn(t,e),Oe(t.g.h,e)}function Ze(t,e,n){Xe(t,e),0<n.length&&(t.i=null,t.g.set(tn(t,e),E(n)),t.h+=n.length)}function tn(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}(s=Je.prototype).add=function(t,e){Qe(this),this.i=null,t=tn(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},s.forEach=function(t,e){Qe(this),this.g.forEach((function(n,r){I(n,(function(n){t.call(e,n,r,this)}),this)}),this)},s.T=function(){Qe(this);for(var t=this.g.R(),e=this.g.T(),n=[],r=0;r<e.length;r++)for(var i=t[r],s=0;s<i.length;s++)n.push(e[r]);return n},s.R=function(t){Qe(this);var e=[];if("string"==typeof t)Ye(this,t)&&(e=T(e,this.g.get(tn(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=T(e,t[n])}return e},s.set=function(t,e){return Qe(this),this.i=null,Ye(this,t=tn(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},s.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},s.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var r=e[n],i=encodeURIComponent(String(r));r=this.R(r);for(var s=0;s<r.length;s++){var o=i;""!==r[s]&&(o+="="+encodeURIComponent(String(r[s]))),t.push(o)}}return this.i=t.join("&")};var en=function(t,e){this.h=t,this.g=e};function nn(t){this.l=t||rn,t=c.PerformanceNavigationTiming?0<(t=c.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(c.g&&c.g.Ea&&c.g.Ea()&&c.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}var rn=10;function sn(t){return!!t.h||!!t.g&&t.g.size>=t.j}function on(t){return t.h?1:t.g?t.g.size:0}function an(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function cn(t,e){t.g?t.g.add(e):t.h=e}function un(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function hn(t){var e,n;if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){var r=t.i;try{for(var s=i(t.g.values()),o=s.next();!o.done;o=s.next()){var a=o.value;r=r.concat(a.D)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return r}return E(t.i)}function ln(){}function dn(){this.g=new ln}function fn(t,e,n){var r=n||"";try{Ne(t,(function(t,n){var i=t;l(t)&&(i=St(t)),e.push(r+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function pn(t,e,n,r,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(r)}catch(t){}}function mn(t){this.l=t.$b||null,this.j=t.ib||!1}function gn(t,e){It.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=yn,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}nn.prototype.cancel=function(){var t,e;if(this.i=hn(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){try{for(var n=i(this.g.values()),r=n.next();!r.done;r=n.next())r.value.cancel()}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.g.clear()}},ln.prototype.stringify=function(t){return c.JSON.stringify(t,void 0)},ln.prototype.parse=function(t){return c.JSON.parse(t,void 0)},v(mn,ie),mn.prototype.g=function(){return new gn(this.l,this.j)},mn.prototype.i=function(t){return function(){return t}}({}),v(gn,It);var yn=0;function vn(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function wn(t){t.readyState=4,t.l=null,t.j=null,t.A=null,_n(t)}function _n(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(s=gn.prototype).open=function(t,e){if(this.readyState!=yn)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,_n(this)},s.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;var e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||c).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},s.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,wn(this)),this.readyState=yn},s.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,_n(this)),this.g&&(this.readyState=3,_n(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==c.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;vn(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},s.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?wn(this):_n(this),3==this.readyState&&vn(this)}},s.Ua=function(t){this.g&&(this.response=this.responseText=t,wn(this))},s.Ta=function(t){this.g&&(this.response=t,wn(this))},s.ha=function(){this.g&&wn(this)},s.setRequestHeader=function(t,e){this.v.append(t,e)},s.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},s.getAllResponseHeaders=function(){if(!this.h)return"";for(var t=[],e=this.h.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(gn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var bn=c.JSON.parse;function In(t){It.call(this),this.headers=new Ce,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=Tn,this.K=this.L=!1}v(In,It);var Tn="",En=/^https?$/i,Sn=["POST","PUT"];function kn(t){return"content-type"==t.toLowerCase()}function An(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Nn(t),Rn(t)}function Nn(t){t.D||(t.D=!0,Tt(t,"complete"),Tt(t,"error"))}function Cn(t){if(t.h&&void 0!==a&&(!t.C[1]||4!=Dn(t)||2!=t.ba()))if(t.v&&4==Dn(t))Ft(t.Fa,0,t);else if(Tt(t,"readystatechange"),4==Dn(t)){t.h=!1;try{var e,n=t.ba();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var i;if(i=0===n){var s=String(t.H).match(De)[1]||null;if(!s&&c.self&&c.self.location){var o=c.self.location.protocol;s=o.substr(0,o.length-1)}i=!En.test(s?s.toLowerCase():"")}e=i}if(e)Tt(t,"complete"),Tt(t,"success");else{t.m=6;try{var u=2<Dn(t)?t.g.statusText:""}catch(t){u=""}t.j=u+" ["+t.ba()+"]",Nn(t)}}finally{Rn(t)}}}function Rn(t,e){if(t.g){On(t);var n=t.g,r=t.C[0]?u:null;t.g=null,t.C=null,e||Tt(t,"ready");try{n.onreadystatechange=r}catch(t){}}}function On(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(c.clearTimeout(t.A),t.A=null)}function Dn(t){return t.g?t.g.readyState:0}function Ln(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case Tn:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function Pn(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return D(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Ve(t,e,n))}function xn(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Mn(t){this.za=0,this.l=[],this.h=new Ht,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=xn("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=xn("baseRetryDelayMs",5e3,t),this.$a=xn("retryDelaySeedMs",1e4,t),this.Ya=xn("forwardChannelMaxRetries",2,t),this.ra=xn("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new nn(t&&t.concurrentRequestLimit),this.Ca=new dn,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function Un(t){if(Vn(t),3==t.G){var e=t.V++,n=Pe(t.F);Ve(n,"SID",t.J),Ve(n,"RID",e),Ve(n,"TYPE","terminate"),zn(t,n),(e=new de(t,t.h,e,void 0)).K=2,e.v=je(Pe(n)),n=!1,c.navigator&&c.navigator.sendBeacon&&(n=c.navigator.sendBeacon(e.v.toString(),"")),!n&&c.Image&&((new Image).src=e.v,n=!0),n||(e.g=er(e.l,null),e.g.ea(e.v)),e.F=Date.now(),Ie(e)}Zn(t)}function Fn(t){t.g&&(Gn(t),t.g.cancel(),t.g=null)}function Vn(t){Fn(t),t.u&&(c.clearTimeout(t.u),t.u=null),Jn(t),t.i.cancel(),t.m&&("number"==typeof t.m&&c.clearTimeout(t.m),t.m=null)}function jn(t,e){t.l.push(new en(t.Za++,e)),3==t.G&&qn(t)}function qn(t){sn(t.i)||t.m||(t.m=!0,Dt(t.Ha,t),t.C=0)}function Bn(t,e){var n;n=e?e.m:t.V++;var r=Pe(t.F);Ve(r,"SID",t.J),Ve(r,"RID",n),Ve(r,"AID",t.U),zn(t,r),t.o&&t.s&&Pn(r,t.o,t.s),n=new de(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=Kn(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),cn(t.i,n),ye(n,r,e)}function zn(t,e){t.j&&Ne({},(function(t,n){Ve(e,n,t)}))}function Kn(t,e,n){n=Math.min(t.l.length,n);var r=t.j?g(t.j.Oa,t.j,t):null;t:for(var i=t.l,s=-1;;){var o=["count="+n];-1==s?0<n?(s=i[0].h,o.push("ofs="+s)):s=0:o.push("ofs="+s);for(var a=!0,c=0;c<n;c++){var u=i[c].h,h=i[c].g;if(0>(u-=s))s=Math.max(0,i[c].h-100),a=!1;else try{fn(h,o,"req"+u+"_")}catch(t){r&&r(h)}}if(a){r=o.join("&");break t}}return t=t.l.splice(0,n),e.D=t,r}function Hn(t){t.g||t.u||(t.Y=1,Dt(t.Ga,t),t.A=0)}function $n(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=ee(g(t.Ga,t),Xn(t,t.A)),t.A++,0))}function Gn(t){null!=t.B&&(c.clearTimeout(t.B),t.B=null)}function Wn(t){t.g=new de(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=Pe(t.oa);Ve(e,"RID","rpc"),Ve(e,"SID",t.J),Ve(e,"CI",t.N?"0":"1"),Ve(e,"AID",t.U),zn(t,e),Ve(e,"TYPE","xmlhttp"),t.o&&t.s&&Pn(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=je(Pe(e)),n.s=null,n.U=!0,ve(n,t)}function Jn(t){null!=t.v&&(c.clearTimeout(t.v),t.v=null)}function Qn(t,e){var n=null;if(t.g==e){Jn(t),Gn(t),t.g=null;var r=2}else{if(!an(t.i,e))return;n=e.D,un(t.i,e),r=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==r){n=e.s?e.s.length:0,e=Date.now()-e.F;var i=t.C;Tt(r=Jt(),new te(r,n,e,i)),qn(t)}else Hn(t);else if(3==(i=e.o)||0==i&&0<t.I||!(1==r&&function(t,e){return!(on(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=ee(g(t.Ha,t,e),Xn(t,t.C)),t.C++,0)))}(t,e)||2==r&&$n(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),i){case 1:Yn(t,5);break;case 4:Yn(t,10);break;case 3:Yn(t,6);break;default:Yn(t,2)}}function Xn(t,e){var n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function Yn(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var r=g(t.jb,t);n||(n=new Le("//www.google.com/images/cleardot.gif"),c.location&&"http"==c.location.protocol||xe(n,"https"),je(n)),function(t,e){var n=new Ht;if(c.Image){var r=new Image;r.onload=y(pn,n,r,"TestLoadImage: loaded",!0,e),r.onerror=y(pn,n,r,"TestLoadImage: error",!1,e),r.onabort=y(pn,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=y(pn,n,r,"TestLoadImage: timeout",!1,e),c.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else Zt(2);t.G=0,t.j&&t.j.va(e),Zn(t),Vn(t)}function Zn(t){t.G=0,t.I=-1,t.j&&(0==hn(t.i).length&&0==t.l.length||(t.i.i.length=0,E(t.l),t.l.length=0),t.j.ua())}function tr(t,e,n){var r=function(t){return t instanceof Le?Pe(t):new Le(t,void 0)}(n);if(""!=r.i)e&&Me(r,e+"."+r.i),Ue(r,r.m);else{var i=c.location;r=function(t,e,n,r){var i=new Le(null,void 0);return t&&xe(i,t),e&&Me(i,e),n&&Ue(i,n),r&&(i.l=r),i}(i.protocol,e?e+"."+i.hostname:i.hostname,+i.port,n)}return t.aa&&D(t.aa,(function(t,e){Ve(r,e,t)})),e=t.D,n=t.sa,e&&n&&Ve(r,e,n),Ve(r,"VER",t.ma),zn(t,r),r}function er(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new In(new mn({ib:!0})):new In(t.qa)).L=t.H,e}function nr(){}function rr(){if(j&&!(10<=Number(Y)))throw Error("Environmental error: no available transport.")}function ir(t,e){It.call(this),this.g=new Mn(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!S(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!S(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new ar(this)}function sr(t){ue.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function or(){he.call(this),this.status=1}function ar(t){this.g=t}(s=In.prototype).ea=function(t,e,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():ae.g(),this.C=this.u?se(this.u):se(ae),this.g.onreadystatechange=g(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void An(this,t)}t=n||"";var i=new Ce(this.headers);r&&Ne(r,(function(t,e){i.set(e,t)})),r=function(t){t:{for(var e=kn,n=t.length,r="string"==typeof t?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.T()),n=c.FormData&&t instanceof c.FormData,!(0<=b(Sn,e))||r||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{On(this),0<this.B&&((this.K=function(t){return j&&X()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=g(this.pa,this)):this.A=Ft(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){An(this,t)}},s.pa=function(){void 0!==a&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Tt(this,"timeout"),this.abort(8))},s.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,Tt(this,"complete"),Tt(this,"abort"),Rn(this))},s.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),Rn(this,!0)),In.Z.M.call(this)},s.Fa=function(){this.s||(this.F||this.v||this.l?Cn(this):this.cb())},s.cb=function(){Cn(this)},s.ba=function(){try{return 2<Dn(this)?this.g.status:-1}catch(t){return-1}},s.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},s.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),bn(e)}},s.Da=function(){return this.m},s.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(s=Mn.prototype).ma=8,s.G=1,s.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},s.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;var e=new de(this,this.h,t,void 0),n=this.s;if(this.P&&(n?x(n=L(n),this.P):n=this.P),null===this.o&&(e.H=n),this.ja)t:{for(var r=0,i=0;i<this.l.length;i++){var s=this.l[i];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(r+=s)){r=i;break t}if(4096===r||i===this.l.length-1){r=i+1;break t}}r=1e3}else r=1e3;r=Kn(this,e,r),Ve(i=Pe(this.F),"RID",t),Ve(i,"CVER",22),this.D&&Ve(i,"X-HTTP-Session-Id",this.D),zn(this,i),this.o&&n&&Pn(i,this.o,n),cn(this.i,e),this.Ra&&Ve(i,"TYPE","init"),this.ja?(Ve(i,"$req",r),Ve(i,"SID","null"),e.$=!0,ye(e,i,null)):ye(e,i,r),this.G=2}}else 3==this.G&&(t?Bn(this,t):0==this.l.length||sn(this.i)||Bn(this))},s.Ga=function(){if(this.u=null,Wn(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=ee(g(this.bb,this),t)}},s.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,Zt(10),Fn(this),Wn(this))},s.ab=function(){null!=this.v&&(this.v=null,Fn(this),$n(this),Zt(19))},s.jb=function(t){t?(this.h.info("Successfully pinged google.com"),Zt(2)):(this.h.info("Failed to ping google.com"),Zt(1))},(s=nr.prototype).xa=function(){},s.wa=function(){},s.va=function(){},s.ua=function(){},s.Oa=function(){},rr.prototype.g=function(t,e){return new ir(t,e)},v(ir,It),ir.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),Dt(g(t.hb,t,e))),Zt(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=tr(t,null,t.W),qn(t)},ir.prototype.close=function(){Un(this.g)},ir.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,jn(this.g,e)}else this.v?((e={}).__data__=St(t),jn(this.g,e)):jn(this.g,t)},ir.prototype.M=function(){this.g.j=null,delete this.j,Un(this.g),delete this.g,ir.Z.M.call(this)},v(sr,ue),v(or,he),v(ar,nr),ar.prototype.xa=function(){Tt(this.g,"a")},ar.prototype.wa=function(t){Tt(this.g,new sr(t))},ar.prototype.va=function(t){Tt(this.g,new or(t))},ar.prototype.ua=function(){Tt(this.g,"b")},rr.prototype.createWebChannel=rr.prototype.g,ir.prototype.send=ir.prototype.u,ir.prototype.open=ir.prototype.m,ir.prototype.close=ir.prototype.close,ne.NO_ERROR=0,ne.TIMEOUT=8,ne.HTTP_ERROR=6,re.COMPLETE="complete",oe.EventType=ce,ce.OPEN="a",ce.CLOSE="b",ce.ERROR="c",ce.MESSAGE="d",It.prototype.listen=It.prototype.N,In.prototype.listenOnce=In.prototype.O,In.prototype.getLastError=In.prototype.La,In.prototype.getLastErrorCode=In.prototype.Da,In.prototype.getStatus=In.prototype.ba,In.prototype.getResponseJson=In.prototype.Qa,In.prototype.getResponseText=In.prototype.ga,In.prototype.send=In.prototype.ea;var cr=function(){return new rr},ur=function(){return Jt()},hr=ne,lr=re,dr=Gt,fr={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},pr=mn,mr=oe,gr=In},106:(t,e,n)=>{function r(){const t=document.querySelectorAll(".custom-navbar .nav-link"),e=window.location.pathname.split("/").pop();t.forEach((t=>{const n=t.getAttribute("href");n===e||"#"===n&&e.includes("faq")?t.classList.add("active"):t.classList.remove("active")}))}n.d(e,{S:()=>r})},134:(t,e,n)=>{n.d(e,{h1:()=>c,uA:()=>s});var r=n(635),i=n(625),s=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),o="[DEFAULT]",a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new i.cY;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var r=this.getOrInitializeService({instanceIdentifier:e});r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),r=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:o})}catch(t){}try{for(var i=(0,r.Ju)(this.instancesDeferred.entries()),s=i.next();!s.done;s=i.next()){var a=(0,r.zs)(s.value,2),c=a[0],u=a[1],h=this.normalizeInstanceIdentifier(c);try{var l=this.getOrInitializeService({instanceIdentifier:h});u.resolve(l)}catch(t){}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=o),this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,r.sH)(this,void 0,void 0,(function(){var t;return(0,r.YH)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,r.fX)((0,r.fX)([],(0,r.zs)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),(0,r.zs)(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=o),this.instances.has(t)},t.prototype.getOptions=function(t){return void 0===t&&(t=o),this.instancesOptions.get(t)||{}},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var i=t.options,s=void 0===i?{}:i,o=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(o))throw Error(this.name+"("+o+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var a=this.getOrInitializeService({instanceIdentifier:o,options:s});try{for(var c=(0,r.Ju)(this.instancesDeferred.entries()),u=c.next();!u.done;u=c.next()){var h=(0,r.zs)(u.value,2),l=h[0],d=h[1];o===this.normalizeInstanceIdentifier(l)&&d.resolve(a)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(e)throw e.error}}return a},t.prototype.onInit=function(t,e){var n,r=this.normalizeInstanceIdentifier(e),i=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;i.add(t),this.onInitCallbacks.set(r,i);var s=this.instances.get(r);return s&&t(s,r),function(){i.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,i,s=this.onInitCallbacks.get(e);if(s)try{for(var o=(0,r.Ju)(s),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,r=t.options,i=void 0===r?{}:r,s=this.instances.get(n);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===o?void 0:e),options:i}),this.instances.set(n,s),this.instancesOptions.set(n,i),this.invokeOnInitCallbacks(s,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,s)}catch(t){}return s||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=o),this.component?this.component.multipleInstances?t:o:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}(),c=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},137:(t,e,n)=>{n.d(e,{n:()=>Ae,x:()=>St});var r=n(625),i=n(468),s=n(635),o=n(477),a=n(134);const c=new r.FA("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),u=new o.Vy("@firebase/auth");function h(t,...e){u.logLevel<=o.$b.ERROR&&u.error(`Auth (${i.MF}): ${t}`,...e)}function l(t,...e){throw f(t,...e)}function d(t,...e){return f(t,...e)}function f(t,...e){if("string"!=typeof t){const n=e[0],r=[...e.slice(1)];return r[0]&&(r[0].appName=t.name),t._errorFactory.create(n,...r)}return c.create(t,...e)}function p(t,e,...n){if(!t)throw f(e,...n)}function m(t){const e="INTERNAL ASSERTION FAILED: "+t;throw h(e),new Error(e)}function g(t,e){t||m(e)}const y=new Map;function v(t){g(t instanceof Function,"Expected a class definition");let e=y.get(t);return e?(g(e instanceof t,"Instance stored in cache mismatched with class"),e):(e=new t,y.set(t,e),e)}function w(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.href)||""}function _(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.protocol)||null}class b{constructor(t,e){this.shortDelay=t,this.longDelay=e,g(e>t,"Short delay should be less than long delay!"),this.isMobile=(0,r.jZ)()||(0,r.lV)()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===_()||"https:"===_()||(0,r.sr)()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function I(t,e){g(t.emulator,"Emulator should always be set here");const{url:n}=t.emulator;return e?`${n}${e.startsWith("/")?e.slice(1):e}`:n}class T{static initialize(t,e,n){this.fetchImpl=t,e&&(this.headersImpl=e),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void m("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void m("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void m("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const E={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded"},S=new b(3e4,6e4);function k(t,e){return t.tenantId&&!e.tenantId?Object.assign(Object.assign({},e),{tenantId:t.tenantId}):e}async function A(t,e,n,i,s={}){return N(t,s,(()=>{let s={},o={};i&&("GET"===e?o=i:s={body:JSON.stringify(i)});const a=(0,r.Am)(Object.assign({key:t.config.apiKey},o)).slice(1),c=new(T.headers());return c.set("Content-Type","application/json"),c.set("X-Client-Version",t._getSdkClientVersion()),t.languageCode&&c.set("X-Firebase-Locale",t.languageCode),T.fetch()(R(t,t.config.apiHost,n,a),Object.assign({method:e,headers:c,referrerPolicy:"no-referrer"},s))}))}async function N(t,e,n){t._canInitEmulator=!1;const i=Object.assign(Object.assign({},E),e);try{const e=new O(t),r=await Promise.race([n(),e.promise]);e.clearNetworkTimeout();const s=await r.json();if("needConfirmation"in s)throw D(t,"account-exists-with-different-credential",s);if(r.ok&&!("errorMessage"in s))return s;{const e=(r.ok?s.errorMessage:s.error.message).split(" : ")[0];if("FEDERATED_USER_ID_ALREADY_LINKED"===e)throw D(t,"credential-already-in-use",s);if("EMAIL_EXISTS"===e)throw D(t,"email-already-in-use",s);l(t,i[e]||e.toLowerCase().replace(/[_\s]+/g,"-"))}}catch(e){if(e instanceof r.g)throw e;l(t,"network-request-failed")}}async function C(t,e,n,r,i={}){const s=await A(t,e,n,r,i);return"mfaPendingCredential"in s&&l(t,"multi-factor-auth-required",{serverResponse:s}),s}function R(t,e,n,r){const i=`${e}${n}?${r}`;return t.config.emulator?I(t.config,i):`${t.config.apiScheme}://${i}`}class O{constructor(t){this.auth=t,this.timer=null,this.promise=new Promise(((t,e)=>{this.timer=setTimeout((()=>e(d(this.auth,"timeout"))),S.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function D(t,e,n){const r={appName:t.name};n.email&&(r.email=n.email),n.phoneNumber&&(r.phoneNumber=n.phoneNumber);const i=d(t,e,r);return i.customData._tokenResponse=n,i}function L(t){if(t)try{const e=new Date(Number(t));if(!isNaN(e.getTime()))return e.toUTCString()}catch(t){}}function P(t){return 1e3*Number(t)}function x(t){const[e,n,i]=t.split(".");if(void 0===e||void 0===n||void 0===i)return h("JWT malformed, contained fewer than 3 sections"),null;try{const t=(0,r.u)(n);return t?JSON.parse(t):(h("Failed to decode base64 JWT payload"),null)}catch(t){return h("Caught error parsing JWT payload as JSON",t),null}}async function M(t,e,n=!1){if(n)return e;try{return await e}catch(e){throw e instanceof r.g&&function({code:t}){return"auth/user-disabled"===t||"auth/user-token-expired"===t}(e)&&t.auth.currentUser===t&&await t.auth.signOut(),e}}class U{constructor(t){this.user=t,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(t){var e;if(t){const t=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),t}{this.errorBackoff=3e4;const t=(null!==(e=this.user.stsTokenManager.expirationTime)&&void 0!==e?e:0)-Date.now()-3e5;return Math.max(0,t)}}schedule(t=!1){if(!this.isRunning)return;const e=this.getInterval(t);this.timerId=setTimeout((async()=>{await this.iteration()}),e)}async iteration(){try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===t.code&&this.schedule(!0))}this.schedule()}}class F{constructor(t,e){this.createdAt=t,this.lastLoginAt=e,this._initializeTime()}_initializeTime(){this.lastSignInTime=L(this.lastLoginAt),this.creationTime=L(this.createdAt)}_copy(t){this.createdAt=t.createdAt,this.lastLoginAt=t.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function V(t){var e;const n=t.auth,r=await t.getIdToken(),i=await M(t,async function(t,e){return A(t,"POST","/v1/accounts:lookup",e)}(n,{idToken:r}));p(null==i?void 0:i.users.length,n,"internal-error");const o=i.users[0];t._notifyReloadListener(o);const a=(null===(e=o.providerUserInfo)||void 0===e?void 0:e.length)?o.providerUserInfo.map((t=>{var{providerId:e}=t,n=(0,s.Tt)(t,["providerId"]);return{providerId:e,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],c=(u=t.providerData,h=a,[...u.filter((t=>!h.some((e=>e.providerId===t.providerId)))),...h]);var u,h;const l=t.isAnonymous,d=!(t.email&&o.passwordHash||(null==c?void 0:c.length)),f=!!l&&d,m={uid:o.localId,displayName:o.displayName||null,photoURL:o.photoUrl||null,email:o.email||null,emailVerified:o.emailVerified||!1,phoneNumber:o.phoneNumber||null,tenantId:o.tenantId||null,providerData:c,metadata:new F(o.createdAt,o.lastLoginAt),isAnonymous:f};Object.assign(t,m)}class j{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(t){p(t.idToken,"internal-error"),p(void 0!==t.idToken,"internal-error"),p(void 0!==t.refreshToken,"internal-error");const e="expiresIn"in t&&void 0!==t.expiresIn?Number(t.expiresIn):function(t){const e=x(t);return p(e,"internal-error"),p(void 0!==e.exp,"internal-error"),p(void 0!==e.iat,"internal-error"),Number(e.exp)-Number(e.iat)}(t.idToken);this.updateTokensAndExpiration(t.idToken,t.refreshToken,e)}async getToken(t,e=!1){return p(!this.accessToken||this.refreshToken,t,"user-token-expired"),e||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(t,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(t,e){const{accessToken:n,refreshToken:i,expiresIn:s}=await async function(t,e){const n=await N(t,{},(()=>{const n=(0,r.Am)({grant_type:"refresh_token",refresh_token:e}).slice(1),{tokenApiHost:i,apiKey:s}=t.config,o=R(t,i,"/v1/token",`key=${s}`);return T.fetch()(o,{method:"POST",headers:{"X-Client-Version":t._getSdkClientVersion(),"Content-Type":"application/x-www-form-urlencoded"},body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(t,e);this.updateTokensAndExpiration(n,i,Number(s))}updateTokensAndExpiration(t,e,n){this.refreshToken=e||null,this.accessToken=t||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(t,e){const{refreshToken:n,accessToken:r,expirationTime:i}=e,s=new j;return n&&(p("string"==typeof n,"internal-error",{appName:t}),s.refreshToken=n),r&&(p("string"==typeof r,"internal-error",{appName:t}),s.accessToken=r),i&&(p("number"==typeof i,"internal-error",{appName:t}),s.expirationTime=i),s}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(t){this.accessToken=t.accessToken,this.refreshToken=t.refreshToken,this.expirationTime=t.expirationTime}_clone(){return Object.assign(new j,this.toJSON())}_performRefresh(){return m("not implemented")}}function q(t,e){p("string"==typeof t||void 0===t,"internal-error",{appName:e})}class B{constructor(t){var{uid:e,auth:n,stsTokenManager:r}=t,i=(0,s.Tt)(t,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.emailVerified=!1,this.isAnonymous=!1,this.tenantId=null,this.providerData=[],this.proactiveRefresh=new U(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=e,this.auth=n,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.metadata=new F(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(t){const e=await M(this,this.stsTokenManager.getToken(this.auth,t));return p(e,this.auth,"internal-error"),this.accessToken!==e&&(this.accessToken=e,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),e}getIdTokenResult(t){return async function(t,e=!1){const n=(0,r.Ku)(t),i=await n.getIdToken(e),s=x(i);p(s&&s.exp&&s.auth_time&&s.iat,n.auth,"internal-error");const o="object"==typeof s.firebase?s.firebase:void 0,a=null==o?void 0:o.sign_in_provider;return{claims:s,token:i,authTime:L(P(s.auth_time)),issuedAtTime:L(P(s.iat)),expirationTime:L(P(s.exp)),signInProvider:a||null,signInSecondFactor:(null==o?void 0:o.sign_in_second_factor)||null}}(this,t)}reload(){return async function(t){const e=(0,r.Ku)(t);await V(e),await e.auth._persistUserIfCurrent(e),e.auth._notifyListenersIfCurrent(e)}(this)}_assign(t){this!==t&&(p(this.uid===t.uid,this.auth,"internal-error"),this.displayName=t.displayName,this.photoURL=t.photoURL,this.email=t.email,this.emailVerified=t.emailVerified,this.phoneNumber=t.phoneNumber,this.isAnonymous=t.isAnonymous,this.tenantId=t.tenantId,this.providerData=t.providerData.map((t=>Object.assign({},t))),this.metadata._copy(t.metadata),this.stsTokenManager._assign(t.stsTokenManager))}_clone(t){return new B(Object.assign(Object.assign({},this),{auth:t,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(t){p(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=t,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(t){this.reloadListener?this.reloadListener(t):this.reloadUserInfo=t}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(t,e=!1){let n=!1;t.idToken&&t.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(t),n=!0),e&&await V(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const t=await this.getIdToken();return await M(this,async function(t,e){return A(t,"POST","/v1/accounts:delete",e)}(this.auth,{idToken:t})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((t=>Object.assign({},t))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(t,e){var n,r,i,s,o,a,c,u;const h=null!==(n=e.displayName)&&void 0!==n?n:void 0,l=null!==(r=e.email)&&void 0!==r?r:void 0,d=null!==(i=e.phoneNumber)&&void 0!==i?i:void 0,f=null!==(s=e.photoURL)&&void 0!==s?s:void 0,m=null!==(o=e.tenantId)&&void 0!==o?o:void 0,g=null!==(a=e._redirectEventId)&&void 0!==a?a:void 0,y=null!==(c=e.createdAt)&&void 0!==c?c:void 0,v=null!==(u=e.lastLoginAt)&&void 0!==u?u:void 0,{uid:w,emailVerified:_,isAnonymous:b,providerData:I,stsTokenManager:T}=e;p(w&&T,t,"internal-error");const E=j.fromJSON(this.name,T);p("string"==typeof w,t,"internal-error"),q(h,t.name),q(l,t.name),p("boolean"==typeof _,t,"internal-error"),p("boolean"==typeof b,t,"internal-error"),q(d,t.name),q(f,t.name),q(m,t.name),q(g,t.name),q(y,t.name),q(v,t.name);const S=new B({uid:w,auth:t,email:l,emailVerified:_,displayName:h,isAnonymous:b,photoURL:f,phoneNumber:d,tenantId:m,stsTokenManager:E,createdAt:y,lastLoginAt:v});return I&&Array.isArray(I)&&(S.providerData=I.map((t=>Object.assign({},t)))),g&&(S._redirectEventId=g),S}static async _fromIdTokenResponse(t,e,n=!1){const r=new j;r.updateFromServerResponse(e);const i=new B({uid:e.localId,auth:t,stsTokenManager:r,isAnonymous:n});return await V(i),i}}class z{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(t,e){this.storage[t]=e}async _get(t){const e=this.storage[t];return void 0===e?null:e}async _remove(t){delete this.storage[t]}_addListener(t,e){}_removeListener(t,e){}}z.type="NONE";const K=z;function H(t,e,n){return`firebase:${t}:${e}:${n}`}class ${constructor(t,e,n){this.persistence=t,this.auth=e,this.userKey=n;const{config:r,name:i}=this.auth;this.fullUserKey=H(this.userKey,r.apiKey,i),this.fullPersistenceKey=H("persistence",r.apiKey,i),this.boundEventHandler=e._onStorageEvent.bind(e),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(t){return this.persistence._set(this.fullUserKey,t.toJSON())}async getCurrentUser(){const t=await this.persistence._get(this.fullUserKey);return t?B._fromJSON(this.auth,t):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(t){if(this.persistence===t)return;const e=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=t,e?this.setCurrentUser(e):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(t,e,n="authUser"){if(!e.length)return new $(v(K),t,n);const r=(await Promise.all(e.map((async t=>{if(await t._isAvailable())return t})))).filter((t=>t));let i=r[0]||v(K);const s=H(n,t.config.apiKey,t.name);let o=null;for(const n of e)try{const e=await n._get(s);if(e){const r=B._fromJSON(t,e);n!==i&&(o=r),i=n;break}}catch(t){}const a=r.filter((t=>t._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(s,o.toJSON()),await Promise.all(e.map((async t=>{if(t!==i)try{await t._remove(s)}catch(t){}}))),new $(i,t,n)):new $(i,t,n)}}function G(t){const e=t.toLowerCase();if(e.includes("opera/")||e.includes("opr/")||e.includes("opios/"))return"Opera";if(X(e))return"IEMobile";if(e.includes("msie")||e.includes("trident/"))return"IE";if(e.includes("edge/"))return"Edge";if(W(e))return"Firefox";if(e.includes("silk/"))return"Silk";if(Z(e))return"Blackberry";if(tt(e))return"Webos";if(J(e))return"Safari";if((e.includes("chrome/")||Q(e))&&!e.includes("edge/"))return"Chrome";if(Y(e))return"Android";{const e=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=t.match(e);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function W(t=(0,r.ZQ)()){return/firefox\//i.test(t)}function J(t=(0,r.ZQ)()){const e=t.toLowerCase();return e.includes("safari/")&&!e.includes("chrome/")&&!e.includes("crios/")&&!e.includes("android")}function Q(t=(0,r.ZQ)()){return/crios\//i.test(t)}function X(t=(0,r.ZQ)()){return/iemobile/i.test(t)}function Y(t=(0,r.ZQ)()){return/android/i.test(t)}function Z(t=(0,r.ZQ)()){return/blackberry/i.test(t)}function tt(t=(0,r.ZQ)()){return/webos/i.test(t)}function et(t=(0,r.ZQ)()){return/iphone|ipad|ipod/i.test(t)}function nt(t=(0,r.ZQ)()){return et(t)||Y(t)||tt(t)||Z(t)||/windows phone/i.test(t)||X(t)}function rt(t,e=[]){let n;switch(t){case"Browser":n=G((0,r.ZQ)());break;case"Worker":n=`${G((0,r.ZQ)())}-${t}`;break;default:n=t}const s=e.length?e.join(","):"FirebaseCore-web";return`${n}/JsCore/${i.MF}/${s}`}class it{constructor(t,e){this.app=t,this.config=e,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new ot(this),this.idTokenSubscription=new ot(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=c,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=t.name,this.clientVersion=e.sdkClientVersion}_initializeWithPersistence(t,e){return e&&(this._popupRedirectResolver=v(e)),this._initializationPromise=this.queue((async()=>{var n;this._deleted||(this.persistenceManager=await $.create(this,t),this._deleted||((null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)&&await this._popupRedirectResolver._initialize(this),await this.initializeCurrentUser(e),this._deleted||(this._isInitialized=!0)))})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const t=await this.assertedPersistence.getCurrentUser();return this.currentUser||t?this.currentUser&&t&&this.currentUser.uid===t.uid?(this._currentUser._assign(t),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(t):void 0}async initializeCurrentUser(t){var e;let n=await this.assertedPersistence.getCurrentUser();if(t&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const r=null===(e=this.redirectUser)||void 0===e?void 0:e._redirectEventId,i=null==n?void 0:n._redirectEventId,s=await this.tryRedirectSignIn(t);r&&r!==i||!(null==s?void 0:s.user)||(n=s.user)}return n?n._redirectEventId?(p(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===n._redirectEventId?this.directlySetCurrentUser(n):this.reloadAndSetCurrentUserOrClear(n)):this.reloadAndSetCurrentUserOrClear(n):this.directlySetCurrentUser(null)}async tryRedirectSignIn(t){let e=null;try{e=await this._popupRedirectResolver._completeRedirectFn(this,t,!0)}catch(t){await this._setRedirectUser(null)}return e}async reloadAndSetCurrentUserOrClear(t){try{await V(t)}catch(t){if("auth/network-request-failed"!==t.code)return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(t)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const t=navigator;return t.languages&&t.languages[0]||t.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(t){const e=t?(0,r.Ku)(t):null;return e&&p(e.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(e&&e._clone(this))}async _updateCurrentUser(t){if(!this._deleted)return t&&p(this.tenantId===t.tenantId,this,"tenant-id-mismatch"),this.queue((async()=>{await this.directlySetCurrentUser(t),this.notifyAuthListeners()}))}async signOut(){return(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null)}setPersistence(t){return this.queue((async()=>{await this.assertedPersistence.setPersistence(v(t))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(t){this._errorFactory=new r.FA("auth","Firebase",t())}onAuthStateChanged(t,e,n){return this.registerStateListener(this.authStateSubscription,t,e,n)}onIdTokenChanged(t,e,n){return this.registerStateListener(this.idTokenSubscription,t,e,n)}toJSON(){var t;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(t=this._currentUser)||void 0===t?void 0:t.toJSON()}}async _setRedirectUser(t,e){const n=await this.getOrInitRedirectPersistenceManager(e);return null===t?n.removeCurrentUser():n.setCurrentUser(t)}async getOrInitRedirectPersistenceManager(t){if(!this.redirectPersistenceManager){const e=t&&v(t)||this._popupRedirectResolver;p(e,this,"argument-error"),this.redirectPersistenceManager=await $.create(this,[v(e._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(t){var e,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(e=this._currentUser)||void 0===e?void 0:e._redirectEventId)===t?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===t?this.redirectUser:null}async _persistUserIfCurrent(t){if(t===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(t)))}_notifyListenersIfCurrent(t){t===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var t,e;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(e=null===(t=this.currentUser)||void 0===t?void 0:t.uid)&&void 0!==e?e:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(t,e,n,r){if(this._deleted)return()=>{};const i="function"==typeof e?e:e.next.bind(e),s=this._isInitialized?Promise.resolve():this._initializationPromise;return p(s,this,"internal-error"),s.then((()=>i(this.currentUser))),"function"==typeof e?t.addObserver(e,n,r):t.addObserver(e)}async directlySetCurrentUser(t){this.currentUser&&this.currentUser!==t&&(this._currentUser._stopProactiveRefresh(),t&&this.isProactiveRefreshEnabled&&t._startProactiveRefresh()),this.currentUser=t,t?await this.assertedPersistence.setCurrentUser(t):await this.assertedPersistence.removeCurrentUser()}queue(t){return this.operations=this.operations.then(t,t),this.operations}get assertedPersistence(){return p(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(t){t&&!this.frameworks.includes(t)&&(this.frameworks.push(t),this.frameworks.sort(),this.clientVersion=rt(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}_getSdkClientVersion(){return this.clientVersion}}function st(t){return(0,r.Ku)(t)}class ot{constructor(t){this.auth=t,this.observer=null,this.addObserver=(0,r.tD)((t=>this.observer=t))}get next(){return p(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class at{constructor(t,e){this.providerId=t,this.signInMethod=e}toJSON(){return m("not implemented")}_getIdTokenResponse(t){return m("not implemented")}_linkToIdToken(t,e){return m("not implemented")}_getReauthenticationResolver(t){return m("not implemented")}}class ct extends at{constructor(t,e,n,r=null){super("password",n),this._email=t,this._password=e,this._tenantId=r}static _fromEmailAndPassword(t,e){return new ct(t,e,"password")}static _fromEmailAndCode(t,e,n=null){return new ct(t,e,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t;if((null==e?void 0:e.email)&&(null==e?void 0:e.password)){if("password"===e.signInMethod)return this._fromEmailAndPassword(e.email,e.password);if("emailLink"===e.signInMethod)return this._fromEmailAndCode(e.email,e.password,e.tenantId)}return null}async _getIdTokenResponse(t){switch(this.signInMethod){case"password":return async function(t,e){return C(t,"POST","/v1/accounts:signInWithPassword",k(t,e))}(t,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return C(t,"POST","/v1/accounts:signInWithEmailLink",k(t,e))}(t,{email:this._email,oobCode:this._password});default:l(t,"internal-error")}}async _linkToIdToken(t,e){switch(this.signInMethod){case"password":return async function(t,e){return A(t,"POST","/v1/accounts:update",e)}(t,{idToken:e,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return C(t,"POST","/v1/accounts:signInWithEmailLink",k(t,e))}(t,{idToken:e,email:this._email,oobCode:this._password});default:l(t,"internal-error")}}_getReauthenticationResolver(t){return this._getIdTokenResponse(t)}}async function ut(t,e){return C(t,"POST","/v1/accounts:signInWithIdp",k(t,e))}class ht extends at{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(t){const e=new ht(t.providerId,t.signInMethod);return t.idToken||t.accessToken?(t.idToken&&(e.idToken=t.idToken),t.accessToken&&(e.accessToken=t.accessToken),t.nonce&&!t.pendingToken&&(e.nonce=t.nonce),t.pendingToken&&(e.pendingToken=t.pendingToken)):t.oauthToken&&t.oauthTokenSecret?(e.accessToken=t.oauthToken,e.secret=t.oauthTokenSecret):l("argument-error"),e}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t,{providerId:n,signInMethod:r}=e,i=(0,s.Tt)(e,["providerId","signInMethod"]);if(!n||!r)return null;const o=new ht(n,r);return Object.assign(o,i),o}_getIdTokenResponse(t){return ut(t,this.buildRequest())}_linkToIdToken(t,e){const n=this.buildRequest();return n.idToken=e,ut(t,n)}_getReauthenticationResolver(t){const e=this.buildRequest();return e.autoCreate=!1,ut(t,e)}buildRequest(){const t={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)t.pendingToken=this.pendingToken;else{const e={};this.idToken&&(e.id_token=this.idToken),this.accessToken&&(e.access_token=this.accessToken),this.secret&&(e.oauth_token_secret=this.secret),e.providerId=this.providerId,this.nonce&&!this.pendingToken&&(e.nonce=this.nonce),t.postBody=(0,r.Am)(e)}return t}}const lt={USER_NOT_FOUND:"user-not-found"};class dt extends at{constructor(t){super("phone","phone"),this.params=t}static _fromVerification(t,e){return new dt({verificationId:t,verificationCode:e})}static _fromTokenResponse(t,e){return new dt({phoneNumber:t,temporaryProof:e})}_getIdTokenResponse(t){return async function(t,e){return C(t,"POST","/v1/accounts:signInWithPhoneNumber",k(t,e))}(t,this._makeVerificationRequest())}_linkToIdToken(t,e){return async function(t,e){const n=await C(t,"POST","/v1/accounts:signInWithPhoneNumber",k(t,e));if(n.temporaryProof)throw D(t,"account-exists-with-different-credential",n);return n}(t,Object.assign({idToken:e},this._makeVerificationRequest()))}_getReauthenticationResolver(t){return async function(t,e){return C(t,"POST","/v1/accounts:signInWithPhoneNumber",k(t,Object.assign(Object.assign({},e),{operation:"REAUTH"})),lt)}(t,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:t,phoneNumber:e,verificationId:n,verificationCode:r}=this.params;return t&&e?{temporaryProof:t,phoneNumber:e}:{sessionInfo:n,code:r}}toJSON(){const t={providerId:this.providerId};return this.params.phoneNumber&&(t.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(t.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(t.verificationCode=this.params.verificationCode),this.params.verificationId&&(t.verificationId=this.params.verificationId),t}static fromJSON(t){"string"==typeof t&&(t=JSON.parse(t));const{verificationId:e,verificationCode:n,phoneNumber:r,temporaryProof:i}=t;return n||e||r||i?new dt({verificationId:e,verificationCode:n,phoneNumber:r,temporaryProof:i}):null}}class ft{constructor(t){var e,n,i,s,o,a;const c=(0,r.I9)((0,r.hp)(t)),u=null!==(e=c.apiKey)&&void 0!==e?e:null,h=null!==(n=c.oobCode)&&void 0!==n?n:null,l=function(t){switch(t){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(i=c.mode)&&void 0!==i?i:null);p(u&&h&&l,"argument-error"),this.apiKey=u,this.operation=l,this.code=h,this.continueUrl=null!==(s=c.continueUrl)&&void 0!==s?s:null,this.languageCode=null!==(o=c.languageCode)&&void 0!==o?o:null,this.tenantId=null!==(a=c.tenantId)&&void 0!==a?a:null}static parseLink(t){const e=function(t){const e=(0,r.I9)((0,r.hp)(t)).link,n=e?(0,r.I9)((0,r.hp)(e)).deep_link_id:null,i=(0,r.I9)((0,r.hp)(t)).deep_link_id;return(i?(0,r.I9)((0,r.hp)(i)).link:null)||i||n||e||t}(t);try{return new ft(e)}catch(t){return null}}}class pt{constructor(){this.providerId=pt.PROVIDER_ID}static credential(t,e){return ct._fromEmailAndPassword(t,e)}static credentialWithLink(t,e){const n=ft.parseLink(e);return p(n,"argument-error"),ct._fromEmailAndCode(t,n.code,n.tenantId)}}pt.PROVIDER_ID="password",pt.EMAIL_PASSWORD_SIGN_IN_METHOD="password",pt.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class mt{constructor(t){this.providerId=t,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(t){this.defaultLanguageCode=t}setCustomParameters(t){return this.customParameters=t,this}getCustomParameters(){return this.customParameters}}class gt extends mt{constructor(){super(...arguments),this.scopes=[]}addScope(t){return this.scopes.includes(t)||this.scopes.push(t),this}getScopes(){return[...this.scopes]}}class yt extends gt{constructor(){super("facebook.com")}static credential(t){return ht._fromParams({providerId:yt.PROVIDER_ID,signInMethod:yt.FACEBOOK_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return yt.credentialFromTaggedObject(t)}static credentialFromError(t){return yt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return yt.credential(t.oauthAccessToken)}catch(t){return null}}}yt.FACEBOOK_SIGN_IN_METHOD="facebook.com",yt.PROVIDER_ID="facebook.com";class vt extends gt{constructor(){super("google.com"),this.addScope("profile")}static credential(t,e){return ht._fromParams({providerId:vt.PROVIDER_ID,signInMethod:vt.GOOGLE_SIGN_IN_METHOD,idToken:t,accessToken:e})}static credentialFromResult(t){return vt.credentialFromTaggedObject(t)}static credentialFromError(t){return vt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthIdToken:e,oauthAccessToken:n}=t;if(!e&&!n)return null;try{return vt.credential(e,n)}catch(t){return null}}}vt.GOOGLE_SIGN_IN_METHOD="google.com",vt.PROVIDER_ID="google.com";class wt extends gt{constructor(){super("github.com")}static credential(t){return ht._fromParams({providerId:wt.PROVIDER_ID,signInMethod:wt.GITHUB_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return wt.credentialFromTaggedObject(t)}static credentialFromError(t){return wt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return wt.credential(t.oauthAccessToken)}catch(t){return null}}}wt.GITHUB_SIGN_IN_METHOD="github.com",wt.PROVIDER_ID="github.com";class _t extends gt{constructor(){super("twitter.com")}static credential(t,e){return ht._fromParams({providerId:_t.PROVIDER_ID,signInMethod:_t.TWITTER_SIGN_IN_METHOD,oauthToken:t,oauthTokenSecret:e})}static credentialFromResult(t){return _t.credentialFromTaggedObject(t)}static credentialFromError(t){return _t.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthAccessToken:e,oauthTokenSecret:n}=t;if(!e||!n)return null;try{return _t.credential(e,n)}catch(t){return null}}}_t.TWITTER_SIGN_IN_METHOD="twitter.com",_t.PROVIDER_ID="twitter.com";class bt{constructor(t){this.user=t.user,this.providerId=t.providerId,this._tokenResponse=t._tokenResponse,this.operationType=t.operationType}static async _fromIdTokenResponse(t,e,n,r=!1){const i=await B._fromIdTokenResponse(t,n,r),s=It(n);return new bt({user:i,providerId:s,_tokenResponse:n,operationType:e})}static async _forOperation(t,e,n){await t._updateTokensIfNecessary(n,!0);const r=It(n);return new bt({user:t,providerId:r,_tokenResponse:n,operationType:e})}}function It(t){return t.providerId?t.providerId:"phoneNumber"in t?"phone":null}class Tt extends r.g{constructor(t,e,n,r){var i;super(e.code,e.message),this.operationType=n,this.user=r,this.name="FirebaseError",Object.setPrototypeOf(this,Tt.prototype),this.appName=t.name,this.code=e.code,this.tenantId=null!==(i=t.tenantId)&&void 0!==i?i:void 0,this.serverResponse=e.customData.serverResponse}static _fromErrorAndOperation(t,e,n,r){return new Tt(t,e,n,r)}}function Et(t,e,n,r){return("reauthenticate"===e?n._getReauthenticationResolver(t):n._getIdTokenResponse(t)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Tt._fromErrorAndOperation(t,n,e,r);throw n}))}function St(t){return(0,r.Ku)(t).signOut()}new WeakMap;const kt="__sak";class At{constructor(t,e){this.storage=t,this.type=e}_isAvailable(){try{return this.storage?(this.storage.setItem(kt,"1"),this.storage.removeItem(kt),Promise.resolve(!0)):Promise.resolve(!1)}catch(t){return Promise.resolve(!1)}}_set(t,e){return this.storage.setItem(t,JSON.stringify(e)),Promise.resolve()}_get(t){const e=this.storage.getItem(t);return Promise.resolve(e?JSON.parse(e):null)}_remove(t){return this.storage.removeItem(t),Promise.resolve()}}class Nt extends At{constructor(){super(window.localStorage,"LOCAL"),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const t=(0,r.ZQ)();return J(t)||et(t)}()&&function(){try{return!(!window||window===window.top)}catch(t){return!1}}(),this.fallbackToPolling=nt(),this._shouldAllowMigration=!0,this.boundEventHandler=this.onStorageEvent.bind(this)}forAllChangedKeys(t){for(const e of Object.keys(this.listeners)){const n=this.storage.getItem(e),r=this.localCache[e];n!==r&&t(e,r,n)}}onStorageEvent(t,e=!1){if(!t.key)return void this.forAllChangedKeys(((t,e,n)=>{this.notifyListeners(t,n)}));const n=t.key;if(e?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const r=this.storage.getItem(n);if(t.newValue!==r)null!==t.newValue?this.storage.setItem(n,t.newValue):this.storage.removeItem(n);else if(this.localCache[n]===t.newValue&&!e)return}const i=()=>{const t=this.storage.getItem(n);(e||this.localCache[n]!==t)&&this.notifyListeners(n,t)},s=this.storage.getItem(n);(0,r.lT)()&&10===document.documentMode&&s!==t.newValue&&t.newValue!==t.oldValue?setTimeout(i,10):i()}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e?JSON.parse(e):e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((t,e,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:t,oldValue:e,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(t,e){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[t]||(this.listeners[t]=new Set,this.localCache[t]=this.storage.getItem(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(t,e){await super._set(t,e),this.localCache[t]=JSON.stringify(e)}async _get(t){const e=await super._get(t);return this.localCache[t]=JSON.stringify(e),e}async _remove(t){await super._remove(t),delete this.localCache[t]}}Nt.type="LOCAL";const Ct=Nt;class Rt extends At{constructor(){super(window.sessionStorage,"SESSION")}_addListener(t,e){}_removeListener(t,e){}}Rt.type="SESSION";const Ot=Rt;class Dt{constructor(t){this.eventTarget=t,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(t){const e=this.receivers.find((e=>e.isListeningto(t)));if(e)return e;const n=new Dt(t);return this.receivers.push(n),n}isListeningto(t){return this.eventTarget===t}async handleEvent(t){const e=t,{eventId:n,eventType:r,data:i}=e.data,s=this.handlersMap[r];if(!(null==s?void 0:s.size))return;e.ports[0].postMessage({status:"ack",eventId:n,eventType:r});const o=Array.from(s).map((async t=>t(e.origin,i))),a=await function(t){return Promise.all(t.map((async t=>{try{return{fulfilled:!0,value:await t}}catch(t){return{fulfilled:!1,reason:t}}})))}(o);e.ports[0].postMessage({status:"done",eventId:n,eventType:r,response:a})}_subscribe(t,e){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[t]||(this.handlersMap[t]=new Set),this.handlersMap[t].add(e)}_unsubscribe(t,e){this.handlersMap[t]&&e&&this.handlersMap[t].delete(e),e&&0!==this.handlersMap[t].size||delete this.handlersMap[t],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Lt(t="",e=10){let n="";for(let t=0;t<e;t++)n+=Math.floor(10*Math.random());return t+n}Dt.receivers=[];class Pt{constructor(t){this.target=t,this.handlers=new Set}removeMessageHandler(t){t.messageChannel&&(t.messageChannel.port1.removeEventListener("message",t.onMessage),t.messageChannel.port1.close()),this.handlers.delete(t)}async _send(t,e,n=50){const r="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!r)throw new Error("connection_unavailable");let i,s;return new Promise(((o,a)=>{const c=Lt("",20);r.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);s={messageChannel:r,onMessage(t){const e=t;if(e.data.eventId===c)switch(e.data.status){case"ack":clearTimeout(u),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(e.data.response);break;default:clearTimeout(u),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(s),r.port1.addEventListener("message",s.onMessage),this.target.postMessage({eventType:t,eventId:c,data:e},[r.port2])})).finally((()=>{s&&this.removeMessageHandler(s)}))}}function xt(){return window}function Mt(){return void 0!==xt().WorkerGlobalScope&&"function"==typeof xt().importScripts}const Ut="firebaseLocalStorageDb",Ft="firebaseLocalStorage",Vt="fbase_key";class jt{constructor(t){this.request=t}toPromise(){return new Promise(((t,e)=>{this.request.addEventListener("success",(()=>{t(this.request.result)})),this.request.addEventListener("error",(()=>{e(this.request.error)}))}))}}function qt(t,e){return t.transaction([Ft],e?"readwrite":"readonly").objectStore(Ft)}function Bt(){const t=indexedDB.open(Ut,1);return new Promise(((e,n)=>{t.addEventListener("error",(()=>{n(t.error)})),t.addEventListener("upgradeneeded",(()=>{const e=t.result;try{e.createObjectStore(Ft,{keyPath:Vt})}catch(t){n(t)}})),t.addEventListener("success",(async()=>{const n=t.result;n.objectStoreNames.contains(Ft)?e(n):(n.close(),await function(){const t=indexedDB.deleteDatabase(Ut);return new jt(t).toPromise()}(),e(await Bt()))}))}))}async function zt(t,e,n){const r=qt(t,!0).put({[Vt]:e,value:n});return new jt(r).toPromise()}function Kt(t,e){const n=qt(t,!0).delete(e);return new jt(n).toPromise()}class Ht{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await Bt()),this.db}async _withRetries(t){let e=0;for(;;)try{const e=await this._openDb();return await t(e)}catch(t){if(e++>3)throw t;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Mt()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Dt._getInstance(Mt()?self:null),this.receiver._subscribe("keyChanged",(async(t,e)=>({keyProcessed:(await this._poll()).includes(e.key)}))),this.receiver._subscribe("ping",(async(t,e)=>["keyChanged"]))}async initializeSender(){var t,e;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(t){return null}}(),!this.activeServiceWorker)return;this.sender=new Pt(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(t=n[0])||void 0===t?void 0:t.fulfilled)&&(null===(e=n[0])||void 0===e?void 0:e.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(t){var e;if(this.sender&&this.activeServiceWorker&&((null===(e=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===e?void 0:e.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:t},this.serviceWorkerReceiverAvailable?800:50)}catch(e){}}async _isAvailable(){try{if(!indexedDB)return!1;const t=await Bt();return await zt(t,kt,"1"),await Kt(t,kt),!0}catch(t){}return!1}async _withPendingWrite(t){this.pendingWrites++;try{await t()}finally{this.pendingWrites--}}async _set(t,e){return this._withPendingWrite((async()=>(await this._withRetries((n=>zt(n,t,e))),this.localCache[t]=e,this.notifyServiceWorker(t))))}async _get(t){const e=await this._withRetries((e=>async function(t,e){const n=qt(t,!1).get(e),r=await new jt(n).toPromise();return void 0===r?null:r.value}(e,t)));return this.localCache[t]=e,e}async _remove(t){return this._withPendingWrite((async()=>(await this._withRetries((e=>Kt(e,t))),delete this.localCache[t],this.notifyServiceWorker(t))))}async _poll(){const t=await this._withRetries((t=>{const e=qt(t,!1).getAll();return new jt(e).toPromise()}));if(!t)return[];if(0!==this.pendingWrites)return[];const e=[],n=new Set;for(const{fbase_key:r,value:i}of t)n.add(r),JSON.stringify(this.localCache[r])!==JSON.stringify(i)&&(this.notifyListeners(r,i),e.push(r));for(const t of Object.keys(this.localCache))this.localCache[t]&&!n.has(t)&&(this.notifyListeners(t,null),e.push(t));return e}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(t,e){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[t]||(this.listeners[t]=new Set,this._get(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&this.stopPolling()}}Ht.type="LOCAL";const $t=Ht;function Gt(t){return`__${t}${Math.floor(1e6*Math.random())}`}Gt("rcb"),new b(3e4,6e4);class Wt{constructor(t){this.providerId=Wt.PROVIDER_ID,this.auth=st(t)}verifyPhoneNumber(t,e){return async function(t,e,n){var r;const i=await n.verify();try{let s;if(p("string"==typeof i,t,"argument-error"),p("recaptcha"===n.type,t,"argument-error"),s="string"==typeof e?{phoneNumber:e}:e,"session"in s){const e=s.session;if("phoneNumber"in s){p("enroll"===e.type,t,"internal-error");const n=await function(t,e){return A(t,"POST","/v2/accounts/mfaEnrollment:start",Object.assign({tenantId:t.tenantId},e))}(t,{idToken:e.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{p("signin"===e.type,t,"internal-error");const n=(null===(r=s.multiFactorHint)||void 0===r?void 0:r.uid)||s.multiFactorUid;p(n,t,"missing-multi-factor-info");const o=await function(t,e){return A(t,"POST","/v2/accounts/mfaSignIn:start",Object.assign({tenantId:t.tenantId},e))}(t,{mfaPendingCredential:e.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:e}=await async function(t,e){return A(t,"POST","/v1/accounts:sendVerificationCode",k(t,e))}(t,{phoneNumber:s.phoneNumber,recaptchaToken:i});return e}}finally{n._reset()}}(this.auth,t,(0,r.Ku)(e))}static credential(t,e){return dt._fromVerification(t,e)}static credentialFromResult(t){const e=t;return Wt.credentialFromTaggedObject(e)}static credentialFromError(t){return Wt.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{phoneNumber:e,temporaryProof:n}=t;return e&&n?dt._fromTokenResponse(e,n):null}}Wt.PROVIDER_ID="phone",Wt.PHONE_SIGN_IN_METHOD="phone";class Jt extends at{constructor(t){super("custom","custom"),this.params=t}_getIdTokenResponse(t){return ut(t,this._buildIdpRequest())}_linkToIdToken(t,e){return ut(t,this._buildIdpRequest(e))}_getReauthenticationResolver(t){return ut(t,this._buildIdpRequest())}_buildIdpRequest(t){const e={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return t&&(e.idToken=t),e}}function Qt(t){return async function(t,e,n=!1){const r="signIn",i=await Et(t,r,e),s=await bt._fromIdTokenResponse(t,r,i);return n||await t._updateCurrentUser(s.user),s}(t.auth,new Jt(t),t.bypassAuthState)}function Xt(t){const{auth:e,user:n}=t;return p(n,e,"internal-error"),async function(t,e,n=!1){const{auth:r}=t,i="reauthenticate";try{const s=await M(t,Et(r,i,e,t),n);p(s.idToken,r,"internal-error");const o=x(s.idToken);p(o,r,"internal-error");const{sub:a}=o;return p(t.uid===a,r,"user-mismatch"),bt._forOperation(t,i,s)}catch(t){throw"auth/user-not-found"===(null==t?void 0:t.code)&&l(r,"user-mismatch"),t}}(n,new Jt(t),t.bypassAuthState)}async function Yt(t){const{auth:e,user:n}=t;return p(n,e,"internal-error"),async function(t,e,n=!1){const r=await M(t,e._linkToIdToken(t.auth,await t.getIdToken()),n);return bt._forOperation(t,"link",r)}(n,new Jt(t),t.bypassAuthState)}class Zt{constructor(t,e,n,r,i=!1){this.auth=t,this.resolver=n,this.user=r,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(e)?e:[e]}execute(){return new Promise((async(t,e)=>{this.pendingPromise={resolve:t,reject:e};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(t){this.reject(t)}}))}async onAuthEvent(t){const{urlResponse:e,sessionId:n,postBody:r,tenantId:i,error:s,type:o}=t;if(s)return void this.reject(s);const a={auth:this.auth,requestUri:e,sessionId:n,tenantId:i||void 0,postBody:r||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(t){this.reject(t)}}onError(t){this.reject(t)}getIdpTask(t){switch(t){case"signInViaPopup":case"signInViaRedirect":return Qt;case"linkViaPopup":case"linkViaRedirect":return Yt;case"reauthViaPopup":case"reauthViaRedirect":return Xt;default:l(this.auth,"internal-error")}}resolve(t){g(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(t),this.unregisterAndCleanUp()}reject(t){g(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(t),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const te=new b(2e3,1e4);class ee extends Zt{constructor(t,e,n,r,i){super(t,e,r,i),this.provider=n,this.authWindow=null,this.pollId=null,ee.currentPopupAction&&ee.currentPopupAction.cancel(),ee.currentPopupAction=this}async executeNotNull(){const t=await this.execute();return p(t,this.auth,"internal-error"),t}async onExecution(){g(1===this.filter.length,"Popup operations only handle one event");const t=Lt();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],t),this.authWindow.associatedEvent=t,this.resolver._originValidation(this.auth).catch((t=>{this.reject(t)})),this.resolver._isIframeWebStorageSupported(this.auth,(t=>{t||this.reject(d(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var t;return(null===(t=this.authWindow)||void 0===t?void 0:t.associatedEvent)||null}cancel(){this.reject(d(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,ee.currentPopupAction=null}pollUserCancellation(){const t=()=>{var e,n;(null===(n=null===(e=this.authWindow)||void 0===e?void 0:e.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(d(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(t,te.get())};t()}}ee.currentPopupAction=null;const ne=new Map;class re extends Zt{constructor(t,e,n=!1){super(t,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],e,void 0,n),this.eventId=null}async execute(){let t=ne.get(this.auth._key());if(!t){try{const e=await async function(t,e){const n=function(t){return H("pendingRedirect",t.config.apiKey,t.name)}(e),r="true"===await ie(t)._get(n);return await ie(t)._remove(n),r}(this.resolver,this.auth)?await super.execute():null;t=()=>Promise.resolve(e)}catch(e){t=()=>Promise.reject(e)}ne.set(this.auth._key(),t)}return t()}async onAuthEvent(t){if("signInViaRedirect"===t.type)return super.onAuthEvent(t);if("unknown"!==t.type){if(t.eventId){const e=await this.auth._redirectUserForId(t.eventId);if(e)return this.user=e,super.onAuthEvent(t);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function ie(t){return v(t._redirectPersistence)}async function se(t,e,n=!1){const r=st(t),i=function(t,e){return e?v(e):(p(t._popupRedirectResolver,t,"argument-error"),t._popupRedirectResolver)}(r,e),s=new re(r,i,n),o=await s.execute();return o&&!n&&(delete o.user._redirectEventId,await r._persistUserIfCurrent(o.user),await r._setRedirectUser(null,e)),o}class oe{constructor(t){this.auth=t,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(t){this.consumers.add(t),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,t)&&(this.sendToConsumer(this.queuedRedirectEvent,t),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(t){this.consumers.delete(t)}onEvent(t){if(this.hasEventBeenHandled(t))return!1;let e=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(t,n)&&(e=!0,this.sendToConsumer(t,n),this.saveEventToCache(t))})),this.hasHandledPotentialRedirect||!function(t){switch(t.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return ce(t);default:return!1}}(t)||(this.hasHandledPotentialRedirect=!0,e||(this.queuedRedirectEvent=t,e=!0)),e}sendToConsumer(t,e){var n;if(t.error&&!ce(t)){const r=(null===(n=t.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";e.onError(d(this.auth,r))}else e.onAuthEvent(t)}isEventForConsumer(t,e){const n=null===e.eventId||!!t.eventId&&t.eventId===e.eventId;return e.filter.includes(t.type)&&n}hasEventBeenHandled(t){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(ae(t))}saveEventToCache(t){this.cachedEventUids.add(ae(t)),this.lastProcessedEventTime=Date.now()}}function ae(t){return[t.type,t.eventId,t.sessionId,t.tenantId].filter((t=>t)).join("-")}function ce({type:t,error:e}){return"unknown"===t&&"auth/no-auth-event"===(null==e?void 0:e.code)}const ue=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,he=/^https?/;function le(t){const e=w(),{protocol:n,hostname:r}=new URL(e);if(t.startsWith("chrome-extension://")){const i=new URL(t);return""===i.hostname&&""===r?"chrome-extension:"===n&&t.replace("chrome-extension://","")===e.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===r}if(!he.test(n))return!1;if(ue.test(t))return r===t;const i=t.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(r)}const de=new b(3e4,6e4);function fe(){const t=xt().___jsl;if(null==t?void 0:t.H)for(const e of Object.keys(t.H))if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=[...t.H[e].L],t.CP)for(let e=0;e<t.CP.length;e++)t.CP[e]=null}let pe=null;function me(t){return pe=pe||function(t){return new Promise(((e,n)=>{var r,i,s,o;function a(){fe(),gapi.load("gapi.iframes",{callback:()=>{e(gapi.iframes.getContext())},ontimeout:()=>{fe(),n(d(t,"network-request-failed"))},timeout:de.get()})}if(null===(i=null===(r=xt().gapi)||void 0===r?void 0:r.iframes)||void 0===i?void 0:i.Iframe)e(gapi.iframes.getContext());else{if(!(null===(s=xt().gapi)||void 0===s?void 0:s.load)){const e=Gt("iframefcb");return xt()[e]=()=>{gapi.load?a():n(d(t,"network-request-failed"))},o=`https://apis.google.com/js/api.js?onload=${e}`,new Promise(((t,e)=>{const n=document.createElement("script");var r,i;n.setAttribute("src",o),n.onload=t,n.onerror=t=>{const n=d("internal-error");n.customData=t,e(n)},n.type="text/javascript",n.charset="UTF-8",(null!==(i=null===(r=document.getElementsByTagName("head"))||void 0===r?void 0:r[0])&&void 0!==i?i:document).appendChild(n)}))}a()}})).catch((t=>{throw pe=null,t}))}(t),pe}const ge=new b(5e3,15e3),ye={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},ve=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function we(t){const e=t.config;p(e.authDomain,t,"auth-domain-config-required");const n=e.emulator?I(e,"emulator/auth/iframe"):`https://${t.config.authDomain}/__/auth/iframe`,s={apiKey:e.apiKey,appName:t.name,v:i.MF},o=ve.get(t.config.apiHost);o&&(s.eid=o);const a=t._getFrameworks();return a.length&&(s.fw=a.join(",")),`${n}?${(0,r.Am)(s).slice(1)}`}const _e={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class be{constructor(t){this.window=t,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(t){}}}function Ie(t,e,n,s,o,a){p(t.config.authDomain,t,"auth-domain-config-required"),p(t.config.apiKey,t,"invalid-api-key");const c={apiKey:t.config.apiKey,appName:t.name,authType:n,redirectUrl:s,v:i.MF,eventId:o};if(e instanceof mt){e.setDefaultLanguage(t.languageCode),c.providerId=e.providerId||"",(0,r.Im)(e.getCustomParameters())||(c.customParameters=JSON.stringify(e.getCustomParameters()));for(const[t,e]of Object.entries(a||{}))c[t]=e}if(e instanceof gt){const t=e.getScopes().filter((t=>""!==t));t.length>0&&(c.scopes=t.join(","))}t.tenantId&&(c.tid=t.tenantId);const u=c;for(const t of Object.keys(u))void 0===u[t]&&delete u[t];return`${function({config:t}){return t.emulator?I(t,"emulator/auth/handler"):`https://${t.authDomain}/__/auth/handler`}(t)}?${(0,r.Am)(u).slice(1)}`}const Te="webStorageSupport",Ee=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Ot,this._completeRedirectFn=se}async _openPopup(t,e,n,i){var s;return g(null===(s=this.eventManagers[t._key()])||void 0===s?void 0:s.manager,"_initialize() not called before _openPopup()"),function(t,e,n,i=500,s=600){const o=Math.max((window.screen.availHeight-s)/2,0).toString(),a=Math.max((window.screen.availWidth-i)/2,0).toString();let c="";const u=Object.assign(Object.assign({},_e),{width:i.toString(),height:s.toString(),top:o,left:a}),h=(0,r.ZQ)().toLowerCase();n&&(c=Q(h)?"_blank":n),W(h)&&(e=e||"http://localhost",u.scrollbars="yes");const l=Object.entries(u).reduce(((t,[e,n])=>`${t}${e}=${n},`),"");if(function(t=(0,r.ZQ)()){var e;return et(t)&&!!(null===(e=window.navigator)||void 0===e?void 0:e.standalone)}(h)&&"_self"!==c)return function(t,e){const n=document.createElement("a");n.href=t,n.target=e;const r=document.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(r)}(e||"",c),new be(null);const d=window.open(e||"",c,l);p(d,t,"popup-blocked");try{d.focus()}catch(t){}return new be(d)}(t,Ie(t,e,n,w(),i),Lt())}async _openRedirect(t,e,n,r){var i;return await this._originValidation(t),i=Ie(t,e,n,w(),r),xt().location.href=i,new Promise((()=>{}))}_initialize(t){const e=t._key();if(this.eventManagers[e]){const{manager:t,promise:n}=this.eventManagers[e];return t?Promise.resolve(t):(g(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(t);return this.eventManagers[e]={promise:n},n}async initAndGetManager(t){const e=await async function(t){const e=await me(t),n=xt().gapi;return p(n,t,"internal-error"),e.open({where:document.body,url:we(t),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:ye,dontclear:!0},(e=>new Promise((async(n,r)=>{await e.restyle({setHideOnLeave:!1});const i=d(t,"network-request-failed"),s=xt().setTimeout((()=>{r(i)}),ge.get());function o(){xt().clearTimeout(s),n(e)}e.ping(o).then(o,(()=>{r(i)}))}))))}(t),n=new oe(t);return e.register("authEvent",(e=>(p(null==e?void 0:e.authEvent,t,"invalid-auth-event"),{status:n.onEvent(e.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[t._key()]={manager:n},this.iframes[t._key()]=e,n}_isIframeWebStorageSupported(t,e){this.iframes[t._key()].send(Te,{type:Te},(n=>{var r;const i=null===(r=null==n?void 0:n[0])||void 0===r?void 0:r[Te];void 0!==i&&e(!!i),l(t,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(t){const e=t._key();return this.originValidationPromises[e]||(this.originValidationPromises[e]=async function(t){if(t.config.emulator)return;const{authorizedDomains:e}=await async function(t,e={}){return A(t,"GET","/v1/projects",e)}(t);for(const t of e)try{if(le(t))return}catch(t){}l(t,"unauthorized-domain")}(t)),this.originValidationPromises[e]}get _shouldInitProactively(){return nt()||J()||et()}};var Se;class ke{constructor(t){this.auth=t,this.internalListeners=new Map}getUid(){var t;return this.assertAuthConfigured(),(null===(t=this.auth.currentUser)||void 0===t?void 0:t.uid)||null}async getToken(t){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(t)}:null}addAuthTokenListener(t){if(this.assertAuthConfigured(),this.internalListeners.has(t))return;const e=this.auth.onIdTokenChanged((e=>{var n;t((null===(n=e)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(t,e),this.updateProactiveRefresh()}removeAuthTokenListener(t){this.assertAuthConfigured();const e=this.internalListeners.get(t);e&&(this.internalListeners.delete(t),e(),this.updateProactiveRefresh())}assertAuthConfigured(){p(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}function Ae(t=(0,i.Sx)()){const e=(0,i.j6)(t,"auth");return e.isInitialized()?e.getImmediate():function(t,e){const n=(0,i.j6)(t,"auth");if(n.isInitialized()){const t=n.getImmediate(),i=n.getOptions();if((0,r.bD)(i,null!=e?e:{}))return t;l(t,"already-initialized")}return n.initialize({options:e})}(t,{popupRedirectResolver:Ee,persistence:[$t,Ct,Ot]})}Se="Browser",(0,i.om)(new a.uA("auth",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),{apiKey:r,authDomain:i}=n.options;return(t=>{p(r&&!r.includes(":"),"invalid-api-key",{appName:t.name}),p(!(null==i?void 0:i.includes(":")),"argument-error",{appName:t.name});const n={apiKey:r,authDomain:i,clientPlatform:Se,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:rt(Se)},s=new it(t,n);return function(t,e){const n=(null==e?void 0:e.persistence)||[],r=(Array.isArray(n)?n:[n]).map(v);(null==e?void 0:e.errorMap)&&t._updateErrorMap(e.errorMap),t._initializeWithPersistence(r,null==e?void 0:e.popupRedirectResolver)}(s,e),s})(n)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((t,e,n)=>{t.getProvider("auth-internal").initialize()}))),(0,i.om)(new a.uA("auth-internal",(t=>{return e=st(t.getProvider("auth").getImmediate()),new ke(e);var e}),"PRIVATE").setInstantiationMode("EXPLICIT")),(0,i.KO)("@firebase/auth","0.17.1",function(t){switch(t){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";default:return}}(Se))},170:(t,e,n)=>{var r=n(923),i=n(226),s=n(982),o=n(106);window.onload=function(){const t=JSON.parse(sessionStorage.getItem("userData"));if(!t||!t.phone)return alert("User session expired. Please log in again."),void(window.location.href="index.html");const e=localStorage.getItem("documentToBeEdited");e?function(t){document.getElementById("edit-document-page-container").innerHTML=` \n    <div class="container">\n        <div class="row m-3">\n            <div class="col-12 row mb-5 align-items-center justify-content-center">\n                <div id="edit-document-form-wrapper" class="col-lg-7 col-md-10 col-12 my-3 p-md-5 p-3 border border-2 rounded shadow">\n                    <h2 class="text-center mb-4">Edit Document</h2>\n                    <form action="" id="edit-document-page-form">\n                        \x3c!-- Document Name --\x3e\n                        <div class="mb-4">\n                            <label for="edit-document-page-document-name" class="form-label">Enter name of the document</label>\n                            <input type="text" class="form-control" id="edit-document-page-document-name" value="${t.documentName}">\n                        </div>\n\n                        \x3c!-- Document Type --\x3e\n                        <div class="mb-4">\n                            <label for="edit-document-page-type-of-document" class="form-label">Select the type of the document</label>\n                            <select class="form-select" id="edit-document-page-type-of-document">\n                                <option selected>Select the type of document</option>\n                                <option value="1">Aadhaar card</option>\n                                <option value="2">Arms license</option>\n                                <option value="3">Bank passbook</option>\n                                <option value="4">Bank statements</option>\n                                <option value="5">Birth certificate</option>\n                                <option value="6">Domicile certificate issued by government</option>\n                                <option value="7">Driving License</option>\n                                <option value="8">Educational certificate</option>\n                                <option value="9">Electors photo identity card</option>\n                                <option value="10">Electricity bill</option>\n                                <option value="11">Gazetted officer issued documents</option>\n                                <option value="12">Gas connection details</option>\n                                <option value="13">Letter from employer</option>\n                                <option value="14">Marriage certificate</option>\n                                <option value="15">MNREGA Job card</option>\n                                <option value="16">PAN card</option>\n                                <option value="17">Passport</option>\n                                <option value="18">Pension card</option>\n                                <option value="19">Photo credit card</option>\n                                <option value="20">Rent agreement</option>\n                                <option value="21">Ration card</option>\n                                <option value="22">Tax card</option>\n                                <option value="23">Telephone bill</option>\n                                <option value="24">Voter ID</option>\n                            </select>\n                        </div>\n\n                        \x3c!-- File Upload --\x3e\n                        <div class="mb-4">\n                            ${t.fileUrl?`<p>Already uploaded: <a href="${t.fileUrl}" target="_blank">${t.documentName}</a></p>`:""}\n                            <label for="edit-document-page-document-upload" class="form-label">Upload your new document</label>\n                            <input type="file" class="form-control" id="edit-document-page-document-upload" name="document" accept="application/pdf, image/*">\n                        </div>\n\n                        \x3c!-- Submit Button --\x3e\n                        <div class="d-grid">\n                            <button id="edit-document-page-submit-button" type="submit" class="btn btn-primary btn-lg">\n                                Submit\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>`;const e=document.getElementById("edit-document-page-type-of-document"),n=e.options,o=document.getElementById("edit-document-page-form");for(let r=0;r<n.length;r++)if(n[r].text===t.documentType){e.selectedIndex=r;break}o.addEventListener("submit",(async function(t){t.preventDefault();const e=localStorage.getItem("editDoc");if(!e)return void alert("No document to edit.");const n=document.getElementById("edit-document-page-document-name").value,o=document.getElementById("edit-document-page-type-of-document"),a=o.options[o.selectedIndex].text,c=JSON.parse(e);let u=c.fileUrl;const h=document.getElementById("edit-document-page-document-upload");var l;if(h.files.length){if((l=h.files[0]).size>2097152)return void alert("File size must be less than 2MB.");const t=(0,i.KR)(r.IG,`documents/${l.name}_${Date.now()}`);await(0,i.D)(t,l),u=await(0,i.qk)(t)}const d=(0,s.H9)(r.db,"documents",c.id);await(0,s.mZ)(d,{documentName:n,documentType:a,fileName:l?l.name:c.fileName,fileType:l?l.type:c.fileType,fileSize:l?l.size:c.fileSize,fileUrl:u,updatedAt:(0,s.O5)()}),alert("Document updated successfully!"),window.location.href="view_documents_page.html"}))}(JSON.parse(e)):alert("No document found to edit!")},document.addEventListener("DOMContentLoaded",(()=>{(0,o.S)()}))},226:(t,e,n)=>{n.d(e,{D:()=>r.D,KR:()=>r.KR,XR:()=>r.XR,c7:()=>r.c7,qk:()=>r.qk});var r=n(334)},237:(t,e,n)=>{n.d(e,{CI:()=>r.CI,xI:()=>r.xI});var r=n(440)},334:(t,e,n)=>{n.d(e,{D:()=>nt,KR:()=>st,XR:()=>it,c7:()=>ot,qk:()=>rt});var r,i=n(468),s=n(625),o=n(134);!function(t){t[t.NO_ERROR=0]="NO_ERROR",t[t.NETWORK_ERROR=1]="NETWORK_ERROR",t[t.ABORT=2]="ABORT"}(r||(r={}));const a="firebasestorage.googleapis.com",c="storageBucket";class u extends s.g{constructor(t,e){super(h(t),`Firebase Storage: ${e} (${h(t)})`),this.customData={serverResponse:null},this._baseMessage=this.message,Object.setPrototypeOf(this,u.prototype)}_codeEquals(t){return h(t)===this.code}get serverResponse(){return this.customData.serverResponse}set serverResponse(t){this.customData.serverResponse=t,this.customData.serverResponse?this.message=`${this._baseMessage}\n${this.customData.serverResponse}`:this.message=this._baseMessage}}function h(t){return"storage/"+t}function l(){return new u("unknown","An unknown error occurred, please check the error payload for server response.")}function d(t){return new u("invalid-argument",t)}function f(){return new u("app-deleted","The Firebase app was deleted.")}function p(t,e){return new u("invalid-format","String does not match format '"+t+"': "+e)}function m(t){throw new u("internal-error","Internal error: "+t)}class g{constructor(){this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=r.NO_ERROR,this.sendPromise_=new Promise((t=>{this.xhr_.addEventListener("abort",(()=>{this.errorCode_=r.ABORT,t()})),this.xhr_.addEventListener("error",(()=>{this.errorCode_=r.NETWORK_ERROR,t()})),this.xhr_.addEventListener("load",(()=>{t()}))}))}send(t,e,n,r){if(this.sent_)throw m("cannot .send() more than once");if(this.sent_=!0,this.xhr_.open(e,t,!0),void 0!==r)for(const t in r)r.hasOwnProperty(t)&&this.xhr_.setRequestHeader(t,r[t].toString());return void 0!==n?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_}getErrorCode(){if(!this.sent_)throw m("cannot .getErrorCode() before sending");return this.errorCode_}getStatus(){if(!this.sent_)throw m("cannot .getStatus() before sending");try{return this.xhr_.status}catch(t){return-1}}getResponseText(){if(!this.sent_)throw m("cannot .getResponseText() before sending");return this.xhr_.responseText}abort(){this.xhr_.abort()}getResponseHeader(t){return this.xhr_.getResponseHeader(t)}addUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.addEventListener("progress",t)}removeUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.removeEventListener("progress",t)}}class y{createConnection(){return new g}}class v{constructor(t,e){this.bucket=t,this.path_=e}get path(){return this.path_}get isRoot(){return 0===this.path.length}fullServerUrl(){const t=encodeURIComponent;return"/b/"+t(this.bucket)+"/o/"+t(this.path)}bucketOnlyServerUrl(){return"/b/"+encodeURIComponent(this.bucket)+"/o"}static makeFromBucketSpec(t,e){let n;try{n=v.makeFromUrl(t,e)}catch(e){return new v(t,"")}if(""===n.path)return n;throw new u("invalid-default-bucket","Invalid default bucket '"+t+"'.")}static makeFromUrl(t,e){let n=null;const r="([A-Za-z0-9.\\-_]+)",i=new RegExp("^gs://"+r+"(/(.*))?$","i");function s(t){t.path_=decodeURIComponent(t.path)}const o=e.replace(/[.]/g,"\\."),c=[{regex:i,indices:{bucket:1,path:3},postModify:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path_=t.path_.slice(0,-1))}},{regex:new RegExp(`^https?://${o}/v[A-Za-z0-9_]+/b/${r}/o(/([^?#]*).*)?$`,"i"),indices:{bucket:1,path:3},postModify:s},{regex:new RegExp(`^https?://${e===a?"(?:storage.googleapis.com|storage.cloud.google.com)":e}/${r}/([^?#]*)`,"i"),indices:{bucket:1,path:2},postModify:s}];for(let e=0;e<c.length;e++){const r=c[e],i=r.regex.exec(t);if(i){const t=i[r.indices.bucket];let e=i[r.indices.path];e||(e=""),n=new v(t,e),r.postModify(n);break}}if(null==n)throw function(t){return new u("invalid-url","Invalid URL '"+t+"'.")}(t);return n}}class w{constructor(t){this.promise_=Promise.reject(t)}getPromise(){return this.promise_}cancel(t=!1){}}function _(t){return"string"==typeof t||t instanceof String}function b(t){return I()&&t instanceof Blob}function I(){return"undefined"!=typeof Blob}function T(t,e,n,r){if(r<e)throw d(`Invalid value for '${t}'. Expected ${e} or greater.`);if(r>n)throw d(`Invalid value for '${t}'. Expected ${n} or less.`)}function E(t,e){const n=e.match(/^(\w+):\/\/.+/);let r=e;return null==(null==n?void 0:n[1])&&(r=`https://${e}`),`${r}/v0${t}`}function S(t){const e=encodeURIComponent;let n="?";for(const r in t)t.hasOwnProperty(r)&&(n=n+(e(r)+"=")+e(t[r])+"&");return n=n.slice(0,-1),n}class k{constructor(t,e,n,r,i,s,o,a,c,u,h){this.pendingConnection_=null,this.backoffId_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=t,this.method_=e,this.headers_=n,this.body_=r,this.successCodes_=i.slice(),this.additionalRetryCodes_=s.slice(),this.callback_=o,this.errorCallback_=a,this.progressCallback_=u,this.timeout_=c,this.pool_=h,this.promise_=new Promise(((t,e)=>{this.resolve_=t,this.reject_=e,this.start_()}))}start_(){const t=this;function e(e,n){const r=t.resolve_,i=t.reject_,s=n.connection;if(n.wasSuccessCode)try{const e=t.callback_(s,s.getResponseText());void 0===e?r():r(e)}catch(t){i(t)}else if(null!==s){const e=l();e.serverResponse=s.getResponseText(),t.errorCallback_?i(t.errorCallback_(s,e)):i(e)}else n.canceled?i(t.appDelete_?f():new u("canceled","User canceled the upload/download.")):i(new u("retry-limit-exceeded","Max retry time for operation exceeded, please try again."))}this.canceled_?e(0,new A(!1,null,!0)):this.backoffId_=function(e,n,i){let s=1,o=null,a=!1,c=0;function u(){return 2===c}let h=!1;function l(...t){h||(h=!0,n.apply(null,t))}function d(e){o=setTimeout((()=>{o=null,function(e,n){if(n)return void e(!1,new A(!1,null,!0));const i=t.pool_.createConnection();function s(e){const n=e.loaded,r=e.lengthComputable?e.total:-1;null!==t.progressCallback_&&t.progressCallback_(n,r)}t.pendingConnection_=i,null!==t.progressCallback_&&i.addUploadProgressListener(s),i.send(t.url_,t.method_,t.body_,t.headers_).then((()=>{null!==t.progressCallback_&&i.removeUploadProgressListener(s),t.pendingConnection_=null;const n=i.getErrorCode()===r.NO_ERROR,o=i.getStatus();if(!n||t.isRetryStatusCode_(o)){const t=i.getErrorCode()===r.ABORT;return void e(!1,new A(!1,null,t))}const a=-1!==t.successCodes_.indexOf(o);e(!0,new A(a,i))}))}(f,u())}),e)}function f(t,...e){if(h)return;if(t)return void l.call(null,t,...e);if(u()||a)return void l.call(null,t,...e);let n;s<64&&(s*=2),1===c?(c=2,n=0):n=1e3*(s+Math.random()),d(n)}let p=!1;function m(t){p||(p=!0,h||(null!==o?(t||(c=2),clearTimeout(o),d(0)):t||(c=1)))}return d(0),setTimeout((()=>{a=!0,m(!0)}),i),m}(0,e,this.timeout_)}getPromise(){return this.promise_}cancel(t){this.canceled_=!0,this.appDelete_=t||!1,null!==this.backoffId_&&(0,this.backoffId_)(!1),null!==this.pendingConnection_&&this.pendingConnection_.abort()}isRetryStatusCode_(t){const e=t>=500&&t<600,n=-1!==[408,429].indexOf(t),r=-1!==this.additionalRetryCodes_.indexOf(t);return e||n||r}}class A{constructor(t,e,n){this.wasSuccessCode=t,this.connection=e,this.canceled=!!n}}function N(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}function C(...t){const e=N();if(void 0!==e){const n=new e;for(let e=0;e<t.length;e++)n.append(t[e]);return n.getBlob()}if(I())return new Blob(t);throw new u("unsupported-environment","This browser doesn't seem to support creating Blobs")}const R="base64",O="base64url",D="data_url";class L{constructor(t,e){this.data=t,this.contentType=e||null}}function P(t){const e=[];for(let n=0;n<t.length;n++){let r=t.charCodeAt(n);r<=127?e.push(r):r<=2047?e.push(192|r>>6,128|63&r):55296==(64512&r)?n<t.length-1&&56320==(64512&t.charCodeAt(n+1))?(r=65536|(1023&r)<<10|1023&t.charCodeAt(++n),e.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r)):e.push(239,191,189):56320==(64512&r)?e.push(239,191,189):e.push(224|r>>12,128|r>>6&63,128|63&r)}return new Uint8Array(e)}function x(t,e){switch(t){case R:{const n=-1!==e.indexOf("-"),r=-1!==e.indexOf("_");if(n||r)throw p(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break}case O:{const n=-1!==e.indexOf("+"),r=-1!==e.indexOf("/");if(n||r)throw p(t,"Invalid character '"+(n?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/");break}}let n;try{n=atob(e)}catch(e){throw p(t,"Invalid character found")}const r=new Uint8Array(n.length);for(let t=0;t<n.length;t++)r[t]=n.charCodeAt(t);return r}class M{constructor(t){this.base64=!1,this.contentType=null;const e=t.match(/^data:([^,]+)?,/);if(null===e)throw p(D,"Must be formatted 'data:[<mediatype>][;base64],<data>");const n=e[1]||null;var r,i;null!=n&&(this.base64=(i=";base64",(r=n).length>=7&&r.substring(r.length-7)===i),this.contentType=this.base64?n.substring(0,n.length-7):n),this.rest=t.substring(t.indexOf(",")+1)}}class U{constructor(t,e){let n=0,r="";b(t)?(this.data_=t,n=t.size,r=t.type):t instanceof ArrayBuffer?(e?this.data_=new Uint8Array(t):(this.data_=new Uint8Array(t.byteLength),this.data_.set(new Uint8Array(t))),n=this.data_.length):t instanceof Uint8Array&&(e?this.data_=t:(this.data_=new Uint8Array(t.length),this.data_.set(t)),n=t.length),this.size_=n,this.type_=r}size(){return this.size_}type(){return this.type_}slice(t,e){if(b(this.data_)){const s=(n=this.data_,r=t,i=e,n.webkitSlice?n.webkitSlice(r,i):n.mozSlice?n.mozSlice(r,i):n.slice?n.slice(r,i):null);return null===s?null:new U(s)}var n,r,i;{const n=new Uint8Array(this.data_.buffer,t,e-t);return new U(n,!0)}}static getBlob(...t){if(I()){const e=t.map((t=>t instanceof U?t.data_:t));return new U(C.apply(null,e))}{const e=t.map((t=>_(t)?function(t,e){switch(t){case"raw":return new L(P(e));case R:case O:return new L(x(t,e));case D:return new L(function(t){const e=new M(t);return e.base64?x(R,e.rest):function(t){let e;try{e=decodeURIComponent(t)}catch(t){throw p(D,"Malformed data URL.")}return P(e)}(e.rest)}(e),new M(e).contentType)}throw l()}("raw",t).data:t.data_));let n=0;e.forEach((t=>{n+=t.byteLength}));const r=new Uint8Array(n);let i=0;return e.forEach((t=>{for(let e=0;e<t.length;e++)r[i++]=t[e]})),new U(r,!0)}}uploadData(){return this.data_}}function F(t){let e;try{e=JSON.parse(t)}catch(t){return null}return"object"!=typeof(n=e)||Array.isArray(n)?null:e;var n}function V(t){const e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)}function j(t,e){return e}class q{constructor(t,e,n,r){this.server=t,this.local=e||t,this.writable=!!n,this.xform=r||j}}let B=null;function z(){if(B)return B;const t=[];t.push(new q("bucket")),t.push(new q("generation")),t.push(new q("metageneration")),t.push(new q("name","fullPath",!0));const e=new q("name");e.xform=function(t,e){return function(t){return!_(t)||t.length<2?t:V(t)}(e)},t.push(e);const n=new q("size");return n.xform=function(t,e){return void 0!==e?Number(e):e},t.push(n),t.push(new q("timeCreated")),t.push(new q("updated")),t.push(new q("md5Hash",null,!0)),t.push(new q("cacheControl",null,!0)),t.push(new q("contentDisposition",null,!0)),t.push(new q("contentEncoding",null,!0)),t.push(new q("contentLanguage",null,!0)),t.push(new q("contentType",null,!0)),t.push(new q("metadata","customMetadata",!0)),B=t,B}function K(t,e,n){const r=F(e);return null===r?null:function(t,e,n){const r={type:"file"},i=n.length;for(let t=0;t<i;t++){const i=n[t];r[i.local]=i.xform(r,e[i.server])}return function(t,e){Object.defineProperty(t,"ref",{get:function(){const n=t.bucket,r=t.fullPath,i=new v(n,r);return e._makeStorageReference(i)}})}(r,t),r}(t,r,n)}class H{constructor(t,e,n,r){this.url=t,this.method=e,this.handler=n,this.timeout=r,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}function $(t){if(!t)throw l()}function G(t){return function(e,n){let r;var i,s;return 401===e.getStatus()?r=e.getResponseText().includes("Firebase App Check token is invalid")?new u("unauthorized-app","This app does not have permission to access Firebase Storage on this project."):new u("unauthenticated","User is not authenticated, please authenticate using Firebase Authentication and try again."):402===e.getStatus()?(s=t.bucket,r=new u("quota-exceeded","Quota for bucket '"+s+"' exceeded, please view quota on https://firebase.google.com/pricing/.")):403===e.getStatus()?(i=t.path,r=new u("unauthorized","User does not have permission to access '"+i+"'.")):r=n,r.serverResponse=n.serverResponse,r}}function W(t){const e=G(t);return function(n,r){let i=e(n,r);var s;return 404===n.getStatus()&&(s=t.path,i=new u("object-not-found","Object '"+s+"' does not exist.")),i.serverResponse=r.serverResponse,i}}function J(t,e,n,r,i){const s=e.bucketOnlyServerUrl(),o={"X-Goog-Upload-Protocol":"multipart"},a=function(){let t="";for(let e=0;e<2;e++)t+=Math.random().toString().slice(2);return t}();o["Content-Type"]="multipart/related; boundary="+a;const c=function(t,e,n){const r=Object.assign({},n);return r.fullPath=t.path,r.size=e.size(),r.contentType||(r.contentType=function(t,e){return e&&e.type()||"application/octet-stream"}(0,e)),r}(e,r,i),h="--"+a+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+function(t,e){const n={},r=e.length;for(let i=0;i<r;i++){const r=e[i];r.writable&&(n[r.server]=t[r.local])}return JSON.stringify(n)}(c,n)+"\r\n--"+a+"\r\nContent-Type: "+c.contentType+"\r\n\r\n",l="\r\n--"+a+"--",d=U.getBlob(h,r,l);if(null===d)throw new u("cannot-slice-blob","Cannot slice blob for upload. Please retry the upload.");const f={name:c.fullPath},p=E(s,t.host),m=t.maxUploadRetryTime,g=new H(p,"POST",function(t,e){return function(n,r){const i=K(t,r,e);return $(null!==i),i}}(t,n),m);return g.urlParams=f,g.headers=o,g.body=d.uploadData(),g.errorHandler=G(e),g}class Q{constructor(t,e){this._service=t,this._location=e instanceof v?e:v.makeFromUrl(e,t.host)}toString(){return"gs://"+this._location.bucket+"/"+this._location.path}_newRef(t,e){return new Q(t,e)}get root(){const t=new v(this._location.bucket,"");return this._newRef(this._service,t)}get bucket(){return this._location.bucket}get fullPath(){return this._location.path}get name(){return V(this._location.path)}get storage(){return this._service}get parent(){const t=function(t){if(0===t.length)return null;const e=t.lastIndexOf("/");return-1===e?"":t.slice(0,e)}(this._location.path);if(null===t)return null;const e=new v(this._location.bucket,t);return new Q(this._service,e)}_throwIfRoot(t){if(""===this._location.path)throw function(t){return new u("invalid-root-operation","The operation '"+t+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(t)}}async function X(t){t._throwIfRoot("getDownloadURL");const e=function(t,e,n){const r=E(e.fullServerUrl(),t.host),i=t.maxOperationRetryTime,s=new H(r,"GET",function(t,e){return function(n,r){const i=K(t,r,e);return $(null!==i),function(t,e,n){const r=F(e);if(null===r)return null;if(!_(r.downloadTokens))return null;const i=r.downloadTokens;if(0===i.length)return null;const s=encodeURIComponent;return i.split(",").map((e=>{const r=t.bucket,i=t.fullPath;return E("/b/"+s(r)+"/o/"+s(i),n)+S({alt:"media",token:e})}))[0]}(i,r,t.host)}}(t,n),i);return s.errorHandler=W(e),s}(t.storage,t._location,z());return(await t.storage.makeRequestWithTokens(e)).getPromise().then((t=>{if(null===t)throw new u("no-download-url","The given file does not have any download URLs.");return t}))}function Y(t,e){if(t instanceof tt){const n=t;if(null==n._bucket)throw new u("no-default-bucket","No default bucket found. Did you set the '"+c+"' property when initializing the app?");const r=new Q(n,n._bucket);return null!=e?Y(r,e):r}return void 0!==e?function(t,e){const n=function(t,e){const n=e.split("/").filter((t=>t.length>0)).join("/");return 0===t.length?n:t+"/"+n}(t._location.path,e),r=new v(t._location.bucket,n);return new Q(t.storage,r)}(t,e):t}function Z(t,e){const n=null==e?void 0:e[c];return null==n?null:v.makeFromBucketSpec(n,t)}class tt{constructor(t,e,n,r,i,s){this.app=t,this._authProvider=e,this._appCheckProvider=n,this._pool=r,this._url=i,this._firebaseVersion=s,this._bucket=null,this._host=a,this._appId=null,this._deleted=!1,this._maxOperationRetryTime=12e4,this._maxUploadRetryTime=6e5,this._requests=new Set,this._bucket=null!=i?v.makeFromBucketSpec(i,this._host):Z(this._host,this.app.options)}get host(){return this._host}set host(t){this._host=t,null!=this._url?this._bucket=v.makeFromBucketSpec(this._url,t):this._bucket=Z(t,this.app.options)}get maxUploadRetryTime(){return this._maxUploadRetryTime}set maxUploadRetryTime(t){T("time",0,Number.POSITIVE_INFINITY,t),this._maxUploadRetryTime=t}get maxOperationRetryTime(){return this._maxOperationRetryTime}set maxOperationRetryTime(t){T("time",0,Number.POSITIVE_INFINITY,t),this._maxOperationRetryTime=t}async _getAuthToken(){if(this._overrideAuthToken)return this._overrideAuthToken;const t=this._authProvider.getImmediate({optional:!0});if(t){const e=await t.getToken();if(null!==e)return e.accessToken}return null}async _getAppCheckToken(){const t=this._appCheckProvider.getImmediate({optional:!0});return t?(await t.getToken()).token:null}_delete(){return this._deleted||(this._deleted=!0,this._requests.forEach((t=>t.cancel())),this._requests.clear()),Promise.resolve()}_makeStorageReference(t){return new Q(this,t)}_makeRequest(t,e,n){if(this._deleted)return new w(f());{const r=function(t,e,n,r,i,s){const o=S(t.urlParams),a=t.url+o,c=Object.assign({},t.headers);return function(t,e){e&&(t["X-Firebase-GMPID"]=e)}(c,e),function(t,e){null!==e&&e.length>0&&(t.Authorization="Firebase "+e)}(c,n),function(t,e){t["X-Firebase-Storage-Version"]="webjs/"+(null!=e?e:"AppManager")}(c,s),function(t,e){null!==e&&(t["X-Firebase-AppCheck"]=e)}(c,r),new k(a,t.method,c,t.body,t.successCodes,t.additionalRetryCodes,t.handler,t.errorHandler,t.timeout,t.progressCallback,i)}(t,this._appId,e,n,this._pool,this._firebaseVersion);return this._requests.add(r),r.getPromise().then((()=>this._requests.delete(r)),(()=>this._requests.delete(r))),r}}async makeRequestWithTokens(t){const[e,n]=await Promise.all([this._getAuthToken(),this._getAppCheckToken()]);return this._makeRequest(t,e,n)}}const et="storage";function nt(t,e,n){return function(t,e,n){t._throwIfRoot("uploadBytes");const r=J(t.storage,t._location,z(),new U(e,!0),n);return t.storage.makeRequestWithTokens(r).then((t=>t.getPromise())).then((e=>({metadata:e,ref:t})))}(t=(0,s.Ku)(t),e,n)}function rt(t){return X(t=(0,s.Ku)(t))}function it(t){return async function(t){t._throwIfRoot("deleteObject");const e=function(t,e){const n=E(e.fullServerUrl(),t.host),r=t.maxOperationRetryTime,i=new H(n,"DELETE",(function(t,e){}),r);return i.successCodes=[200,204],i.errorHandler=W(e),i}(t.storage,t._location);return(await t.storage.makeRequestWithTokens(e)).getPromise()}(t=(0,s.Ku)(t))}function st(t,e){return function(t,e){if(e&&/^[A-Za-z]+:\/\//.test(e)){if(t instanceof tt)return new Q(t,e);throw d("To use ref(service, url), the first argument must be a Storage instance.")}return Y(t,e)}(t=(0,s.Ku)(t),e)}function ot(t=(0,i.Sx)(),e){return t=(0,s.Ku)(t),(0,i.j6)(t,et).getImmediate({identifier:e})}(0,i.om)(new o.uA(et,(function(t,{instanceIdentifier:e}){const n=t.getProvider("app").getImmediate(),r=t.getProvider("auth-internal"),s=t.getProvider("app-check-internal");return new tt(n,r,s,new y,e,i.MF)}),"PUBLIC").setMultipleInstances(!0)),(0,i.KO)("@firebase/storage","0.8.1")},440:(t,e,n)=>{n.d(e,{CI:()=>r.x,xI:()=>r.n});var r=n(137);n(625),n(468),n(477),n(134)},468:(t,e,n)=>{n.d(e,{KO:()=>H,MF:()=>B,Sx:()=>K,Wp:()=>z,j6:()=>V,om:()=>F});var r=n(134),i=n(477),s=n(625);class o{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const a="@firebase/app",c=new i.Vy("@firebase/app"),u="@firebase/app-compat",h="@firebase/analytics-compat",l="@firebase/analytics",d="@firebase/app-check-compat",f="@firebase/app-check",p="@firebase/auth",m="@firebase/auth-compat",g="@firebase/database",y="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",_="@firebase/installations",b="@firebase/installations-compat",I="@firebase/messaging",T="@firebase/messaging-compat",E="@firebase/performance",S="@firebase/performance-compat",k="@firebase/remote-config",A="@firebase/remote-config-compat",N="@firebase/storage",C="@firebase/storage-compat",R="@firebase/firestore",O="@firebase/firestore-compat",D="firebase",L="[DEFAULT]",P={[a]:"fire-core",[u]:"fire-core-compat",[l]:"fire-analytics",[h]:"fire-analytics-compat",[f]:"fire-app-check",[d]:"fire-app-check-compat",[p]:"fire-auth",[m]:"fire-auth-compat",[g]:"fire-rtdb",[y]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[_]:"fire-iid",[b]:"fire-iid-compat",[I]:"fire-fcm",[T]:"fire-fcm-compat",[E]:"fire-perf",[S]:"fire-perf-compat",[k]:"fire-rc",[A]:"fire-rc-compat",[N]:"fire-gcs",[C]:"fire-gcs-compat",[R]:"fire-fst",[O]:"fire-fst-compat","fire-js":"fire-js",[D]:"fire-js-all"},x=new Map,M=new Map;function U(t,e){try{t.container.addComponent(e)}catch(n){c.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function F(t){const e=t.name;if(M.has(e))return c.debug(`There were multiple attempts to register component ${e}.`),!1;M.set(e,t);for(const e of x.values())U(e,t);return!0}function V(t,e){return t.container.getProvider(e)}const j=new s.FA("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class q{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new r.uA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw j.create("app-deleted",{appName:this._name})}}const B="9.0.0";function z(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:L,automaticDataCollectionEnabled:!1},e),i=n.name;if("string"!=typeof i||!i)throw j.create("bad-app-name",{appName:String(i)});const o=x.get(i);if(o){if((0,s.bD)(t,o.options)&&(0,s.bD)(n,o.config))return o;throw j.create("duplicate-app",{appName:i})}const a=new r.h1(i);for(const t of M.values())a.addComponent(t);const c=new q(t,n,a);return x.set(i,c),c}function K(t=L){const e=x.get(t);if(!e)throw j.create("no-app",{appName:t});return e}function H(t,e,n){var i;let s=null!==(i=P[t])&&void 0!==i?i:t;n&&(s+=`-${n}`);const o=s.match(/\s|\//),a=e.match(/\s|\//);if(o||a){const t=[`Unable to register library "${s}" with version "${e}":`];return o&&t.push(`library name "${s}" contains illegal characters (whitespace or "/")`),o&&a&&t.push("and"),a&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void c.warn(t.join(" "))}F(new r.uA(`${s}-version`,(()=>({library:s,version:e})),"VERSION"))}F(new r.uA("platform-logger",(t=>new o(t)),"PRIVATE")),H(a,"0.7.0",undefined),H("fire-js","")},477:(t,e,n)=>{function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,i++)r[i]=s[o];return r}var i;n.d(e,{$b:()=>s,Vy:()=>l});var s,o=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(s||(s={}));var a={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},c=s.INFO,u=((i={})[s.DEBUG]="log",i[s.VERBOSE]="log",i[s.INFO]="info",i[s.WARN]="warn",i[s.ERROR]="error",i),h=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var s=(new Date).toISOString(),o=u[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,r(["["+s+"]  "+t.name+":"],n))}},l=function(){function t(t){this.name=t,this._logLevel=c,this._logHandler=h,this._userLogHandler=null,o.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in s))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?a[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,s.DEBUG],t)),this._logHandler.apply(this,r([this,s.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,s.VERBOSE],t)),this._logHandler.apply(this,r([this,s.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,s.INFO],t)),this._logHandler.apply(this,r([this,s.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,s.WARN],t)),this._logHandler.apply(this,r([this,s.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,s.ERROR],t)),this._logHandler.apply(this,r([this,s.ERROR],t))},t}()},625:(t,e,n)=>{n.d(e,{Am:()=>b,FA:()=>g,I9:()=>I,Im:()=>v,Ku:()=>A,ZQ:()=>a,b8:()=>l,bD:()=>w,cY:()=>o,g:()=>m,hp:()=>T,jZ:()=>c,lT:()=>d,lV:()=>h,n4:()=>f,nr:()=>p,sr:()=>u,tD:()=>E,u:()=>s});var r=n(635),i={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var s=t[i],o=i+1<t.length,a=o?t[i+1]:0,c=i+2<t.length,u=c?t[i+2]:0,h=s>>2,l=(3&s)<<4|a>>4,d=(15&a)<<2|u>>6,f=63&u;c||(f=64,o||(d=64)),r.push(n[h],n[l],n[d],n[f])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var s=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){var o=((7&i)<<18|(63&(s=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(o>>10)),e[r++]=String.fromCharCode(56320+(1023&o))}else{s=t[n++];var a=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var s=n[t.charAt(i++)],o=i<t.length?n[t.charAt(i)]:0,a=++i<t.length?n[t.charAt(i)]:64,c=++i<t.length?n[t.charAt(i)]:64;if(++i,null==s||null==o||null==a||null==c)throw Error();var u=s<<2|o>>4;if(r.push(u),64!==a){var h=o<<4&240|a>>2;if(r.push(h),64!==c){var l=a<<6&192|c;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},s=function(t){try{return i.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null},o=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function a(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function c(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(a())}function u(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function h(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function l(){return a().indexOf("Electron/")>=0}function d(){var t=a();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function f(){return a().indexOf("MSAppHost/")>=0}function p(){return!function(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}var m=function(t){function e(n,r,i){var s=t.call(this,r)||this;return s.code=n,s.customData=i,s.name="FirebaseError",Object.setPrototypeOf(s,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(s,g.prototype.create),s}return(0,r.C6)(e,t),e}(Error),g=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,s=this.errors[t],o=s?function(t,e){return t.replace(y,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}(s,r):"Error",a=this.serviceName+": "+o+" ("+i+").";return new m(i,a,r)},t}(),y=/\{\$([^}]+)}/g;function v(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function w(t,e){if(t===e)return!0;for(var n=Object.keys(t),r=Object.keys(e),i=0,s=n;i<s.length;i++){var o=s[i];if(!r.includes(o))return!1;var a=t[o],c=e[o];if(_(a)&&_(c)){if(!w(a,c))return!1}else if(a!==c)return!1}for(var u=0,h=r;u<h.length;u++)if(o=h[u],!n.includes(o))return!1;return!0}function _(t){return null!==t&&"object"==typeof t}function b(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},r=0,i=Object.entries(t);r<i.length;r++){var s=i[r];n(s[0],s[1])}return e.length?"&"+e.join("&"):""}function I(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("="),r=n[0],i=n[1];e[decodeURIComponent(r)]=decodeURIComponent(i)}})),e}function T(t){var e=t.indexOf("?");if(!e)return"";var n=t.indexOf("#",e);return t.substring(e,n>0?n:void 0)}function E(t,e){var n=new S(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var s,o,a=this.chain_[0],c=this.chain_[1],u=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(s=h^c&(u^h),o=1518500249):(s=c^u^h,o=1859775393):r<60?(s=c&u|h&(c|u),o=2400959708):(s=c^u^h,o=3395469782),i=(a<<5|a>>>27)+s+l+o+n[r]&4294967295,l=h,h=u,u=4294967295&(c<<30|c>>>2),c=a,a=i;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+c&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,s=this.inbuf_;r<e;){if(0===s)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[s]=t.charCodeAt(r),++r,++s===this.blockSize){this.compress_(i),s=0;break}}else for(;r<e;)if(i[s]=t[r],++r,++s===this.blockSize){this.compress_(i),s=0;break}}this.inbuf_=s,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t}}();var S=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t){if("object"!=typeof t||null===t)return!1;for(var e=0,n=["next","error","complete"];e<n.length;e++){var r=n[e];if(r in t&&"function"==typeof t[r])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=k),void 0===r.error&&(r.error=k),void 0===r.complete&&(r.complete=k);var s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),s},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function k(){}function A(t){return t&&t._delegate?t._delegate:t}},635:(t,e,n)=>{n.d(e,{C6:()=>i,Ju:()=>c,Tt:()=>s,YH:()=>a,fX:()=>h,sH:()=>o,zs:()=>u});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function o(t,e,n,r){return new(n||(n=Promise))((function(i,s){function o(t){try{c(r.next(t))}catch(t){s(t)}}function a(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((r=r.apply(t,e||[])).next())}))}function a(t,e){var n,r,i,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},o=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return o.next=a(0),o.throw=a(1),o.return=a(2),"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,s=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)o.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=s.return)&&n.call(s)}finally{if(i)throw i.error}}return o}function h(t,e,n){if(n||2===arguments.length)for(var r,i=0,s=e.length;i<s;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError},790:(t,e,n)=>{n.d(e,{GG:()=>co,H9:()=>_s,O5:()=>fo,P:()=>eo,_M:()=>ro,aU:()=>Ts,kd:()=>ho,mZ:()=>uo,rJ:()=>ws});var r=n(468),i=n(134),s=n(477),o=n(625),a=n(36);class c{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}c.UNAUTHENTICATED=new c(null),c.GOOGLE_CREDENTIALS=new c("google-credentials-uid"),c.FIRST_PARTY=new c("first-party-uid"),c.MOCK_USER=new c("mock-user");let u="9.0.1";const h=new s.Vy("@firebase/firestore");function l(){return h.logLevel}function d(t,...e){if(h.logLevel<=s.$b.DEBUG){const n=e.map(m);h.debug(`Firestore (${u}): ${t}`,...n)}}function f(t,...e){if(h.logLevel<=s.$b.ERROR){const n=e.map(m);h.error(`Firestore (${u}): ${t}`,...n)}}function p(t,...e){if(h.logLevel<=s.$b.WARN){const n=e.map(m);h.warn(`Firestore (${u}): ${t}`,...n)}}function m(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function g(t="Unexpected state"){const e=`FIRESTORE (${u}) INTERNAL ASSERTION FAILED: `+t;throw f(e),new Error(e)}function y(t,e){t||g()}function v(t,e){return t}const w={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class _ extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class b{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class I{constructor(t,e){this.user=e,this.type="OAuth",this.authHeaders={},this.authHeaders.Authorization=`Bearer ${t}`}}class T{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(c.UNAUTHENTICATED)))}shutdown(){}}class E{constructor(t){this.t=t,this.currentUser=c.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const r=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let i=new b;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new b,t.enqueueRetryable((()=>r(this.currentUser)))};const s=e=>{t.enqueueRetryable((async()=>{d("FirebaseCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),await i.promise,await r(this.currentUser)}))};this.t.onInit((t=>s(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?s(t):(d("FirebaseCredentialsProvider","Auth not yet detected"),i.resolve(),i=new b)}}),0),t.enqueueRetryable((async()=>{0===this.i&&(await i.promise,await r(this.currentUser))}))}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(d("FirebaseCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(y("string"==typeof e.accessToken),new I(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return y(null===t||"string"==typeof t),new c(t)}}class S{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=c.FIRST_PARTY}get authHeaders(){const t={"X-Goog-AuthUser":this.l},e=this.h.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),this.m&&(t["X-Goog-Iam-Authorization-Token"]=this.m),t}}class k{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new S(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(c.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class A{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.g(t),this.p=t=>e.writeSequenceNumber(t))}g(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.p&&this.p(t),t}}function N(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}A.T=-1;class C{static I(){const t=62*Math.floor(256/62);let e="";for(;e.length<20;){const n=N(40);for(let r=0;r<n.length;++r)e.length<20&&n[r]<t&&(e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[r]%62))}return e}}function R(t,e){return t<e?-1:t>e?1:0}function O(t,e,n){return t.length===e.length&&t.every(((t,r)=>n(t,e[r])))}class D{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new _(w.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new _(w.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new _(w.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new _(w.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return D.fromMillis(Date.now())}static fromDate(t){return D.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new D(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?R(this.nanoseconds,t.nanoseconds):R(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class L{constructor(t){this.timestamp=t}static fromTimestamp(t){return new L(t)}static min(){return new L(new D(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function P(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function x(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function M(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class U{constructor(t,e,n){void 0===e?e=0:e>t.length&&g(),void 0===n?n=t.length-e:n>t.length-e&&g(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===U.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof U?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let r=0;r<n;r++){const n=t.get(r),i=e.get(r);if(n<i)return-1;if(n>i)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class F extends U{construct(t,e,n){return new F(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new _(w.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new F(e)}static emptyPath(){return new F([])}}const V=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class j extends U{construct(t,e,n){return new j(t,e,n)}static isValidIdentifier(t){return V.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),j.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new j(["__name__"])}static fromServerFormat(t){const e=[];let n="",r=0;const i=()=>{if(0===n.length)throw new _(w.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let s=!1;for(;r<t.length;){const e=t[r];if("\\"===e){if(r+1===t.length)throw new _(w.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[r+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new _(w.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,r+=2}else"`"===e?(s=!s,r++):"."!==e||s?(n+=e,r++):(i(),r++)}if(i(),s)throw new _(w.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new j(e)}static emptyPath(){return new j([])}}class q{constructor(t){this.fields=t,t.sort(j.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return O(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class B{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new B(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new B(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return R(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}B.EMPTY_BYTE_STRING=new B("");const z=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function K(t){if(y(!!t),"string"==typeof t){let e=0;const n=z.exec(t);if(y(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const r=new Date(t);return{seconds:Math.floor(r.getTime()/1e3),nanos:e}}return{seconds:H(t.seconds),nanos:H(t.nanos)}}function H(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function $(t){return"string"==typeof t?B.fromBase64String(t):B.fromUint8Array(t)}function G(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function W(t){const e=t.mapValue.fields.__previous_value__;return G(e)?W(e):e}function J(t){const e=K(t.mapValue.fields.__local_write_time__.timestampValue);return new D(e.seconds,e.nanos)}function Q(t){return null==t}function X(t){return 0===t&&1/t==-1/0}class Y{constructor(t){this.path=t}static fromPath(t){return new Y(F.fromString(t))}static fromName(t){return new Y(F.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===F.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return F.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new Y(new F(t.slice()))}}function Z(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?G(t)?4:10:g()}function tt(t,e){const n=Z(t);if(n!==Z(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return J(t).isEqual(J(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=K(t.timestampValue),r=K(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return $(t.bytesValue).isEqual($(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return H(t.geoPointValue.latitude)===H(e.geoPointValue.latitude)&&H(t.geoPointValue.longitude)===H(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return H(t.integerValue)===H(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=H(t.doubleValue),r=H(e.doubleValue);return n===r?X(n)===X(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return O(t.arrayValue.values||[],e.arrayValue.values||[],tt);case 10:return function(t,e){const n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(P(n)!==P(r))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===r[t]||!tt(n[t],r[t])))return!1;return!0}(t,e);default:return g()}}function et(t,e){return void 0!==(t.values||[]).find((t=>tt(t,e)))}function nt(t,e){const n=Z(t),r=Z(e);if(n!==r)return R(n,r);switch(n){case 0:return 0;case 1:return R(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=H(t.integerValue||t.doubleValue),r=H(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return rt(t.timestampValue,e.timestampValue);case 4:return rt(J(t),J(e));case 5:return R(t.stringValue,e.stringValue);case 6:return function(t,e){const n=$(t),r=$(e);return n.compareTo(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),r=e.split("/");for(let t=0;t<n.length&&t<r.length;t++){const e=R(n[t],r[t]);if(0!==e)return e}return R(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=R(H(t.latitude),H(e.latitude));return 0!==n?n:R(H(t.longitude),H(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],r=e.values||[];for(let t=0;t<n.length&&t<r.length;++t){const e=nt(n[t],r[t]);if(e)return e}return R(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},r=Object.keys(n),i=e.fields||{},s=Object.keys(i);r.sort(),s.sort();for(let t=0;t<r.length&&t<s.length;++t){const e=R(r[t],s[t]);if(0!==e)return e;const o=nt(n[r[t]],i[s[t]]);if(0!==o)return o}return R(r.length,s.length)}(t.mapValue,e.mapValue);default:throw g()}}function rt(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return R(t,e);const n=K(t),r=K(e),i=R(n.seconds,r.seconds);return 0!==i?i:R(n.nanos,r.nanos)}function it(t){return st(t)}function st(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=K(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?$(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Y.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const r of t.values||[])n?n=!1:e+=",",e+=st(r);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",r=!0;for(const i of e)r?r=!1:n+=",",n+=`${i}:${st(t.fields[i])}`;return n+"}"}(t.mapValue):g();var e,n}function ot(t,e){return{referenceValue:`projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`}}function at(t){return!!t&&"integerValue"in t}function ct(t){return!!t&&"arrayValue"in t}function ut(t){return!!t&&"nullValue"in t}function ht(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function lt(t){return!!t&&"mapValue"in t}function dt(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return x(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=dt(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=dt(t.arrayValue.values[n]);return e}return Object.assign({},t)}class ft{constructor(t){this.value=t}static empty(){return new ft({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!lt(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=dt(e)}setAll(t){let e=j.emptyPath(),n={},r=[];t.forEach(((t,i)=>{if(!e.isImmediateParentOf(i)){const t=this.getFieldsMap(e);this.applyChanges(t,n,r),n={},r=[],e=i.popLast()}t?n[i.lastSegment()]=dt(t):r.push(i.lastSegment())}));const i=this.getFieldsMap(e);this.applyChanges(i,n,r)}delete(t){const e=this.field(t.popLast());lt(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return tt(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let r=e.mapValue.fields[t.get(n)];lt(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=r),e=r}return e.mapValue.fields}applyChanges(t,e,n){x(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new ft(dt(this.value))}}function pt(t){const e=[];return x(t.fields,((t,n)=>{const r=new j([t]);if(lt(n)){const t=pt(n.mapValue).fields;if(0===t.length)e.push(r);else for(const n of t)e.push(r.child(n))}else e.push(r)})),new q(e)}class mt{constructor(t,e,n,r,i){this.key=t,this.documentType=e,this.version=n,this.data=r,this.documentState=i}static newInvalidDocument(t){return new mt(t,0,L.min(),ft.empty(),0)}static newFoundDocument(t,e,n){return new mt(t,1,e,n,0)}static newNoDocument(t,e){return new mt(t,2,e,ft.empty(),0)}static newUnknownDocument(t,e){return new mt(t,3,e,ft.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=ft.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=ft.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof mt&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new mt(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class gt{constructor(t,e=null,n=[],r=[],i=null,s=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=i,this.startAt=s,this.endAt=o,this.A=null}}function yt(t,e=null,n=[],r=[],i=null,s=null,o=null){return new gt(t,e,n,r,i,s,o)}function vt(t){const e=v(t);if(null===e.A){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+it(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),Q(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=Ot(e.startAt)),e.endAt&&(t+="|ub:",t+=Ot(e.endAt)),e.A=t}return e.A}function wt(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!Lt(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let i=0;i<t.filters.length;i++)if(n=t.filters[i],r=e.filters[i],n.op!==r.op||!n.field.isEqual(r.field)||!tt(n.value,r.value))return!1;var n,r;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!xt(t.startAt,e.startAt)&&xt(t.endAt,e.endAt)}function _t(t){return Y.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class bt extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.R(t,e,n):new It(t,e,n):"array-contains"===e?new kt(t,n):"in"===e?new At(t,n):"not-in"===e?new Nt(t,n):"array-contains-any"===e?new Ct(t,n):new bt(t,e,n)}static R(t,e,n){return"in"===e?new Tt(t,n):new Et(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.P(nt(e,this.value)):null!==e&&Z(this.value)===Z(e)&&this.P(nt(e,this.value))}P(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return g()}}v(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class It extends bt{constructor(t,e,n){super(t,e,n),this.key=Y.fromName(n.referenceValue)}matches(t){const e=Y.comparator(t.key,this.key);return this.P(e)}}class Tt extends bt{constructor(t,e){super(t,"in",e),this.keys=St(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class Et extends bt{constructor(t,e){super(t,"not-in",e),this.keys=St(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function St(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>Y.fromName(t.referenceValue)))}class kt extends bt{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return ct(e)&&et(e.arrayValue,this.value)}}class At extends bt{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&et(this.value.arrayValue,e)}}class Nt extends bt{constructor(t,e){super(t,"not-in",e)}matches(t){if(et(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!et(this.value.arrayValue,e)}}class Ct extends bt{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!ct(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>et(this.value.arrayValue,t)))}}class Rt{constructor(t,e){this.position=t,this.before=e}}function Ot(t){return`${t.before?"b":"a"}:${t.position.map((t=>it(t))).join(",")}`}class Dt{constructor(t,e="asc"){this.field=t,this.dir=e}}function Lt(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function Pt(t,e,n){let r=0;for(let i=0;i<t.position.length;i++){const s=e[i],o=t.position[i];if(r=s.field.isKeyField()?Y.comparator(Y.fromName(o.referenceValue),n.key):nt(o,n.data.field(s.field)),"desc"===s.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function xt(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!tt(t.position[n],e.position[n]))return!1;return!0}class Mt{constructor(t,e=null,n=[],r=[],i=null,s="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=r,this.limit=i,this.limitType=s,this.startAt=o,this.endAt=a,this.V=null,this.S=null,this.startAt,this.endAt}}function Ut(t){return new Mt(t)}function Ft(t){return!Q(t.limit)&&"F"===t.limitType}function Vt(t){return!Q(t.limit)&&"L"===t.limitType}function jt(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}function qt(t){for(const e of t.filters)if(e.v())return e.field;return null}function Bt(t){return null!==t.collectionGroup}function zt(t){const e=v(t);if(null===e.V){e.V=[];const t=qt(e),n=jt(e);if(null!==t&&null===n)t.isKeyField()||e.V.push(new Dt(t)),e.V.push(new Dt(j.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.V.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.V.push(new Dt(j.keyField(),t))}}}return e.V}function Kt(t){const e=v(t);if(!e.S)if("F"===e.limitType)e.S=yt(e.path,e.collectionGroup,zt(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of zt(e)){const e="desc"===n.dir?"asc":"desc";t.push(new Dt(n.field,e))}const n=e.endAt?new Rt(e.endAt.position,!e.endAt.before):null,r=e.startAt?new Rt(e.startAt.position,!e.startAt.before):null;e.S=yt(e.path,e.collectionGroup,t,e.filters,e.limit,n,r)}return e.S}function Ht(t,e){return wt(Kt(t),Kt(e))&&t.limitType===e.limitType}function $t(t){return`${vt(Kt(t))}|lt:${t.limitType}`}function Gt(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${it(e.value)}`;var e})).join(", ")}]`),Q(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+Ot(t.startAt)),t.endAt&&(e+=", endAt: "+Ot(t.endAt)),`Target(${e})`}(Kt(t))}; limitType=${t.limitType})`}function Wt(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):Y.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Pt(t.startAt,zt(t),e)||t.endAt&&Pt(t.endAt,zt(t),e))}(t,e)}function Jt(t){return(e,n)=>{let r=!1;for(const i of zt(t)){const t=Qt(i,e,n);if(0!==t)return t;r=r||i.field.isKeyField()}return 0}}function Qt(t,e,n){const r=t.field.isKeyField()?Y.comparator(e.key,n.key):function(t,e,n){const r=e.data.field(t),i=n.data.field(t);return null!==r&&null!==i?nt(r,i):g()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return g()}}function Xt(t,e){if(t.D){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:X(e)?"-0":e}}function Yt(t){return{integerValue:""+t}}function Zt(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!X(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?Yt(e):Xt(t,e)}class te{constructor(){this._=void 0}}function ee(t,e,n){return t instanceof ie?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof se?oe(t,e):t instanceof ae?ce(t,e):function(t,e){const n=re(t,e),r=he(n)+he(t.C);return at(n)&&at(t.C)?Yt(r):Xt(t.N,r)}(t,e)}function ne(t,e,n){return t instanceof se?oe(t,e):t instanceof ae?ce(t,e):n}function re(t,e){return t instanceof ue?at(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class ie extends te{}class se extends te{constructor(t){super(),this.elements=t}}function oe(t,e){const n=le(e);for(const e of t.elements)n.some((t=>tt(t,e)))||n.push(e);return{arrayValue:{values:n}}}class ae extends te{constructor(t){super(),this.elements=t}}function ce(t,e){let n=le(e);for(const e of t.elements)n=n.filter((t=>!tt(t,e)));return{arrayValue:{values:n}}}class ue extends te{constructor(t,e){super(),this.N=t,this.C=e}}function he(t){return H(t.integerValue||t.doubleValue)}function le(t){return ct(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class de{constructor(t,e){this.field=t,this.transform=e}}class fe{constructor(t,e){this.version=t,this.transformResults=e}}class pe{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new pe}static exists(t){return new pe(void 0,t)}static updateTime(t){return new pe(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function me(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class ge{}function ye(t,e,n){t instanceof Ie?function(t,e,n){const r=t.value.clone(),i=Se(t.fieldTransforms,e,n.transformResults);r.setAll(i),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):t instanceof Te?function(t,e,n){if(!me(t.precondition,e))return void e.convertToUnknownDocument(n.version);const r=Se(t.fieldTransforms,e,n.transformResults),i=e.data;i.setAll(Ee(t)),i.setAll(r),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function ve(t,e,n){t instanceof Ie?function(t,e,n){if(!me(t.precondition,e))return;const r=t.value.clone(),i=ke(t.fieldTransforms,n,e);r.setAll(i),e.convertToFoundDocument(be(e),r).setHasLocalMutations()}(t,e,n):t instanceof Te?function(t,e,n){if(!me(t.precondition,e))return;const r=ke(t.fieldTransforms,n,e),i=e.data;i.setAll(Ee(t)),i.setAll(r),e.convertToFoundDocument(be(e),i).setHasLocalMutations()}(t,e,n):function(t,e){me(t.precondition,e)&&e.convertToNoDocument(L.min())}(t,e)}function we(t,e){let n=null;for(const r of t.fieldTransforms){const t=e.data.field(r.field),i=re(r.transform,t||null);null!=i&&(null==n&&(n=ft.empty()),n.set(r.field,i))}return n||null}function _e(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&O(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof se&&e instanceof se||t instanceof ae&&e instanceof ae?O(t.elements,e.elements,tt):t instanceof ue&&e instanceof ue?tt(t.C,e.C):t instanceof ie&&e instanceof ie}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function be(t){return t.isFoundDocument()?t.version:L.min()}class Ie extends ge{constructor(t,e,n,r=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=r,this.type=0}}class Te extends ge{constructor(t,e,n,r,i=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=r,this.fieldTransforms=i,this.type=1}}function Ee(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=t.data.field(n);e.set(n,r)}})),e}function Se(t,e,n){const r=new Map;y(t.length===n.length);for(let i=0;i<n.length;i++){const s=t[i],o=s.transform,a=e.data.field(s.field);r.set(s.field,ne(o,a,n[i]))}return r}function ke(t,e,n){const r=new Map;for(const i of t){const t=i.transform,s=n.data.field(i.field);r.set(i.field,ee(t,s,e))}return r}class Ae extends ge{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class Ne extends ge{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}class Ce{constructor(t){this.count=t}}var Re,Oe;function De(t){if(void 0===t)return f("GRPC error has no .code"),w.UNKNOWN;switch(t){case Re.OK:return w.OK;case Re.CANCELLED:return w.CANCELLED;case Re.UNKNOWN:return w.UNKNOWN;case Re.DEADLINE_EXCEEDED:return w.DEADLINE_EXCEEDED;case Re.RESOURCE_EXHAUSTED:return w.RESOURCE_EXHAUSTED;case Re.INTERNAL:return w.INTERNAL;case Re.UNAVAILABLE:return w.UNAVAILABLE;case Re.UNAUTHENTICATED:return w.UNAUTHENTICATED;case Re.INVALID_ARGUMENT:return w.INVALID_ARGUMENT;case Re.NOT_FOUND:return w.NOT_FOUND;case Re.ALREADY_EXISTS:return w.ALREADY_EXISTS;case Re.PERMISSION_DENIED:return w.PERMISSION_DENIED;case Re.FAILED_PRECONDITION:return w.FAILED_PRECONDITION;case Re.ABORTED:return w.ABORTED;case Re.OUT_OF_RANGE:return w.OUT_OF_RANGE;case Re.UNIMPLEMENTED:return w.UNIMPLEMENTED;case Re.DATA_LOSS:return w.DATA_LOSS;default:return g()}}(Oe=Re||(Re={}))[Oe.OK=0]="OK",Oe[Oe.CANCELLED=1]="CANCELLED",Oe[Oe.UNKNOWN=2]="UNKNOWN",Oe[Oe.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Oe[Oe.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Oe[Oe.NOT_FOUND=5]="NOT_FOUND",Oe[Oe.ALREADY_EXISTS=6]="ALREADY_EXISTS",Oe[Oe.PERMISSION_DENIED=7]="PERMISSION_DENIED",Oe[Oe.UNAUTHENTICATED=16]="UNAUTHENTICATED",Oe[Oe.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Oe[Oe.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Oe[Oe.ABORTED=10]="ABORTED",Oe[Oe.OUT_OF_RANGE=11]="OUT_OF_RANGE",Oe[Oe.UNIMPLEMENTED=12]="UNIMPLEMENTED",Oe[Oe.INTERNAL=13]="INTERNAL",Oe[Oe.UNAVAILABLE=14]="UNAVAILABLE",Oe[Oe.DATA_LOSS=15]="DATA_LOSS";class Le{constructor(t,e){this.comparator=t,this.root=e||xe.EMPTY}insert(t,e){return new Le(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,xe.BLACK,null,null))}remove(t){return new Le(this.comparator,this.root.remove(t,this.comparator).copy(null,null,xe.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new Pe(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new Pe(this.root,t,this.comparator,!1)}getReverseIterator(){return new Pe(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new Pe(this.root,t,this.comparator,!0)}}class Pe{constructor(t,e,n,r){this.isReverse=r,this.nodeStack=[];let i=1;for(;!t.isEmpty();)if(i=e?n(t.key,e):1,r&&(i*=-1),i<0)t=this.isReverse?t.left:t.right;else{if(0===i){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class xe{constructor(t,e,n,r,i){this.key=t,this.value=e,this.color=null!=n?n:xe.RED,this.left=null!=r?r:xe.EMPTY,this.right=null!=i?i:xe.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,r,i){return new xe(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let r=this;const i=n(t,r.key);return r=i<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return xe.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,r=this;if(e(t,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(t,e),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===e(t,r.key)){if(r.right.isEmpty())return xe.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(t,e))}return r.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,xe.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,xe.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw g();if(this.right.isRed())throw g();const t=this.left.check();if(t!==this.right.check())throw g();return t+(this.isRed()?0:1)}}xe.EMPTY=null,xe.RED=!0,xe.BLACK=!1,xe.EMPTY=new class{constructor(){this.size=0}get key(){throw g()}get value(){throw g()}get color(){throw g()}get left(){throw g()}get right(){throw g()}copy(t,e,n,r,i){return this}insert(t,e,n){return new xe(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class Me{constructor(t){this.comparator=t,this.data=new Le(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,t[1])>=0)return;e(r.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new Ue(this.data.getIterator())}getIteratorFrom(t){return new Ue(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof Me))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(0!==this.comparator(t,r))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new Me(this.comparator);return e.data=t,e}}class Ue{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const Fe=new Le(Y.comparator);function Ve(){return Fe}const je=new Le(Y.comparator);function qe(){return je}const Be=new Le(Y.comparator);const ze=new Me(Y.comparator);function Ke(...t){let e=ze;for(const n of t)e=e.add(n);return e}const He=new Me(R);function $e(){return He}class Ge{constructor(t,e,n,r,i){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(t,e){const n=new Map;return n.set(t,We.createSynthesizedTargetChangeForCurrentChange(t,e)),new Ge(L.min(),n,$e(),Ve(),Ke())}}class We{constructor(t,e,n,r,i){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(t,e){return new We(B.EMPTY_BYTE_STRING,e,Ke(),Ke(),Ke())}}class Je{constructor(t,e,n,r){this.k=t,this.removedTargetIds=e,this.key=n,this.$=r}}class Qe{constructor(t,e){this.targetId=t,this.O=e}}class Xe{constructor(t,e,n=B.EMPTY_BYTE_STRING,r=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r}}class Ye{constructor(){this.F=0,this.M=en(),this.L=B.EMPTY_BYTE_STRING,this.B=!1,this.U=!0}get current(){return this.B}get resumeToken(){return this.L}get q(){return 0!==this.F}get K(){return this.U}j(t){t.approximateByteSize()>0&&(this.U=!0,this.L=t)}W(){let t=Ke(),e=Ke(),n=Ke();return this.M.forEach(((r,i)=>{switch(i){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:g()}})),new We(this.L,this.B,t,e,n)}G(){this.U=!1,this.M=en()}H(t,e){this.U=!0,this.M=this.M.insert(t,e)}J(t){this.U=!0,this.M=this.M.remove(t)}Y(){this.F+=1}X(){this.F-=1}Z(){this.U=!0,this.B=!0}}class Ze{constructor(t){this.tt=t,this.et=new Map,this.nt=Ve(),this.st=tn(),this.it=new Me(R)}rt(t){for(const e of t.k)t.$&&t.$.isFoundDocument()?this.ot(e,t.$):this.at(e,t.key,t.$);for(const e of t.removedTargetIds)this.at(e,t.key,t.$)}ct(t){this.forEachTarget(t,(e=>{const n=this.ut(e);switch(t.state){case 0:this.ht(e)&&n.j(t.resumeToken);break;case 1:n.X(),n.q||n.G(),n.j(t.resumeToken);break;case 2:n.X(),n.q||this.removeTarget(e);break;case 3:this.ht(e)&&(n.Z(),n.j(t.resumeToken));break;case 4:this.ht(e)&&(this.lt(e),n.j(t.resumeToken));break;default:g()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.et.forEach(((t,n)=>{this.ht(n)&&e(n)}))}ft(t){const e=t.targetId,n=t.O.count,r=this.dt(e);if(r){const t=r.target;if(_t(t))if(0===n){const n=new Y(t.path);this.at(e,n,mt.newNoDocument(n,L.min()))}else y(1===n);else this.wt(e)!==n&&(this.lt(e),this.it=this.it.add(e))}}_t(t){const e=new Map;this.et.forEach(((n,r)=>{const i=this.dt(r);if(i){if(n.current&&_t(i.target)){const e=new Y(i.target.path);null!==this.nt.get(e)||this.gt(r,e)||this.at(r,e,mt.newNoDocument(e,t))}n.K&&(e.set(r,n.W()),n.G())}}));let n=Ke();this.st.forEach(((t,e)=>{let r=!0;e.forEachWhile((t=>{const e=this.dt(t);return!e||2===e.purpose||(r=!1,!1)})),r&&(n=n.add(t))}));const r=new Ge(t,e,this.it,this.nt,n);return this.nt=Ve(),this.st=tn(),this.it=new Me(R),r}ot(t,e){if(!this.ht(t))return;const n=this.gt(t,e.key)?2:0;this.ut(t).H(e.key,n),this.nt=this.nt.insert(e.key,e),this.st=this.st.insert(e.key,this.yt(e.key).add(t))}at(t,e,n){if(!this.ht(t))return;const r=this.ut(t);this.gt(t,e)?r.H(e,1):r.J(e),this.st=this.st.insert(e,this.yt(e).delete(t)),n&&(this.nt=this.nt.insert(e,n))}removeTarget(t){this.et.delete(t)}wt(t){const e=this.ut(t).W();return this.tt.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}Y(t){this.ut(t).Y()}ut(t){let e=this.et.get(t);return e||(e=new Ye,this.et.set(t,e)),e}yt(t){let e=this.st.get(t);return e||(e=new Me(R),this.st=this.st.insert(t,e)),e}ht(t){const e=null!==this.dt(t);return e||d("WatchChangeAggregator","Detected inactive target",t),e}dt(t){const e=this.et.get(t);return e&&e.q?null:this.tt.Et(t)}lt(t){this.et.set(t,new Ye),this.tt.getRemoteKeysForTarget(t).forEach((e=>{this.at(t,e,null)}))}gt(t,e){return this.tt.getRemoteKeysForTarget(t).has(e)}}function tn(){return new Le(Y.comparator)}function en(){return new Le(Y.comparator)}const nn={asc:"ASCENDING",desc:"DESCENDING"},rn={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class sn{constructor(t,e){this.databaseId=t,this.D=e}}function on(t,e){return t.D?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function an(t,e){return t.D?e.toBase64():e.toUint8Array()}function cn(t,e){return on(t,e.toTimestamp())}function un(t){return y(!!t),L.fromTimestamp(function(t){const e=K(t);return new D(e.seconds,e.nanos)}(t))}function hn(t,e){return function(t){return new F(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function ln(t){const e=F.fromString(t);return y(On(e)),e}function dn(t,e){return hn(t.databaseId,e.path)}function fn(t,e){const n=ln(e);if(n.get(1)!==t.databaseId.projectId)throw new _(w.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new _(w.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new Y(gn(n))}function pn(t,e){return hn(t.databaseId,e)}function mn(t){return new F(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function gn(t){return y(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function yn(t,e,n){return{name:dn(t,e),fields:n.value.mapValue.fields}}function vn(t,e){return{documents:[pn(t,e.path)]}}function wn(t,e){const n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=pn(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=pn(t,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const i=function(t){if(0===t.length)return;const e=t.map((t=>function(t){if("=="===t.op){if(ht(t.value))return{unaryFilter:{field:kn(t.field),op:"IS_NAN"}};if(ut(t.value))return{unaryFilter:{field:kn(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(ht(t.value))return{unaryFilter:{field:kn(t.field),op:"IS_NOT_NAN"}};if(ut(t.value))return{unaryFilter:{field:kn(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:kn(t.field),op:Sn(t.op),value:t.value}}}(t)));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}(e.filters);i&&(n.structuredQuery.where=i);const s=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:kn(t.field),direction:En(t.dir)}}(t)))}(e.orderBy);s&&(n.structuredQuery.orderBy=s);const o=function(t,e){return t.D||Q(e)?e:{value:e}}(t,e.limit);return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt=In(e.startAt)),e.endAt&&(n.structuredQuery.endAt=In(e.endAt)),n}function _n(t){let e=function(t){const e=ln(t);return 4===e.length?F.emptyPath():gn(e)}(t.parent);const n=t.structuredQuery,r=n.from?n.from.length:0;let i=null;if(r>0){y(1===r);const t=n.from[0];t.allDescendants?i=t.collectionId:e=e.child(t.collectionId)}let s=[];n.where&&(s=bn(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new Dt(An(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,Q(e)?null:e}(n.limit));let c=null;n.startAt&&(c=Tn(n.startAt));let u=null;return n.endAt&&(u=Tn(n.endAt)),function(t,e,n,r,i,s,o,a){return new Mt(t,e,n,r,i,s,o,a)}(e,i,o,s,a,"F",c,u)}function bn(t){return t?void 0!==t.unaryFilter?[Cn(t)]:void 0!==t.fieldFilter?[Nn(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>bn(t))).reduce(((t,e)=>t.concat(e))):g():[]}function In(t){return{before:t.before,values:t.position}}function Tn(t){const e=!!t.before,n=t.values||[];return new Rt(n,e)}function En(t){return nn[t]}function Sn(t){return rn[t]}function kn(t){return{fieldPath:t.canonicalString()}}function An(t){return j.fromServerFormat(t.fieldPath)}function Nn(t){return bt.create(An(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return g()}}(t.fieldFilter.op),t.fieldFilter.value)}function Cn(t){switch(t.unaryFilter.op){case"IS_NAN":const e=An(t.unaryFilter.field);return bt.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=An(t.unaryFilter.field);return bt.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=An(t.unaryFilter.field);return bt.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=An(t.unaryFilter.field);return bt.create(i,"!=",{nullValue:"NULL_VALUE"});default:return g()}}function Rn(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function On(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}function Dn(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=Pn(e)),e=Ln(t.get(n),e);return Pn(e)}function Ln(t,e){let n=e;const r=t.length;for(let e=0;e<r;e++){const r=t.charAt(e);switch(r){case"\0":n+="";break;case"":n+="";break;default:n+=r}}return n}function Pn(t){return t+""}class xn{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}xn.store="owner",xn.key="owner";class Mn{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}Mn.store="mutationQueues",Mn.keyPath="userId";class Un{constructor(t,e,n,r,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=i}}Un.store="mutations",Un.keyPath="batchId",Un.userMutationsIndex="userMutationsIndex",Un.userMutationsKeyPath=["userId","batchId"];class Fn{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,Dn(e)]}static key(t,e,n){return[t,Dn(e),n]}}Fn.store="documentMutations",Fn.PLACEHOLDER=new Fn;class Vn{constructor(t,e,n,r,i,s){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=i,this.parentPath=s}}Vn.store="remoteDocuments",Vn.readTimeIndex="readTimeIndex",Vn.readTimeIndexPath="readTime",Vn.collectionReadTimeIndex="collectionReadTimeIndex",Vn.collectionReadTimeIndexPath=["parentPath","readTime"];class jn{constructor(t){this.byteSize=t}}jn.store="remoteDocumentGlobal",jn.key="remoteDocumentGlobalKey";class qn{constructor(t,e,n,r,i,s,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=s,this.query=o}}qn.store="targets",qn.keyPath="targetId",qn.queryTargetsIndexName="queryTargetsIndex",qn.queryTargetsKeyPath=["canonicalId","targetId"];class Bn{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}Bn.store="targetDocuments",Bn.keyPath=["targetId","path"],Bn.documentTargetsIndex="documentTargetsIndex",Bn.documentTargetsKeyPath=["path","targetId"];class zn{constructor(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r}}zn.key="targetGlobalKey",zn.store="targetGlobal";class Kn{constructor(t,e){this.collectionId=t,this.parent=e}}Kn.store="collectionParents",Kn.keyPath=["collectionId","parent"];class Hn{constructor(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r}}Hn.store="clientMetadata",Hn.keyPath="clientId";class $n{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}$n.store="bundles",$n.keyPath="bundleId";class Gn{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}Gn.store="namedQueries",Gn.keyPath="name",Mn.store,Un.store,Fn.store,Vn.store,qn.store,xn.store,zn.store,Bn.store,Hn.store,jn.store,Kn.store,$n.store,Gn.store;const Wn="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class Jn{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}class Qn{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&g(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new Qn(((n,r)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,r)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,r)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof Qn?e:Qn.resolve(e)}catch(t){return Qn.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):Qn.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):Qn.reject(e)}static resolve(t){return new Qn(((e,n)=>{e(t)}))}static reject(t){return new Qn(((e,n)=>{n(t)}))}static waitFor(t){return new Qn(((e,n)=>{let r=0,i=0,s=!1;t.forEach((t=>{++r,t.next((()=>{++i,s&&i===r&&e()}),(t=>n(t)))})),s=!0,i===r&&e()}))}static or(t){let e=Qn.resolve(!1);for(const n of t)e=e.next((t=>t?Qn.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,r)=>{n.push(e.call(this,t,r))})),this.waitFor(n)}}function Xn(t){return"IndexedDbTransactionError"===t.name}class Yn{constructor(t,e,n,r){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const r=this.mutations[e];r.key.isEqual(t.key)&&ye(r,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&ve(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&ve(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),r=n;this.applyToLocalView(r),n.isValidDocument()||r.convertToNoDocument(L.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),Ke())}isEqual(t){return this.batchId===t.batchId&&O(this.mutations,t.mutations,((t,e)=>_e(t,e)))&&O(this.baseMutations,t.baseMutations,((t,e)=>_e(t,e)))}}class Zn{constructor(t,e,n,r){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=r}static from(t,e,n){y(t.mutations.length===n.length);let r=Be;const i=t.mutations;for(let t=0;t<i.length;t++)r=r.insert(i[t].key,n[t].version);return new Zn(t,e,n,r)}}class tr{constructor(t,e,n,r,i=L.min(),s=L.min(),o=B.EMPTY_BYTE_STRING){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=s,this.resumeToken=o}withSequenceNumber(t){return new tr(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(t,e){return new tr(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t)}withLastLimboFreeSnapshotVersion(t){return new tr(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken)}}class er{constructor(t){this.Wt=t}}function nr(t){const e=_n({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new Mt(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class rr{constructor(){this.Gt=new ir}addToCollectionParentIndex(t,e){return this.Gt.add(e),Qn.resolve()}getCollectionParents(t,e){return Qn.resolve(this.Gt.getEntries(e))}}class ir{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e]||new Me(F.comparator),i=!r.has(n);return this.index[e]=r.add(n),i}has(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e];return r&&r.has(n)}getEntries(t){return(this.index[t]||new Me(F.comparator)).toArray()}}class sr{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new sr(t,sr.DEFAULT_COLLECTION_PERCENTILE,sr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}sr.DEFAULT_COLLECTION_PERCENTILE=10,sr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,sr.DEFAULT=new sr(41943040,sr.DEFAULT_COLLECTION_PERCENTILE,sr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),sr.DISABLED=new sr(-1,0,0);class or{constructor(t){this.ne=t}next(){return this.ne+=2,this.ne}static se(){return new or(0)}static ie(){return new or(-1)}}async function ar(t){if(t.code!==w.FAILED_PRECONDITION||t.message!==Wn)throw t;d("LocalStore","Unexpectedly lost primary lease")}class cr{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,r]of n)if(this.equalsFn(e,t))return r}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),r=this.inner[n];if(void 0!==r){for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],t))return void(r[n]=[t,e]);r.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],t))return 1===n.length?delete this.inner[e]:n.splice(r,1),!0;return!1}forEach(t){x(this.inner,((e,n)=>{for(const[e,r]of n)t(e,r)}))}isEmpty(){return M(this.inner)}}class ur{constructor(){this.changes=new cr((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:L.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:mt.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?Qn.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class hr{constructor(t,e,n){this.He=t,this.In=e,this.Ht=n}An(t,e){return this.In.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Rn(t,e,n)))}Rn(t,e,n){return this.He.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}Pn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}bn(t,e){return this.He.getEntries(t,e).next((e=>this.vn(t,e).next((()=>e))))}vn(t,e){return this.In.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.Pn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return Y.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Vn(t,e.path):Bt(e)?this.Sn(t,e,n):this.Dn(t,e,n)}Vn(t,e){return this.An(t,new Y(e)).next((t=>{let e=qe();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Sn(t,e,n){const r=e.collectionGroup;let i=qe();return this.Ht.getCollectionParents(t,r).next((s=>Qn.forEach(s,(s=>{const o=function(t,e){return new Mt(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(r));return this.Dn(t,o,n).next((t=>{t.forEach(((t,e)=>{i=i.insert(t,e)}))}))})).next((()=>i))))}Dn(t,e,n){let r,i;return this.He.getDocumentsMatchingQuery(t,e,n).next((n=>(r=n,this.In.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(i=e,this.Cn(t,i,r).next((t=>{r=t;for(const t of i)for(const e of t.mutations){const n=e.key;let i=r.get(n);null==i&&(i=mt.newInvalidDocument(n),r=r.insert(n,i)),ve(e,i,t.localWriteTime),i.isFoundDocument()||(r=r.remove(n))}}))))).next((()=>(r.forEach(((t,n)=>{Wt(e,n)||(r=r.remove(t))})),r)))}Cn(t,e,n){let r=Ke();for(const t of e)for(const e of t.mutations)e instanceof Te&&null===n.get(e.key)&&(r=r.add(e.key));let i=n;return this.He.getEntries(t,r).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(i=i.insert(t,e))})),i)))}}class lr{constructor(t,e,n,r){this.targetId=t,this.fromCache=e,this.Nn=n,this.xn=r}static kn(t,e){let n=Ke(),r=Ke();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:r=r.add(t.doc.key)}return new lr(t,e.fromCache,n,r)}}class dr{$n(t){this.On=t}getDocumentsMatchingQuery(t,e,n,r){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(L.min())?this.Fn(t,e):this.On.bn(t,r).next((i=>{const o=this.Mn(e,i);return(Ft(e)||Vt(e))&&this.Ln(e.limitType,o,r,n)?this.Fn(t,e):(l()<=s.$b.DEBUG&&d("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Gt(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(o.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Mn(t,e){let n=new Me(Jt(t));return e.forEach(((e,r)=>{Wt(t,r)&&(n=n.add(r))})),n}Ln(t,e,n,r){if(n.size!==e.size)return!0;const i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(r)>0)}Fn(t,e){return l()<=s.$b.DEBUG&&d("QueryEngine","Using full collection scan to execute query:",Gt(e)),this.On.getDocumentsMatchingQuery(t,e,L.min())}}class fr{constructor(t,e,n,r){this.persistence=t,this.Bn=e,this.N=r,this.Un=new Le(R),this.qn=new cr((t=>vt(t)),wt),this.Kn=L.min(),this.In=t.getMutationQueue(n),this.jn=t.getRemoteDocumentCache(),this.ze=t.getTargetCache(),this.Qn=new hr(this.jn,this.In,this.persistence.getIndexManager()),this.Je=t.getBundleCache(),this.Bn.$n(this.Qn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Un)))}}async function pr(t,e){const n=v(t);let r=n.In,i=n.Qn;const s=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.In.getAllMutationBatches(t).next((o=>(s=o,r=n.persistence.getMutationQueue(e),i=new hr(n.jn,r,n.persistence.getIndexManager()),r.getAllMutationBatches(t)))).next((e=>{const n=[],r=[];let o=Ke();for(const t of s){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){r.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return i.bn(t,o).next((t=>({Wn:t,removedBatchIds:n,addedBatchIds:r})))}))}));return n.In=r,n.Qn=i,n.Bn.$n(n.Qn),s}function mr(t){const e=v(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.ze.getLastRemoteSnapshotVersion(t)))}function gr(t,e){const n=v(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.In.getNextMutationBatchAfterBatchId(t,e))))}async function yr(t,e,n){const r=v(t),i=r.Un.get(e),s=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",s,(t=>r.persistence.referenceDelegate.removeTarget(t,i)))}catch(t){if(!Xn(t))throw t;d("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}r.Un=r.Un.remove(e),r.qn.delete(i.target)}function vr(t,e,n){const r=v(t);let i=L.min(),s=Ke();return r.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const r=v(t),i=r.qn.get(n);return void 0!==i?Qn.resolve(r.Un.get(i)):r.ze.getTargetData(e,n)}(r,t,Kt(e)).next((e=>{if(e)return i=e.lastLimboFreeSnapshotVersion,r.ze.getMatchingKeysForTargetId(t,e.targetId).next((t=>{s=t}))})).next((()=>r.Bn.getDocumentsMatchingQuery(t,e,n?i:L.min(),n?s:Ke()))).next((t=>({documents:t,Gn:s})))))}class wr{constructor(t){this.N=t,this.Yn=new Map,this.Xn=new Map}getBundleMetadata(t,e){return Qn.resolve(this.Yn.get(e))}saveBundleMetadata(t,e){var n;return this.Yn.set(e.id,{id:(n=e).id,version:n.version,createTime:un(n.createTime)}),Qn.resolve()}getNamedQuery(t,e){return Qn.resolve(this.Xn.get(e))}saveNamedQuery(t,e){return this.Xn.set(e.name,function(t){return{name:t.name,query:nr(t.bundledQuery),readTime:un(t.readTime)}}(e)),Qn.resolve()}}class _r{constructor(){this.Zn=new Me(br.ts),this.es=new Me(br.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(t,e){const n=new br(t,e);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.rs(new br(t,e))}os(t,e){t.forEach((t=>this.removeReference(t,e)))}cs(t){const e=new Y(new F([])),n=new br(e,t),r=new br(e,t+1),i=[];return this.es.forEachInRange([n,r],(t=>{this.rs(t),i.push(t.key)})),i}us(){this.Zn.forEach((t=>this.rs(t)))}rs(t){this.Zn=this.Zn.delete(t),this.es=this.es.delete(t)}hs(t){const e=new Y(new F([])),n=new br(e,t),r=new br(e,t+1);let i=Ke();return this.es.forEachInRange([n,r],(t=>{i=i.add(t.key)})),i}containsKey(t){const e=new br(t,0),n=this.Zn.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class br{constructor(t,e){this.key=t,this.ls=e}static ts(t,e){return Y.comparator(t.key,e.key)||R(t.ls,e.ls)}static ns(t,e){return R(t.ls,e.ls)||Y.comparator(t.key,e.key)}}class Ir{constructor(t,e){this.Ht=t,this.referenceDelegate=e,this.In=[],this.fs=1,this.ds=new Me(br.ts)}checkEmpty(t){return Qn.resolve(0===this.In.length)}addMutationBatch(t,e,n,r){const i=this.fs;this.fs++,this.In.length>0&&this.In[this.In.length-1];const s=new Yn(i,e,n,r);this.In.push(s);for(const e of r)this.ds=this.ds.add(new br(e.key,i)),this.Ht.addToCollectionParentIndex(t,e.key.path.popLast());return Qn.resolve(s)}lookupMutationBatch(t,e){return Qn.resolve(this.ws(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,r=this._s(n),i=r<0?0:r;return Qn.resolve(this.In.length>i?this.In[i]:null)}getHighestUnacknowledgedBatchId(){return Qn.resolve(0===this.In.length?-1:this.fs-1)}getAllMutationBatches(t){return Qn.resolve(this.In.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new br(e,0),r=new br(e,Number.POSITIVE_INFINITY),i=[];return this.ds.forEachInRange([n,r],(t=>{const e=this.ws(t.ls);i.push(e)})),Qn.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new Me(R);return e.forEach((t=>{const e=new br(t,0),r=new br(t,Number.POSITIVE_INFINITY);this.ds.forEachInRange([e,r],(t=>{n=n.add(t.ls)}))})),Qn.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,r=n.length+1;let i=n;Y.isDocumentKey(i)||(i=i.child(""));const s=new br(new Y(i),0);let o=new Me(R);return this.ds.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===r&&(o=o.add(t.ls)),!0)}),s),Qn.resolve(this.gs(o))}gs(t){const e=[];return t.forEach((t=>{const n=this.ws(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){y(0===this.ys(e.batchId,"removed")),this.In.shift();let n=this.ds;return Qn.forEach(e.mutations,(r=>{const i=new br(r.key,e.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(t,r.key)})).next((()=>{this.ds=n}))}te(t){}containsKey(t,e){const n=new br(e,0),r=this.ds.firstAfterOrEqual(n);return Qn.resolve(e.isEqual(r&&r.key))}performConsistencyCheck(t){return this.In.length,Qn.resolve()}ys(t,e){return this._s(t)}_s(t){return 0===this.In.length?0:t-this.In[0].batchId}ws(t){const e=this._s(t);return e<0||e>=this.In.length?null:this.In[e]}}class Tr{constructor(t,e){this.Ht=t,this.ps=e,this.docs=new Le(Y.comparator),this.size=0}addEntry(t,e,n){const r=e.key,i=this.docs.get(r),s=i?i.size:0,o=this.ps(e);return this.docs=this.docs.insert(r,{document:e.clone(),size:o,readTime:n}),this.size+=o-s,this.Ht.addToCollectionParentIndex(t,r.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return Qn.resolve(n?n.document.clone():mt.newInvalidDocument(e))}getEntries(t,e){let n=Ve();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():mt.newInvalidDocument(t))})),Qn.resolve(n)}getDocumentsMatchingQuery(t,e,n){let r=Ve();const i=new Y(e.path.child("")),s=this.docs.getIteratorFrom(i);for(;s.hasNext();){const{key:t,value:{document:i,readTime:o}}=s.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||Wt(e,i)&&(r=r.insert(i.key,i.clone()))}return Qn.resolve(r)}Es(t,e){return Qn.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new Er(this)}getSize(t){return Qn.resolve(this.size)}}class Er extends ur{constructor(t){super(),this.Se=t}applyChanges(t){const e=[];return this.changes.forEach(((n,r)=>{r.document.isValidDocument()?e.push(this.Se.addEntry(t,r.document,this.getReadTime(n))):this.Se.removeEntry(n)})),Qn.waitFor(e)}getFromCache(t,e){return this.Se.getEntry(t,e)}getAllFromCache(t,e){return this.Se.getEntries(t,e)}}class Sr{constructor(t){this.persistence=t,this.Ts=new cr((t=>vt(t)),wt),this.lastRemoteSnapshotVersion=L.min(),this.highestTargetId=0,this.Is=0,this.As=new _r,this.targetCount=0,this.Rs=or.se()}forEachTarget(t,e){return this.Ts.forEach(((t,n)=>e(n))),Qn.resolve()}getLastRemoteSnapshotVersion(t){return Qn.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return Qn.resolve(this.Is)}allocateTargetId(t){return this.highestTargetId=this.Rs.next(),Qn.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Is&&(this.Is=e),Qn.resolve()}ae(t){this.Ts.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Rs=new or(e),this.highestTargetId=e),t.sequenceNumber>this.Is&&(this.Is=t.sequenceNumber)}addTargetData(t,e){return this.ae(e),this.targetCount+=1,Qn.resolve()}updateTargetData(t,e){return this.ae(e),Qn.resolve()}removeTargetData(t,e){return this.Ts.delete(e.target),this.As.cs(e.targetId),this.targetCount-=1,Qn.resolve()}removeTargets(t,e,n){let r=0;const i=[];return this.Ts.forEach(((s,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Ts.delete(s),i.push(this.removeMatchingKeysForTargetId(t,o.targetId)),r++)})),Qn.waitFor(i).next((()=>r))}getTargetCount(t){return Qn.resolve(this.targetCount)}getTargetData(t,e){const n=this.Ts.get(e)||null;return Qn.resolve(n)}addMatchingKeys(t,e,n){return this.As.ss(e,n),Qn.resolve()}removeMatchingKeys(t,e,n){this.As.os(e,n);const r=this.persistence.referenceDelegate,i=[];return r&&e.forEach((e=>{i.push(r.markPotentiallyOrphaned(t,e))})),Qn.waitFor(i)}removeMatchingKeysForTargetId(t,e){return this.As.cs(e),Qn.resolve()}getMatchingKeysForTargetId(t,e){const n=this.As.hs(e);return Qn.resolve(n)}containsKey(t,e){return Qn.resolve(this.As.containsKey(e))}}class kr{constructor(t,e){this.Ps={},this.Le=new A(0),this.Be=!1,this.Be=!0,this.referenceDelegate=t(this),this.ze=new Sr(this),this.Ht=new rr,this.He=function(t,e){return new Tr(t,e)}(this.Ht,(t=>this.referenceDelegate.bs(t))),this.N=new er(e),this.Je=new wr(this.N)}start(){return Promise.resolve()}shutdown(){return this.Be=!1,Promise.resolve()}get started(){return this.Be}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Ht}getMutationQueue(t){let e=this.Ps[t.toKey()];return e||(e=new Ir(this.Ht,this.referenceDelegate),this.Ps[t.toKey()]=e),e}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getBundleCache(){return this.Je}runTransaction(t,e,n){d("MemoryPersistence","Starting transaction:",t);const r=new Ar(this.Le.next());return this.referenceDelegate.vs(),n(r).next((t=>this.referenceDelegate.Vs(r).next((()=>t)))).toPromise().then((t=>(r.raiseOnCommittedEvent(),t)))}Ss(t,e){return Qn.or(Object.values(this.Ps).map((n=>()=>n.containsKey(t,e))))}}class Ar extends Jn{constructor(t){super(),this.currentSequenceNumber=t}}class Nr{constructor(t){this.persistence=t,this.Ds=new _r,this.Cs=null}static Ns(t){return new Nr(t)}get xs(){if(this.Cs)return this.Cs;throw g()}addReference(t,e,n){return this.Ds.addReference(n,e),this.xs.delete(n.toString()),Qn.resolve()}removeReference(t,e,n){return this.Ds.removeReference(n,e),this.xs.add(n.toString()),Qn.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),Qn.resolve()}removeTarget(t,e){this.Ds.cs(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}vs(){this.Cs=new Set}Vs(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return Qn.forEach(this.xs,(n=>{const r=Y.fromPath(n);return this.ks(t,r).next((t=>{t||e.removeEntry(r)}))})).next((()=>(this.Cs=null,e.apply(t))))}updateLimboDocument(t,e){return this.ks(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}bs(t){return 0}ks(t,e){return Qn.or([()=>Qn.resolve(this.Ds.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ss(t,e)])}}class Cr{constructor(){this.activeTargetIds=$e()}Fs(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ms(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Rr{constructor(){this.yi=new Cr,this.pi={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.yi.Fs(t),this.pi[t]||"not-current"}updateQueryState(t,e,n){this.pi[t]=e}removeLocalQueryTarget(t){this.yi.Ms(t)}isLocalQueryTarget(t){return this.yi.activeTargetIds.has(t)}clearQueryState(t){delete this.pi[t]}getAllActiveQueryTargets(){return this.yi.activeTargetIds}isActiveQueryTarget(t){return this.yi.activeTargetIds.has(t)}start(){return this.yi=new Cr,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Or{Ei(t){}shutdown(){}}class Dr{constructor(){this.Ti=()=>this.Ii(),this.Ai=()=>this.Ri(),this.Pi=[],this.bi()}Ei(t){this.Pi.push(t)}shutdown(){window.removeEventListener("online",this.Ti),window.removeEventListener("offline",this.Ai)}bi(){window.addEventListener("online",this.Ti),window.addEventListener("offline",this.Ai)}Ii(){d("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.Pi)t(0)}Ri(){d("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.Pi)t(1)}static Pt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Lr={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Pr{constructor(t){this.vi=t.vi,this.Vi=t.Vi}Si(t){this.Di=t}Ci(t){this.Ni=t}onMessage(t){this.xi=t}close(){this.Vi()}send(t){this.vi(t)}ki(){this.Di()}$i(t){this.Ni(t)}Oi(t){this.xi(t)}}class xr extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Fi=e+"://"+t.host,this.Mi="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Li(t,e,n,r){const i=this.Bi(t,e);d("RestConnection","Sending: ",i,n);const s={};return this.Ui(s,r),this.qi(t,i,s,n).then((t=>(d("RestConnection","Received: ",t),t)),(e=>{throw p("RestConnection",`${t} failed with error: `,e,"url: ",i,"request:",n),e}))}Ki(t,e,n,r){return this.Li(t,e,n,r)}Ui(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/"+u,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e)for(const n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n])}Bi(t,e){const n=Lr[t];return`${this.Fi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}qi(t,e,n,r){return new Promise(((i,s)=>{const o=new a.ZS;o.listenOnce(a.Bx.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case a.O4.NO_ERROR:const e=o.getResponseJson();d("Connection","XHR received:",JSON.stringify(e)),i(e);break;case a.O4.TIMEOUT:d("Connection",'RPC "'+t+'" timed out'),s(new _(w.DEADLINE_EXCEEDED,"Request time out"));break;case a.O4.HTTP_ERROR:const n=o.getStatus();if(d("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(w).indexOf(e)>=0?e:w.UNKNOWN}(t.status);s(new _(e,t.message))}else s(new _(w.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new _(w.UNAVAILABLE,"Connection failed."));break;default:g()}}finally{d("Connection",'RPC "'+t+'" completed.')}}));const c=JSON.stringify(r);o.send(e,"POST",c,n,15)}))}ji(t,e){const n=[this.Fi,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=(0,a.fF)(),i=(0,a.Ao)(),s={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(s.xmlHttpFactory=new a._L({})),this.Ui(s.initMessageHeaders,e),(0,o.jZ)()||(0,o.lV)()||(0,o.b8)()||(0,o.lT)()||(0,o.n4)()||(0,o.sr)()||(s.httpHeadersOverwriteParam="$httpHeaders");const c=n.join("");d("Connection","Creating WebChannel: "+c,s);const u=r.createWebChannel(c,s);let h=!1,l=!1;const f=new Pr({vi:t=>{l?d("Connection","Not sending because WebChannel is closed:",t):(h||(d("Connection","Opening WebChannel transport."),u.open(),h=!0),d("Connection","WebChannel sending:",t),u.send(t))},Vi:()=>u.close()}),m=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return m(u,a.iO.EventType.OPEN,(()=>{l||d("Connection","WebChannel transport opened.")})),m(u,a.iO.EventType.CLOSE,(()=>{l||(l=!0,d("Connection","WebChannel transport closed"),f.$i())})),m(u,a.iO.EventType.ERROR,(t=>{l||(l=!0,p("Connection","WebChannel transport errored:",t),f.$i(new _(w.UNAVAILABLE,"The operation could not be completed")))})),m(u,a.iO.EventType.MESSAGE,(t=>{var e;if(!l){const n=t.data[0];y(!!n);const r=n,i=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(i){d("Connection","WebChannel received error:",i);const t=i.status;let e=function(t){const e=Re[t];if(void 0!==e)return De(e)}(t),n=i.message;void 0===e&&(e=w.INTERNAL,n="Unknown error status: "+t+" with message "+i.message),l=!0,f.$i(new _(e,n)),u.close()}else d("Connection","WebChannel received:",n),f.Oi(n)}})),m(i,a.Jh.STAT_EVENT,(t=>{t.stat===a.ro.PROXY?d("Connection","Detected buffering proxy"):t.stat===a.ro.NOPROXY&&d("Connection","Detected no buffering proxy")})),setTimeout((()=>{f.ki()}),0),f}}function Mr(){return"undefined"!=typeof document?document:null}function Ur(t){return new sn(t,!0)}class Fr{constructor(t,e,n=1e3,r=1.5,i=6e4){this.Oe=t,this.timerId=e,this.Qi=n,this.Wi=r,this.Gi=i,this.zi=0,this.Hi=null,this.Ji=Date.now(),this.reset()}reset(){this.zi=0}Yi(){this.zi=this.Gi}Xi(t){this.cancel();const e=Math.floor(this.zi+this.Zi()),n=Math.max(0,Date.now()-this.Ji),r=Math.max(0,e-n);r>0&&d("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.zi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Hi=this.Oe.enqueueAfterDelay(this.timerId,r,(()=>(this.Ji=Date.now(),t()))),this.zi*=this.Wi,this.zi<this.Qi&&(this.zi=this.Qi),this.zi>this.Gi&&(this.zi=this.Gi)}tr(){null!==this.Hi&&(this.Hi.skipDelay(),this.Hi=null)}cancel(){null!==this.Hi&&(this.Hi.cancel(),this.Hi=null)}Zi(){return(Math.random()-.5)*this.zi}}class Vr{constructor(t,e,n,r,i,s){this.Oe=t,this.er=n,this.nr=r,this.credentialsProvider=i,this.listener=s,this.state=0,this.sr=0,this.ir=null,this.stream=null,this.rr=new Fr(t,e)}ar(){return 1===this.state||2===this.state||4===this.state}cr(){return 2===this.state}start(){3!==this.state?this.auth():this.ur()}async stop(){this.ar()&&await this.close(0)}hr(){this.state=0,this.rr.reset()}lr(){this.cr()&&null===this.ir&&(this.ir=this.Oe.enqueueAfterDelay(this.er,6e4,(()=>this.dr())))}wr(t){this._r(),this.stream.send(t)}async dr(){if(this.cr())return this.close(0)}_r(){this.ir&&(this.ir.cancel(),this.ir=null)}async close(t,e){this._r(),this.rr.cancel(),this.sr++,3!==t?this.rr.reset():e&&e.code===w.RESOURCE_EXHAUSTED?(f(e.toString()),f("Using maximum backoff delay to prevent overloading the backend."),this.rr.Yi()):e&&e.code===w.UNAUTHENTICATED&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.mr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ci(e)}mr(){}auth(){this.state=1;const t=this.gr(this.sr),e=this.sr;this.credentialsProvider.getToken().then((t=>{this.sr===e&&this.yr(t)}),(e=>{t((()=>{const t=new _(w.UNKNOWN,"Fetching auth token failed: "+e.message);return this.pr(t)}))}))}yr(t){const e=this.gr(this.sr);this.stream=this.Er(t),this.stream.Si((()=>{e((()=>(this.state=2,this.listener.Si())))})),this.stream.Ci((t=>{e((()=>this.pr(t)))})),this.stream.onMessage((t=>{e((()=>this.onMessage(t)))}))}ur(){this.state=4,this.rr.Xi((async()=>{this.state=0,this.start()}))}pr(t){return d("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(3,t)}gr(t){return e=>{this.Oe.enqueueAndForget((()=>this.sr===t?e():(d("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class jr extends Vr{constructor(t,e,n,r,i){super(t,"listen_stream_connection_backoff","listen_stream_idle",e,n,i),this.N=r}Er(t){return this.nr.ji("Listen",t)}onMessage(t){this.rr.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:g()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],s=function(t,e){return t.D?(y(void 0===e||"string"==typeof e),B.fromBase64String(e||"")):(y(void 0===e||e instanceof Uint8Array),B.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?w.UNKNOWN:De(t.code);return new _(e,t.message||"")}(o);n=new Xe(r,i,s,a||null)}else if("documentChange"in e){e.documentChange;const r=e.documentChange;r.document,r.document.name,r.document.updateTime;const i=fn(t,r.document.name),s=un(r.document.updateTime),o=new ft({mapValue:{fields:r.document.fields}}),a=mt.newFoundDocument(i,s,o),c=r.targetIds||[],u=r.removedTargetIds||[];n=new Je(c,u,a.key,a)}else if("documentDelete"in e){e.documentDelete;const r=e.documentDelete;r.document;const i=fn(t,r.document),s=r.readTime?un(r.readTime):L.min(),o=mt.newNoDocument(i,s),a=r.removedTargetIds||[];n=new Je([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const r=e.documentRemove;r.document;const i=fn(t,r.document),s=r.removedTargetIds||[];n=new Je([],s,i,null)}else{if(!("filter"in e))return g();{e.filter;const t=e.filter;t.targetId;const r=t.count||0,i=new Ce(r),s=t.targetId;n=new Qe(s,i)}}return n}(this.N,t),n=function(t){if(!("targetChange"in t))return L.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?L.min():e.readTime?un(e.readTime):L.min()}(t);return this.listener.Tr(e,n)}Ir(t){const e={};e.database=mn(this.N),e.addTarget=function(t,e){let n;const r=e.target;return n=_t(r)?{documents:vn(t,r)}:{query:wn(t,r)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0?n.resumeToken=an(t,e.resumeToken):e.snapshotVersion.compareTo(L.min())>0&&(n.readTime=on(t,e.snapshotVersion.toTimestamp())),n}(this.N,t);const n=function(t,e){const n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return g()}}(0,e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.N,t);n&&(e.labels=n),this.wr(e)}Ar(t){const e={};e.database=mn(this.N),e.removeTarget=t,this.wr(e)}}class qr extends Vr{constructor(t,e,n,r,i){super(t,"write_stream_connection_backoff","write_stream_idle",e,n,i),this.N=r,this.Rr=!1}get Pr(){return this.Rr}start(){this.Rr=!1,this.lastStreamToken=void 0,super.start()}mr(){this.Rr&&this.br([])}Er(t){return this.nr.ji("Write",t)}onMessage(t){if(y(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Rr){this.rr.reset();const e=function(t,e){return t&&t.length>0?(y(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?un(t.updateTime):un(e);return n.isEqual(L.min())&&(n=un(e)),new fe(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=un(t.commitTime);return this.listener.vr(n,e)}return y(!t.writeResults||0===t.writeResults.length),this.Rr=!0,this.listener.Vr()}Sr(){const t={};t.database=mn(this.N),this.wr(t)}br(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof Ie)n={update:yn(t,e.key,e.value)};else if(e instanceof Ae)n={delete:dn(t,e.key)};else if(e instanceof Te)n={update:yn(t,e.key,e.data),updateMask:Rn(e.fieldMask)};else{if(!(e instanceof Ne))return g();n={verify:dn(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof ie)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof se)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof ae)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof ue)return{fieldPath:e.field.canonicalString(),increment:n.C};throw g()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:cn(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:g()}(t,e.precondition)),n}(this.N,t)))};this.wr(e)}}class Br extends class{}{constructor(t,e,n){super(),this.credentials=t,this.nr=e,this.N=n,this.Dr=!1}Cr(){if(this.Dr)throw new _(w.FAILED_PRECONDITION,"The client has already been terminated.")}Li(t,e,n){return this.Cr(),this.credentials.getToken().then((r=>this.nr.Li(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===w.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new _(w.UNKNOWN,t.toString())}))}Ki(t,e,n){return this.Cr(),this.credentials.getToken().then((r=>this.nr.Ki(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===w.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new _(w.UNKNOWN,t.toString())}))}terminate(){this.Dr=!0}}class zr{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Nr=0,this.kr=null,this.$r=!0}Or(){0===this.Nr&&(this.Fr("Unknown"),this.kr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.kr=null,this.Mr("Backend didn't respond within 10 seconds."),this.Fr("Offline"),Promise.resolve()))))}Lr(t){"Online"===this.state?this.Fr("Unknown"):(this.Nr++,this.Nr>=1&&(this.Br(),this.Mr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Fr("Offline")))}set(t){this.Br(),this.Nr=0,"Online"===t&&(this.$r=!1),this.Fr(t)}Fr(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}Mr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.$r?(f(e),this.$r=!1):d("OnlineStateTracker",e)}Br(){null!==this.kr&&(this.kr.cancel(),this.kr=null)}}class Kr{constructor(t,e,n,r,i){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Ur=[],this.qr=new Map,this.Kr=new Set,this.jr=[],this.Qr=i,this.Qr.Ei((t=>{n.enqueueAndForget((async()=>{Zr(this)&&(d("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=v(t);e.Kr.add(4),await $r(e),e.Wr.set("Unknown"),e.Kr.delete(4),await Hr(e)}(this))}))})),this.Wr=new zr(n,r)}}async function Hr(t){if(Zr(t))for(const e of t.jr)await e(!0)}async function $r(t){for(const e of t.jr)await e(!1)}function Gr(t,e){const n=v(t);n.qr.has(e.targetId)||(n.qr.set(e.targetId,e),Yr(n)?Xr(n):mi(n).cr()&&Jr(n,e))}function Wr(t,e){const n=v(t),r=mi(n);n.qr.delete(e),r.cr()&&Qr(n,e),0===n.qr.size&&(r.cr()?r.lr():Zr(n)&&n.Wr.set("Unknown"))}function Jr(t,e){t.Gr.Y(e.targetId),mi(t).Ir(e)}function Qr(t,e){t.Gr.Y(e),mi(t).Ar(e)}function Xr(t){t.Gr=new Ze({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),Et:e=>t.qr.get(e)||null}),mi(t).start(),t.Wr.Or()}function Yr(t){return Zr(t)&&!mi(t).ar()&&t.qr.size>0}function Zr(t){return 0===v(t).Kr.size}function ti(t){t.Gr=void 0}async function ei(t){t.qr.forEach(((e,n)=>{Jr(t,e)}))}async function ni(t,e){ti(t),Yr(t)?(t.Wr.Lr(e),Xr(t)):t.Wr.set("Unknown")}async function ri(t,e,n){if(t.Wr.set("Online"),e instanceof Xe&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const r of e.targetIds)t.qr.has(r)&&(await t.remoteSyncer.rejectListen(r,n),t.qr.delete(r),t.Gr.removeTarget(r))}(t,e)}catch(n){d("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await ii(t,n)}else if(e instanceof Je?t.Gr.rt(e):e instanceof Qe?t.Gr.ft(e):t.Gr.ct(e),!n.isEqual(L.min()))try{const e=await mr(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Gr._t(e);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const i=t.qr.get(r);i&&t.qr.set(r,i.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach((e=>{const n=t.qr.get(e);if(!n)return;t.qr.set(e,n.withResumeToken(B.EMPTY_BYTE_STRING,n.snapshotVersion)),Qr(t,e);const r=new tr(n.target,e,1,n.sequenceNumber);Jr(t,r)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){d("RemoteStore","Failed to raise snapshot:",e),await ii(t,e)}}async function ii(t,e,n){if(!Xn(e))throw e;t.Kr.add(1),await $r(t),t.Wr.set("Offline"),n||(n=()=>mr(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{d("RemoteStore","Retrying IndexedDB access"),await n(),t.Kr.delete(1),await Hr(t)}))}function si(t,e){return e().catch((n=>ii(t,n,e)))}async function oi(t){const e=v(t),n=gi(e);let r=e.Ur.length>0?e.Ur[e.Ur.length-1].batchId:-1;for(;ai(e);)try{const t=await gr(e.localStore,r);if(null===t){0===e.Ur.length&&n.lr();break}r=t.batchId,ci(e,t)}catch(t){await ii(e,t)}ui(e)&&hi(e)}function ai(t){return Zr(t)&&t.Ur.length<10}function ci(t,e){t.Ur.push(e);const n=gi(t);n.cr()&&n.Pr&&n.br(e.mutations)}function ui(t){return Zr(t)&&!gi(t).ar()&&t.Ur.length>0}function hi(t){gi(t).start()}async function li(t){gi(t).Sr()}async function di(t){const e=gi(t);for(const n of t.Ur)e.br(n.mutations)}async function fi(t,e,n){const r=t.Ur.shift(),i=Zn.from(r,e,n);await si(t,(()=>t.remoteSyncer.applySuccessfulWrite(i))),await oi(t)}async function pi(t,e){e&&gi(t).Pr&&await async function(t,e){if(function(t){switch(t){case w.OK:return g();case w.CANCELLED:case w.UNKNOWN:case w.DEADLINE_EXCEEDED:case w.RESOURCE_EXHAUSTED:case w.INTERNAL:case w.UNAVAILABLE:case w.UNAUTHENTICATED:return!1;case w.INVALID_ARGUMENT:case w.NOT_FOUND:case w.ALREADY_EXISTS:case w.PERMISSION_DENIED:case w.FAILED_PRECONDITION:case w.ABORTED:case w.OUT_OF_RANGE:case w.UNIMPLEMENTED:case w.DATA_LOSS:return!0;default:return g()}}(n=e.code)&&n!==w.ABORTED){const n=t.Ur.shift();gi(t).hr(),await si(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await oi(t)}var n}(t,e),ui(t)&&hi(t)}function mi(t){return t.zr||(t.zr=function(t,e,n){const r=v(t);return r.Cr(),new jr(e,r.nr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:ei.bind(null,t),Ci:ni.bind(null,t),Tr:ri.bind(null,t)}),t.jr.push((async e=>{e?(t.zr.hr(),Yr(t)?Xr(t):t.Wr.set("Unknown")):(await t.zr.stop(),ti(t))}))),t.zr}function gi(t){return t.Hr||(t.Hr=function(t,e,n){const r=v(t);return r.Cr(),new qr(e,r.nr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:li.bind(null,t),Ci:pi.bind(null,t),Vr:di.bind(null,t),vr:fi.bind(null,t)}),t.jr.push((async e=>{e?(t.Hr.hr(),await oi(t)):(await t.Hr.stop(),t.Ur.length>0&&(d("RemoteStore",`Stopping write stream with ${t.Ur.length} pending writes`),t.Ur=[]))}))),t.Hr}class yi{constructor(t,e,n,r,i){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=r,this.removalCallback=i,this.deferred=new b,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,r,i){const s=Date.now()+n,o=new yi(t,e,s,r,i);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new _(w.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function vi(t,e){if(f("AsyncQueue",`${e}: ${t}`),Xn(t))return new _(w.UNAVAILABLE,`${e}: ${t}`);throw t}class wi{constructor(t){this.comparator=t?(e,n)=>t(e,n)||Y.comparator(e.key,n.key):(t,e)=>Y.comparator(t.key,e.key),this.keyedMap=qe(),this.sortedSet=new Le(this.comparator)}static emptySet(t){return new wi(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof wi))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(!t.isEqual(r))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new wi;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class _i{constructor(){this.Jr=new Le(Y.comparator)}track(t){const e=t.doc.key,n=this.Jr.get(e);n?0!==t.type&&3===n.type?this.Jr=this.Jr.insert(e,t):3===t.type&&1!==n.type?this.Jr=this.Jr.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Jr=this.Jr.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Jr=this.Jr.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Jr=this.Jr.remove(e):1===t.type&&2===n.type?this.Jr=this.Jr.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Jr=this.Jr.insert(e,{type:2,doc:t.doc}):g():this.Jr=this.Jr.insert(e,t)}Yr(){const t=[];return this.Jr.inorderTraversal(((e,n)=>{t.push(n)})),t}}class bi{constructor(t,e,n,r,i,s,o,a){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=i,this.fromCache=s,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(t,e,n,r){const i=[];return e.forEach((t=>{i.push({type:0,doc:t})})),new bi(t,e,wi.emptySet(e),i,n,r,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&Ht(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class Ii{constructor(){this.Xr=void 0,this.listeners=[]}}class Ti{constructor(){this.queries=new cr((t=>$t(t)),Ht),this.onlineState="Unknown",this.Zr=new Set}}function Ei(t,e){const n=v(t);let r=!1;for(const t of e){const e=t.query,i=n.queries.get(e);if(i){for(const e of i.listeners)e.no(t)&&(r=!0);i.Xr=t}}r&&ki(n)}function Si(t,e,n){const r=v(t),i=r.queries.get(e);if(i)for(const t of i.listeners)t.onError(n);r.queries.delete(e)}function ki(t){t.Zr.forEach((t=>{t.next()}))}class Ai{constructor(t,e,n){this.query=t,this.so=e,this.io=!1,this.ro=null,this.onlineState="Unknown",this.options=n||{}}no(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new bi(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0)}let e=!1;return this.io?this.oo(t)&&(this.so.next(t),e=!0):this.ao(t,this.onlineState)&&(this.co(t),e=!0),this.ro=t,e}onError(t){this.so.error(t)}eo(t){this.onlineState=t;let e=!1;return this.ro&&!this.io&&this.ao(this.ro,t)&&(this.co(this.ro),e=!0),e}ao(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return!(this.options.uo&&n||t.docs.isEmpty()&&"Offline"!==e)}oo(t){if(t.docChanges.length>0)return!0;const e=this.ro&&this.ro.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}co(t){t=bi.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache),this.io=!0,this.so.next(t)}}class Ni{constructor(t){this.key=t}}class Ci{constructor(t){this.key=t}}class Ri{constructor(t,e){this.query=t,this._o=e,this.mo=null,this.current=!1,this.yo=Ke(),this.mutatedKeys=Ke(),this.po=Jt(t),this.Eo=new wi(this.po)}get To(){return this._o}Io(t,e){const n=e?e.Ao:new _i,r=e?e.Eo:this.Eo;let i=e?e.mutatedKeys:this.mutatedKeys,s=r,o=!1;const a=Ft(this.query)&&r.size===this.query.limit?r.last():null,c=Vt(this.query)&&r.size===this.query.limit?r.first():null;if(t.inorderTraversal(((t,e)=>{const u=r.get(t),h=Wt(this.query,e)?e:null,l=!!u&&this.mutatedKeys.has(u.key),d=!!h&&(h.hasLocalMutations||this.mutatedKeys.has(h.key)&&h.hasCommittedMutations);let f=!1;u&&h?u.data.isEqual(h.data)?l!==d&&(n.track({type:3,doc:h}),f=!0):this.Ro(u,h)||(n.track({type:2,doc:h}),f=!0,(a&&this.po(h,a)>0||c&&this.po(h,c)<0)&&(o=!0)):!u&&h?(n.track({type:0,doc:h}),f=!0):u&&!h&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(h?(s=s.add(h),i=d?i.add(t):i.delete(t)):(s=s.delete(t),i=i.delete(t)))})),Ft(this.query)||Vt(this.query))for(;s.size>this.query.limit;){const t=Ft(this.query)?s.last():s.first();s=s.delete(t.key),i=i.delete(t.key),n.track({type:1,doc:t})}return{Eo:s,Ao:n,Ln:o,mutatedKeys:i}}Ro(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const r=this.Eo;this.Eo=t.Eo,this.mutatedKeys=t.mutatedKeys;const i=t.Ao.Yr();i.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return g()}};return n(t)-n(e)}(t.type,e.type)||this.po(t.doc,e.doc))),this.Po(n);const s=e?this.bo():[],o=0===this.yo.size&&this.current?1:0,a=o!==this.mo;return this.mo=o,0!==i.length||a?{snapshot:new bi(this.query,t.Eo,r,i,t.mutatedKeys,0===o,a,!1),vo:s}:{vo:s}}eo(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({Eo:this.Eo,Ao:new _i,mutatedKeys:this.mutatedKeys,Ln:!1},!1)):{vo:[]}}Vo(t){return!this._o.has(t)&&!!this.Eo.has(t)&&!this.Eo.get(t).hasLocalMutations}Po(t){t&&(t.addedDocuments.forEach((t=>this._o=this._o.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this._o=this._o.delete(t))),this.current=t.current)}bo(){if(!this.current)return[];const t=this.yo;this.yo=Ke(),this.Eo.forEach((t=>{this.Vo(t.key)&&(this.yo=this.yo.add(t.key))}));const e=[];return t.forEach((t=>{this.yo.has(t)||e.push(new Ci(t))})),this.yo.forEach((n=>{t.has(n)||e.push(new Ni(n))})),e}So(t){this._o=t.Gn,this.yo=Ke();const e=this.Io(t.documents);return this.applyChanges(e,!0)}Do(){return bi.fromInitialDocuments(this.query,this.Eo,this.mutatedKeys,0===this.mo)}}class Oi{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Di{constructor(t){this.key=t,this.Co=!1}}class Li{constructor(t,e,n,r,i,s){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=r,this.currentUser=i,this.maxConcurrentLimboResolutions=s,this.No={},this.xo=new cr((t=>$t(t)),Ht),this.ko=new Map,this.$o=new Set,this.Oo=new Le(Y.comparator),this.Fo=new Map,this.Mo=new _r,this.Lo={},this.Bo=new Map,this.Uo=or.ie(),this.onlineState="Unknown",this.qo=void 0}get isPrimaryClient(){return!0===this.qo}}async function Pi(t,e){const n=function(t){const e=v(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Mi.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Qi.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=Fi.bind(null,e),e.No.Tr=Ei.bind(null,e.eventManager),e.No.jo=Si.bind(null,e.eventManager),e}(t);let r,i;const s=n.xo.get(e);if(s)r=s.targetId,n.sharedClientState.addLocalQueryTarget(r),i=s.view.Do();else{const t=await function(t,e){const n=v(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let r;return n.ze.getTargetData(t,e).next((i=>i?(r=i,Qn.resolve(r)):n.ze.allocateTargetId(t).next((i=>(r=new tr(e,i,0,t.currentSequenceNumber),n.ze.addTargetData(t,r).next((()=>r)))))))})).then((t=>{const r=n.Un.get(t.targetId);return(null===r||t.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.Un=n.Un.insert(t.targetId,t),n.qn.set(e,t.targetId)),t}))}(n.localStore,Kt(e)),s=n.sharedClientState.addLocalQueryTarget(t.targetId);r=t.targetId,i=await async function(t,e,n,r){t.Ko=(e,n,r)=>async function(t,e,n,r){let i=e.view.Io(n);i.Ln&&(i=await vr(t.localStore,e.query,!1).then((({documents:t})=>e.view.Io(t,i))));const s=r&&r.targetChanges.get(e.targetId),o=e.view.applyChanges(i,t.isPrimaryClient,s);return Hi(t,e.targetId,o.vo),o.snapshot}(t,e,n,r);const i=await vr(t.localStore,e,!0),s=new Ri(e,i.Gn),o=s.Io(i.documents),a=We.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==t.onlineState),c=s.applyChanges(o,t.isPrimaryClient,a);Hi(t,n,c.vo);const u=new Oi(e,n,s);return t.xo.set(e,u),t.ko.has(n)?t.ko.get(n).push(e):t.ko.set(n,[e]),c.snapshot}(n,e,r,"current"===s),n.isPrimaryClient&&Gr(n.remoteStore,t)}return i}async function xi(t,e){const n=v(t),r=n.xo.get(e),i=n.ko.get(r.targetId);if(i.length>1)return n.ko.set(r.targetId,i.filter((t=>!Ht(t,e)))),void n.xo.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(r.targetId),n.sharedClientState.isActiveQueryTarget(r.targetId)||await yr(n.localStore,r.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(r.targetId),Wr(n.remoteStore,r.targetId),zi(n,r.targetId)})).catch(ar)):(zi(n,r.targetId),await yr(n.localStore,r.targetId,!0))}async function Mi(t,e){const n=v(t);try{const t=await function(t,e){const n=v(t),r=e.snapshotVersion;let i=n.Un;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const s=n.jn.newChangeBuffer({trackRemovals:!0});i=n.Un;const o=[];e.targetChanges.forEach(((e,s)=>{const a=i.get(s);if(!a)return;o.push(n.ze.removeMatchingKeys(t,e.removedDocuments,s).next((()=>n.ze.addMatchingKeys(t,e.addedDocuments,s))));const c=e.resumeToken;if(c.approximateByteSize()>0){const u=a.withResumeToken(c,r).withSequenceNumber(t.currentSequenceNumber);i=i.insert(s,u),function(t,e,n){return y(e.resumeToken.approximateByteSize()>0),0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(a,u,e)&&o.push(n.ze.updateTargetData(t,u))}}));let a=Ve();if(e.documentUpdates.forEach(((r,i)=>{e.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,r))})),o.push(function(t,e,n,r,i){let s=Ke();return n.forEach((t=>s=s.add(t))),e.getEntries(t,s).next((t=>{let s=Ve();return n.forEach(((n,o)=>{const a=t.get(n),c=(null==i?void 0:i.get(n))||r;o.isNoDocument()&&o.version.isEqual(L.min())?(e.removeEntry(n,c),s=s.insert(n,o)):!a.isValidDocument()||o.version.compareTo(a.version)>0||0===o.version.compareTo(a.version)&&a.hasPendingWrites?(e.addEntry(o,c),s=s.insert(n,o)):d("LocalStore","Ignoring outdated watch update for ",n,". Current version:",a.version," Watch version:",o.version)})),s}))}(t,s,e.documentUpdates,r,void 0).next((t=>{a=t}))),!r.isEqual(L.min())){const e=n.ze.getLastRemoteSnapshotVersion(t).next((e=>n.ze.setTargetsMetadata(t,t.currentSequenceNumber,r)));o.push(e)}return Qn.waitFor(o).next((()=>s.apply(t))).next((()=>n.Qn.vn(t,a))).next((()=>a))})).then((t=>(n.Un=i,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const r=n.Fo.get(e);r&&(y(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?r.Co=!0:t.modifiedDocuments.size>0?y(r.Co):t.removedDocuments.size>0&&(y(r.Co),r.Co=!1))})),await Wi(n,t,e)}catch(t){await ar(t)}}function Ui(t,e,n){const r=v(t);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const t=[];r.xo.forEach(((n,r)=>{const i=r.view.eo(e);i.snapshot&&t.push(i.snapshot)})),function(t,e){const n=v(t);n.onlineState=e;let r=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.eo(e)&&(r=!0)})),r&&ki(n)}(r.eventManager,e),t.length&&r.No.Tr(t),r.onlineState=e,r.isPrimaryClient&&r.sharedClientState.setOnlineState(e)}}async function Fi(t,e,n){const r=v(t);r.sharedClientState.updateQueryState(e,"rejected",n);const i=r.Fo.get(e),s=i&&i.key;if(s){let t=new Le(Y.comparator);t=t.insert(s,mt.newNoDocument(s,L.min()));const n=Ke().add(s),i=new Ge(L.min(),new Map,new Me(R),t,n);await Mi(r,i),r.Oo=r.Oo.remove(s),r.Fo.delete(e),Gi(r)}else await yr(r.localStore,e,!1).then((()=>zi(r,e,n))).catch(ar)}async function Vi(t,e){const n=v(t),r=e.batch.batchId;try{const t=await function(t,e){const n=v(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const r=e.batch.keys(),i=n.jn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,r){const i=n.batch,s=i.keys();let o=Qn.resolve();return s.forEach((t=>{o=o.next((()=>r.getEntry(e,t))).next((e=>{const s=n.docVersions.get(t);y(null!==s),e.version.compareTo(s)<0&&(i.applyToRemoteDocument(e,n),e.isValidDocument()&&r.addEntry(e,n.commitVersion))}))})),o.next((()=>t.In.removeMutationBatch(e,i)))}(n,t,e,i).next((()=>i.apply(t))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,r)))}))}(n.localStore,e);Bi(n,r,null),qi(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Wi(n,t)}catch(t){await ar(t)}}async function ji(t,e,n){const r=v(t);try{const t=await function(t,e){const n=v(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let r;return n.In.lookupMutationBatch(t,e).next((e=>(y(null!==e),r=e.keys(),n.In.removeMutationBatch(t,e)))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,r)))}))}(r.localStore,e);Bi(r,e,n),qi(r,e),r.sharedClientState.updateMutationState(e,"rejected",n),await Wi(r,t)}catch(n){await ar(n)}}function qi(t,e){(t.Bo.get(e)||[]).forEach((t=>{t.resolve()})),t.Bo.delete(e)}function Bi(t,e,n){const r=v(t);let i=r.Lo[r.currentUser.toKey()];if(i){const t=i.get(e);t&&(n?t.reject(n):t.resolve(),i=i.remove(e)),r.Lo[r.currentUser.toKey()]=i}}function zi(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const r of t.ko.get(e))t.xo.delete(r),n&&t.No.jo(r,n);t.ko.delete(e),t.isPrimaryClient&&t.Mo.cs(e).forEach((e=>{t.Mo.containsKey(e)||Ki(t,e)}))}function Ki(t,e){t.$o.delete(e.path.canonicalString());const n=t.Oo.get(e);null!==n&&(Wr(t.remoteStore,n),t.Oo=t.Oo.remove(e),t.Fo.delete(n),Gi(t))}function Hi(t,e,n){for(const r of n)r instanceof Ni?(t.Mo.addReference(r.key,e),$i(t,r)):r instanceof Ci?(d("SyncEngine","Document no longer in limbo: "+r.key),t.Mo.removeReference(r.key,e),t.Mo.containsKey(r.key)||Ki(t,r.key)):g()}function $i(t,e){const n=e.key,r=n.path.canonicalString();t.Oo.get(n)||t.$o.has(r)||(d("SyncEngine","New document in limbo: "+n),t.$o.add(r),Gi(t))}function Gi(t){for(;t.$o.size>0&&t.Oo.size<t.maxConcurrentLimboResolutions;){const e=t.$o.values().next().value;t.$o.delete(e);const n=new Y(F.fromString(e)),r=t.Uo.next();t.Fo.set(r,new Di(n)),t.Oo=t.Oo.insert(n,r),Gr(t.remoteStore,new tr(Kt(Ut(n.path)),r,2,A.T))}}async function Wi(t,e,n){const r=v(t),i=[],s=[],o=[];r.xo.isEmpty()||(r.xo.forEach(((t,a)=>{o.push(r.Ko(a,e,n).then((t=>{if(t){r.isPrimaryClient&&r.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),i.push(t);const e=lr.kn(a.targetId,t);s.push(e)}})))})),await Promise.all(o),r.No.Tr(i),await async function(t,e){const n=v(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>Qn.forEach(e,(e=>Qn.forEach(e.Nn,(r=>n.persistence.referenceDelegate.addReference(t,e.targetId,r))).next((()=>Qn.forEach(e.xn,(r=>n.persistence.referenceDelegate.removeReference(t,e.targetId,r)))))))))}catch(t){if(!Xn(t))throw t;d("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Un.get(e),r=t.snapshotVersion,i=t.withLastLimboFreeSnapshotVersion(r);n.Un=n.Un.insert(e,i)}}}(r.localStore,s))}async function Ji(t,e){const n=v(t);if(!n.currentUser.isEqual(e)){d("SyncEngine","User change. New user:",e.toKey());const t=await pr(n.localStore,e);n.currentUser=e,function(t){t.Bo.forEach((t=>{t.forEach((t=>{t.reject(new _(w.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Bo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Wi(n,t.Wn)}}function Qi(t,e){const n=v(t),r=n.Fo.get(e);if(r&&r.Co)return Ke().add(r.key);{let t=Ke();const r=n.ko.get(e);if(!r)return t;for(const e of r){const r=n.xo.get(e);t=t.unionWith(r.view.To)}return t}}function Xi(t){const e=v(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=Vi.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=ji.bind(null,e),e}class Yi{constructor(){this.synchronizeTabs=!1}async initialize(t){this.N=Ur(t.databaseInfo.databaseId),this.sharedClientState=this.Wo(t),this.persistence=this.Go(t),await this.persistence.start(),this.gcScheduler=this.zo(t),this.localStore=this.Ho(t)}zo(t){return null}Ho(t){return function(t,e,n,r){return new fr(t,e,n,r)}(this.persistence,new dr,t.initialUser,this.N)}Go(t){return new kr(Nr.Ns,this.N)}Wo(t){return new Rr}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class Zi{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>Ui(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Ji.bind(null,this.syncEngine),await async function(t,e){const n=v(t);e?(n.Kr.delete(2),await Hr(n)):e||(n.Kr.add(2),await $r(n),n.Wr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new Ti}createDatastore(t){const e=Ur(t.databaseInfo.databaseId),n=(r=t.databaseInfo,new xr(r));var r;return function(t,e,n){return new Br(t,e,n)}(t.credentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,r=t.asyncQueue,i=t=>Ui(this.syncEngine,t,0),s=Dr.Pt()?new Dr:new Or,new Kr(e,n,r,i,s);var e,n,r,i,s}createSyncEngine(t,e){return function(t,e,n,r,i,s,o){const a=new Li(t,e,n,r,i,s);return o&&(a.qo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=v(t);d("RemoteStore","RemoteStore shutting down."),e.Kr.add(5),await $r(e),e.Qr.shutdown(),e.Wr.set("Unknown")}(this.remoteStore)}}class ts{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.Yo(this.observer.next,t)}error(t){this.observer.error?this.Yo(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)}Xo(){this.muted=!0}Yo(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class es{constructor(t,e,n){this.credentials=t,this.asyncQueue=e,this.databaseInfo=n,this.user=c.UNAUTHENTICATED,this.clientId=C.I(),this.credentialListener=()=>Promise.resolve(),this.credentials.start(e,(async t=>{d("FirestoreClient","Received user=",t.uid),await this.credentialListener(t),this.user=t}))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,credentials:this.credentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.credentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new _(w.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new b;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.credentials.shutdown(),t.resolve()}catch(e){const n=vi(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function ns(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(d("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),d("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let r=n.initialUser;t.setCredentialChangeListener((async t=>{r.isEqual(t)||(await pr(e.localStore,t),r=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new Yi)),t.offlineComponents}(t);d("FirestoreClient","Initializing OnlineComponentProvider");const r=await t.getConfiguration();await e.initialize(n,r),t.setCredentialChangeListener((t=>async function(t,e){const n=v(t);n.asyncQueue.verifyOperationInProgress(),d("RemoteStore","RemoteStore received new credentials");const r=Zr(n);n.Kr.add(3),await $r(n),r&&n.Wr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Kr.delete(3),await Hr(n)}(e.remoteStore,t))),t.onlineComponents=e}async function rs(t){return t.onlineComponents||(d("FirestoreClient","Using default OnlineComponentProvider"),await ns(t,new Zi)),t.onlineComponents}async function is(t){const e=await rs(t),n=e.eventManager;return n.onListen=Pi.bind(null,e.syncEngine),n.onUnlisten=xi.bind(null,e.syncEngine),n}function ss(t,e,n={}){const r=new b;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,r,i){const s=new ts({next:n=>{e.enqueueAndForget((()=>async function(t,e){const n=v(t),r=e.query;let i=!1;const s=n.queries.get(r);if(s){const t=s.listeners.indexOf(e);t>=0&&(s.listeners.splice(t,1),i=0===s.listeners.length)}if(i)return n.queries.delete(r),n.onUnlisten(r)}(t,o))),n.fromCache&&"server"===r.source?i.reject(new _(w.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:t=>i.reject(t)}),o=new Ai(n,s,{includeMetadataChanges:!0,uo:!0});return async function(t,e){const n=v(t),r=e.query;let i=!1,s=n.queries.get(r);if(s||(i=!0,s=new Ii),i)try{s.Xr=await n.onListen(r)}catch(t){const n=vi(t,`Initialization of query '${Gt(e.query)}' failed`);return void e.onError(n)}n.queries.set(r,s),s.listeners.push(e),e.eo(n.onlineState),s.Xr&&e.no(s.Xr)&&ki(n)}(t,o)}(await is(t),t.asyncQueue,e,n,r))),r.promise}class os{constructor(t,e,n,r,i,s,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=r,this.ssl=i,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class as{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof as&&t.projectId===this.projectId&&t.database===this.database}}const cs=new Map;function us(t,e,n){if(!n)throw new _(w.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function hs(t){if(!Y.isDocumentKey(t))throw new _(w.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function ls(t){if(Y.isDocumentKey(t))throw new _(w.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function ds(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){if(t.constructor){const e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":g()}function fs(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new _(w.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=ds(t);throw new _(w.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class ps{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new _(w.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new _(w.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,r){if(!0===e&&!0===r)throw new _(w.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class ms{constructor(t,e){this._credentials=e,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new ps({}),this._settingsFrozen=!1,t instanceof as?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new _(w.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new as(t.options.projectId)}(t))}get app(){if(!this._app)throw new _(w.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new _(w.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new ps(t),void 0!==t.credentials&&(this._credentials=function(t){if(!t)return new T;switch(t.type){case"gapi":const e=t.client;return y(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new k(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new _(w.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=cs.get(t);e&&(d("ComponentProvider","Removing Datastore"),cs.delete(t),e.terminate())}(this),Promise.resolve()}}class gs{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new vs(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new gs(this.firestore,t,this._key)}}class ys{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new ys(this.firestore,t,this._query)}}class vs extends ys{constructor(t,e,n){super(t,e,Ut(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new gs(this.firestore,null,new Y(t))}withConverter(t){return new vs(this.firestore,t,this._path)}}function ws(t,e,...n){if(t=(0,o.Ku)(t),us("collection","path",e),t instanceof ms){const r=F.fromString(e,...n);return ls(r),new vs(t,null,r)}{if(!(t instanceof gs||t instanceof vs))throw new _(w.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=F.fromString(t.path,...n).child(F.fromString(e));return ls(r),new vs(t.firestore,null,r)}}function _s(t,e,...n){if(t=(0,o.Ku)(t),1===arguments.length&&(e=C.I()),us("doc","path",e),t instanceof ms){const r=F.fromString(e,...n);return hs(r),new gs(t,null,new Y(r))}{if(!(t instanceof gs||t instanceof vs))throw new _(w.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=t._path.child(F.fromString(e,...n));return hs(r),new gs(t.firestore,t instanceof vs?t.converter:null,new Y(r))}}class bs{constructor(){this.fa=Promise.resolve(),this.da=[],this.wa=!1,this._a=[],this.ma=null,this.ga=!1,this.ya=!1,this.pa=[],this.rr=new Fr(this,"async_queue_retry"),this.Ea=()=>{const t=Mr();t&&d("AsyncQueue","Visibility state changed to "+t.visibilityState),this.rr.tr()};const t=Mr();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ea)}get isShuttingDown(){return this.wa}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Ta(),this.Ia(t)}enterRestrictedMode(t){if(!this.wa){this.wa=!0,this.ya=t||!1;const e=Mr();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ea)}}enqueue(t){if(this.Ta(),this.wa)return new Promise((()=>{}));const e=new b;return this.Ia((()=>this.wa&&this.ya?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.da.push(t),this.Aa())))}async Aa(){if(0!==this.da.length){try{await this.da[0](),this.da.shift(),this.rr.reset()}catch(t){if(!Xn(t))throw t;d("AsyncQueue","Operation failed with retryable error: "+t)}this.da.length>0&&this.rr.Xi((()=>this.Aa()))}}Ia(t){const e=this.fa.then((()=>(this.ga=!0,t().catch((t=>{throw this.ma=t,this.ga=!1,f("INTERNAL UNHANDLED ERROR: ",function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((t=>(this.ga=!1,t))))));return this.fa=e,e}enqueueAfterDelay(t,e,n){this.Ta(),this.pa.indexOf(t)>-1&&(e=0);const r=yi.createAndSchedule(this,t,e,n,(t=>this.Ra(t)));return this._a.push(r),r}Ta(){this.ma&&g()}verifyOperationInProgress(){}async Pa(){let t;do{t=this.fa,await t}while(t!==this.fa)}ba(t){for(const e of this._a)if(e.timerId===t)return!0;return!1}va(t){return this.Pa().then((()=>{this._a.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this._a)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Pa()}))}Va(t){this.pa.push(t)}Ra(t){const e=this._a.indexOf(t);this._a.splice(e,1)}}class Is extends ms{constructor(t,e){super(t,e),this.type="firestore",this._queue=new bs,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Ss(this),this._firestoreClient.terminate()}}function Ts(t=(0,r.Sx)()){return(0,r.j6)(t,"firestore").getImmediate()}function Es(t){return t._firestoreClient||Ss(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function Ss(t){var e;const n=t._freezeSettings(),r=function(t,e,n,r){return new os(t,e,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,r.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new es(t._credentials,t._queue,r)}class ks{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new _(w.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new j(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class As{constructor(t){this._byteString=t}static fromBase64String(t){try{return new As(B.fromBase64String(t))}catch(t){throw new _(w.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new As(B.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class Ns{constructor(t){this._methodName=t}}class Cs{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new _(w.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new _(w.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return R(this._lat,t._lat)||R(this._long,t._long)}}const Rs=/^__.*__$/;class Os{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return new Te(t,this.data,this.fieldMask,e,this.fieldTransforms)}}function Ds(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw g()}}class Ls{constructor(t,e,n,r,i,s){this.settings=t,this.databaseId=e,this.N=n,this.ignoreUndefinedProperties=r,void 0===i&&this.Sa(),this.fieldTransforms=i||[],this.fieldMask=s||[]}get path(){return this.settings.path}get Da(){return this.settings.Da}Ca(t){return new Ls(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.N,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Na(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Ca({path:n,xa:!1});return r.ka(t),r}$a(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Ca({path:n,xa:!1});return r.Sa(),r}Oa(t){return this.Ca({path:void 0,xa:!0})}Fa(t){return Ks(t,this.settings.methodName,this.settings.Ma||!1,this.path,this.settings.La)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}Sa(){if(this.path)for(let t=0;t<this.path.length;t++)this.ka(this.path.get(t))}ka(t){if(0===t.length)throw this.Fa("Document fields must not be empty");if(Ds(this.Da)&&Rs.test(t))throw this.Fa('Document fields cannot begin and end with "__"')}}class Ps{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.N=n||Ur(t)}Ba(t,e,n,r=!1){return new Ls({Da:t,methodName:e,La:n,path:j.emptyPath(),xa:!1,Ma:r},this.databaseId,this.N,this.ignoreUndefinedProperties)}}function xs(t){const e=t._freezeSettings(),n=Ur(t._databaseId);return new Ps(t._databaseId,!!e.ignoreUndefinedProperties,n)}class Ms extends Ns{_toFieldTransform(t){if(2!==t.Da)throw 1===t.Da?t.Fa(`${this._methodName}() can only appear at the top level of your update data`):t.Fa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return t.fieldMask.push(t.path),null}isEqual(t){return t instanceof Ms}}class Us extends Ns{_toFieldTransform(t){return new de(t.path,new ie)}isEqual(t){return t instanceof Us}}function Fs(t,e){if(Vs(t=(0,o.Ku)(t)))return js("Unsupported field value:",e,t),function(t,e){const n={};return M(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):x(t,((t,r)=>{const i=Fs(r,e.Na(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}(t,e);if(t instanceof Ns)return function(t,e){if(!Ds(e.Da))throw e.Fa(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Fa(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.xa&&4!==e.Da)throw e.Fa("Nested arrays are not supported");return function(t,e){const n=[];let r=0;for(const i of t){let t=Fs(i,e.Oa(r));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=(0,o.Ku)(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return Zt(e.N,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=D.fromDate(t);return{timestampValue:on(e.N,n)}}if(t instanceof D){const n=new D(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:on(e.N,n)}}if(t instanceof Cs)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof As)return{bytesValue:an(e.N,t._byteString)};if(t instanceof gs){const n=e.databaseId,r=t.firestore._databaseId;if(!r.isEqual(n))throw e.Fa(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:hn(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Fa(`Unsupported field value: ${ds(t)}`)}(t,e)}function Vs(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof D||t instanceof Cs||t instanceof As||t instanceof gs||t instanceof Ns)}function js(t,e,n){if(!Vs(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const r=ds(n);throw"an object"===r?e.Fa(t+" a custom object"):e.Fa(t+" "+r)}}function qs(t,e,n){if((e=(0,o.Ku)(e))instanceof ks)return e._internalPath;if("string"==typeof e)return zs(t,e);throw Ks("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const Bs=new RegExp("[~\\*/\\[\\]]");function zs(t,e,n){if(e.search(Bs)>=0)throw Ks(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new ks(...e.split("."))._internalPath}catch(r){throw Ks(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function Ks(t,e,n,r,i){const s=r&&!r.isEmpty(),o=void 0!==i;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${r}`),o&&(c+=` in document ${i}`),c+=")"),new _(w.INVALID_ARGUMENT,a+t+c)}function Hs(t,e){return t.some((t=>t.isEqual(e)))}class $s{constructor(t,e,n,r,i){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=r,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new gs(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new Gs(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(Ws("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class Gs extends $s{data(){return super.data()}}function Ws(t,e){return"string"==typeof e?zs(t,e):e instanceof ks?e._internalPath:e._delegate._internalPath}class Js{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class Qs extends $s{constructor(t,e,n,r,i,s){super(t,e,n,r,s),this._firestore=t,this._firestoreImpl=t,this.metadata=i}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new Xs(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(Ws("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class Xs extends Qs{data(t={}){return super.data(t)}}class Ys{constructor(t,e,n,r){this._firestore=t,this._userDataWriter=e,this._snapshot=r,this.metadata=new Js(r.hasPendingWrites,r.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new Xs(this._firestore,this._userDataWriter,n.key,n,new Js(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new _(w.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>({type:"added",doc:new Xs(t._firestore,t._userDataWriter,n.doc.key,n.doc,new Js(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter),oldIndex:-1,newIndex:e++})))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const r=new Xs(t._firestore,t._userDataWriter,e.doc.key,e.doc,new Js(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let i=-1,s=-1;return 0!==e.type&&(i=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),s=n.indexOf(e.doc.key)),{type:Zs(e.type),doc:r,oldIndex:i,newIndex:s}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function Zs(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return g()}}class to{}function eo(t,...e){for(const n of e)t=n._apply(t);return t}class no extends to{constructor(t,e,n){super(),this.Ka=t,this.ja=e,this.Qa=n,this.type="where"}_apply(t){const e=xs(t.firestore),n=function(t,e,n,r,i,s,o){let a;if(i.isKeyField()){if("array-contains"===s||"array-contains-any"===s)throw new _(w.INVALID_ARGUMENT,`Invalid Query. You can't perform '${s}' queries on FieldPath.documentId().`);if("in"===s||"not-in"===s){so(o,s);const e=[];for(const n of o)e.push(io(r,t,n));a={arrayValue:{values:e}}}else a=io(r,t,o)}else"in"!==s&&"not-in"!==s&&"array-contains-any"!==s||so(o,s),a=function(t,e,n,r=!1){return Fs(n,t.Ba(r?4:3,e))}(n,"where",o,"in"===s||"not-in"===s);const c=bt.create(i,s,a);return function(t,e){if(e.v()){const n=qt(t);if(null!==n&&!n.isEqual(e.field))throw new _(w.INVALID_ARGUMENT,`Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);const r=jt(t);null!==r&&function(t,e,n){if(!n.isEqual(e))throw new _(w.INVALID_ARGUMENT,`Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`)}(0,e.field,r)}const n=function(t,e){for(const n of t.filters)if(e.indexOf(n.op)>=0)return n.op;return null}(t,function(t){switch(t){case"!=":return["!=","not-in"];case"array-contains":return["array-contains","array-contains-any","not-in"];case"in":return["array-contains-any","in","not-in"];case"array-contains-any":return["array-contains","array-contains-any","in","not-in"];case"not-in":return["array-contains","array-contains-any","in","not-in","!="];default:return[]}}(e.op));if(null!==n)throw n===e.op?new _(w.INVALID_ARGUMENT,`Invalid query. You cannot use more than one '${e.op.toString()}' filter.`):new _(w.INVALID_ARGUMENT,`Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`)}(t,c),c}(t._query,0,e,t.firestore._databaseId,this.Ka,this.ja,this.Qa);return new ys(t.firestore,t.converter,function(t,e){const n=t.filters.concat([e]);return new Mt(t.path,t.collectionGroup,t.explicitOrderBy.slice(),n,t.limit,t.limitType,t.startAt,t.endAt)}(t._query,n))}}function ro(t,e,n){const r=e,i=Ws("where",t);return new no(i,r,n)}function io(t,e,n){if("string"==typeof(n=(0,o.Ku)(n))){if(""===n)throw new _(w.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!Bt(e)&&-1!==n.indexOf("/"))throw new _(w.INVALID_ARGUMENT,`Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);const r=e.path.child(F.fromString(n));if(!Y.isDocumentKey(r))throw new _(w.INVALID_ARGUMENT,`Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);return ot(t,new Y(r))}if(n instanceof gs)return ot(t,n._key);throw new _(w.INVALID_ARGUMENT,`Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ${ds(n)}.`)}function so(t,e){if(!Array.isArray(t)||0===t.length)throw new _(w.INVALID_ARGUMENT,`Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);if(t.length>10)throw new _(w.INVALID_ARGUMENT,`Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`)}class oo{convertValue(t,e="none"){switch(Z(t)){case 0:return null;case 1:return t.booleanValue;case 2:return H(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes($(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw g()}}convertObject(t,e){const n={};return x(t.fields,((t,r)=>{n[t]=this.convertValue(r,e)})),n}convertGeoPoint(t){return new Cs(H(t.latitude),H(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=W(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp(J(t));default:return null}}convertTimestamp(t){const e=K(t);return new D(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=F.fromString(t);y(On(n));const r=new as(n.get(1),n.get(3)),i=new Y(n.popFirst(5));return r.isEqual(e)||f(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),i}}class ao extends oo{constructor(t){super(),this.firestore=t}convertBytes(t){return new As(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new gs(this.firestore,null,e)}}function co(t){t=fs(t,ys);const e=fs(t.firestore,Is),n=Es(e),r=new ao(e);return function(t){if(Vt(t)&&0===t.explicitOrderBy.length)throw new _(w.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(t._query),ss(n,t._query).then((n=>new Ys(e,r,t,n)))}function uo(t,e,n,...r){t=fs(t,gs);const i=fs(t.firestore,Is),s=xs(i);let a;return a="string"==typeof(e=(0,o.Ku)(e))||e instanceof ks?function(t,e,n,r,i,s){const a=t.Ba(1,e,n),c=[qs(e,r,n)],u=[i];if(s.length%2!=0)throw new _(w.INVALID_ARGUMENT,`Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let t=0;t<s.length;t+=2)c.push(qs(e,s[t])),u.push(s[t+1]);const h=[],l=ft.empty();for(let t=c.length-1;t>=0;--t)if(!Hs(h,c[t])){const e=c[t];let n=u[t];n=(0,o.Ku)(n);const r=a.$a(e);if(n instanceof Ms)h.push(e);else{const t=Fs(n,r);null!=t&&(h.push(e),l.set(e,t))}}const d=new q(h);return new Os(l,d,a.fieldTransforms)}(s,"updateDoc",t._key,e,n,r):function(t,e,n,r){const i=t.Ba(1,e,n);js("Data must be an object, but it was:",i,r);const s=[],a=ft.empty();x(r,((t,r)=>{const c=zs(e,t,n);r=(0,o.Ku)(r);const u=i.$a(c);if(r instanceof Ms)s.push(c);else{const t=Fs(r,u);null!=t&&(s.push(c),a.set(c,t))}}));const c=new q(s);return new Os(a,c,i.fieldTransforms)}(s,"updateDoc",t._key,e),lo(i,[a.toMutation(t._key,pe.exists(!0))])}function ho(t){return lo(fs(t.firestore,Is),[new Ae(t._key,pe.none())])}function lo(t,e){return function(t,e){const n=new b;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const r=Xi(t);try{const t=await function(t,e){const n=v(t),r=D.now(),i=e.reduce(((t,e)=>t.add(e.key)),Ke());let s;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Qn.bn(t,i).next((i=>{s=i;const o=[];for(const t of e){const e=we(t,s.get(t.key));null!=e&&o.push(new Te(t.key,e,pt(e.value.mapValue),pe.exists(!0)))}return n.In.addMutationBatch(t,r,o,e)})))).then((t=>(t.applyToLocalDocumentSet(s),{batchId:t.batchId,changes:s})))}(r.localStore,e);r.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let r=t.Lo[t.currentUser.toKey()];r||(r=new Le(R)),r=r.insert(e,n),t.Lo[t.currentUser.toKey()]=r}(r,t.batchId,n),await Wi(r,t.changes),await oi(r.remoteStore)}catch(t){const e=vi(t,"Failed to persist write");n.reject(e)}}(await function(t){return rs(t).then((t=>t.syncEngine))}(t),e,n))),n.promise}(Es(t),e)}function fo(){return new Us("serverTimestamp")}var po;po=r.MF,u=po,(0,r.om)(new i.uA("firestore",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),r=new Is(n,new E(t.getProvider("auth-internal")));return e=Object.assign({useFetchStreams:!0},e),r._setSettings(e),r}),"PUBLIC")),(0,r.KO)("@firebase/firestore","3.0.1",void 0)},923:(t,e,n)=>{n.d(e,{IG:()=>h,db:()=>u,j2:()=>c});var r=n(944),i=n(237),s=n(982),o=n(226);const a=(0,r.Wp)({apiKey:"AIzaSyDEbX-gQ6FwJD5oZGnaoiJu9qIaAG2LZ0M",authDomain:"upload-25f01.firebaseapp.com",projectId:"upload-25f01",storageBucket:"upload-25f01.firebasestorage.app",messagingSenderId:"97167487690",appId:"1:97167487690:web:88409aded0a1dd13f87a33",measurementId:"G-3Y94K1XCBK"}),c=(0,i.xI)(a),u=(0,s.aU)(a),h=(0,o.c7)(a)},944:(t,e,n)=>{n.d(e,{Wp:()=>r.Wp});var r=n(468);(0,r.KO)("firebase","9.0.1","app")},982:(t,e,n)=>{n.d(e,{GG:()=>r.GG,H9:()=>r.H9,O5:()=>r.O5,P:()=>r.P,_M:()=>r._M,aU:()=>r.aU,kd:()=>r.kd,mZ:()=>r.mZ,rJ:()=>r.rJ});var r=n(790)}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var s=e[r]={exports:{}};return t[r](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r=n(923),i=n(982),s=n(170),o=n(226),a=n(106);window.onload=s.u,document.addEventListener("DOMContentLoaded",(()=>{const t=JSON.parse(sessionStorage.getItem("userData"));if(!t||!t.phone)return alert("User session expired. Please log in again."),void(window.location.href="index.html");(0,a.S)()}));var c=n(237);document.addEventListener("DOMContentLoaded",(()=>{(0,a.S)(),document.addEventListener("DOMContentLoaded",(()=>{const t=JSON.parse(sessionStorage.getItem("userData")),e=document.getElementById("logout");if(console.log(e),!t)return alert("Session expired. Please log in again."),void(window.location.href="index.html");console.log("Logged-in user:",t.name);const n=document.querySelector(".user-home-page-username-display-in-navbar"),i=document.querySelector(".user-home-page-username-display-in-welcome-element");n.textContent=t.name,i.textContent="Hi "+t.name+",",e.addEventListener("click",(async()=>{try{await(0,c.CI)(r.j2),sessionStorage.clear(),window.location.href="/index.html"}catch(t){console.error("Logout error:",t),alert("Logout failed.")}}))}))})),async function(){const t=await async function(){const t=JSON.parse(sessionStorage.getItem("userData"));if(!t||!t.phone)return alert("User session expired. Please log in again."),void(window.location.href="index.html");const e=(0,i.P)((0,i.rJ)(r.db,"documents"),(0,i._M)("userPhoneNumber","==",t.phone)),n=await(0,i.GG)(e),s=[];return n.forEach((t=>{s.push({id:t.id,...t.data()})})),s}();if(console.log(`documents: ${t}`),!t.length)return alert("No document to display"),void(window.location.href="user_home_page.html");const e=document.getElementById("documents-list");for(let r=0;r<t.length;r+=2){const i=r===t.length-1,s=document.createElement("div");s.className="row mb-5 gap-5 justify-content-center";const o=t[r];if(s.appendChild(n(o)),!i){const e=t[r+1];s.appendChild(n(e))}e.appendChild(s)}function n(t){const e=document.createElement("div");e.className="col-lg-5 col-12",e.innerHTML=`\n            <div class="card" style="background: #e5d7c5"> \n                <div class="text-center">\n                    <img src="${t.fileUrl}" alt="${t.documentName}" width="100" />\n                </div>\n                <div class="card-body">\n                    <h3 class="card-title text-center mb-3">${t.documentName}</h3>\n                    <p class="card-text text-center fs-5">Type: ${t.documentType}</p>\n                    <p class="card-text text-center fs-5">Uploaded At: ${t.uploadedAt?.toDate().toLocaleString()||"Unknown"}</p>\n                    <p class="card-text text-center fs-5">Updated At: ${t.updatedAt?.toDate().toLocaleString()||" - "}</p>\n                    <div class="row justify-content-center mb-4">\n                        <div class="col-6 offset-2">\n                            <a href="${t.fileUrl}" class="btn btn-secondary">View the Image</a>\n                        </div>\n                    </div>\n                    <div class="row justify-content-center">\n                        <div class="col-2 offset-1">\n                            <img class="view-documents-edit-icon" src="images/edit_icon.png" width="40%" style="cursor: pointer;">\n                        </div>\n                        <div class="col-2">\n                            <img class="view-documents-share-icon" data-url="${t.fileUrl}" data-bs-toggle="modal" data-bs-target="#view-documents-page-share-modal" src="images/share_icon.png" width="40%" style="cursor: pointer;">\n                        </div>\n                        <div class="col-2">\n                            <img class="view-documents-delete-icon" src="images/delete_icon.png" width="40%" style="cursor: pointer;">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;const n=encodeURIComponent(JSON.stringify(t)),s=e.querySelector(".view-documents-edit-icon"),a=e.querySelector(".view-documents-delete-icon"),c=e.querySelector(".view-documents-share-icon");return s.addEventListener("click",(()=>function(t){const e=JSON.parse(decodeURIComponent(t));localStorage.setItem("documentToBeEdited",JSON.stringify(e)),window.location.href="edit_document_page.html"}(n))),a.addEventListener("click",(()=>async function(t){if(confirm(`Are you sure you want to permanently delete "${t.documentName}"?`))try{if(t.fileUrl){const e=function(t){const e=t.replace("https://firebasestorage.googleapis.com/v0/b/upload-25f01.appspot.com/o/","");return decodeURIComponent(e.split("?")[0])}(t.fileUrl),n=(0,o.KR)(r.IG,e);await(0,o.XR)(n),console.log("File deleted from Storage!")}const e=(0,i.H9)(r.db,"documents",t.id);await(0,i.kd)(e),console.log("Document metadata deleted from Firestore!"),alert("Document deleted successfully!"),window.location.reload()}catch(t){console.error("Error deleting document:",t),alert("Failed to delete document!")}}(t))),c.addEventListener("click",(()=>{const t=c.getAttribute("data-url");document.getElementById("view-documents-page-whatsapp-share-button").href=`https://wa.me/?text=${encodeURIComponent(t)}`,document.getElementById("view-documents-page-email-share-button").href=`mailto:?subject=Shared Document&body=${encodeURIComponent(t)}`,document.getElementById("view-documents-page-copy-link-button").onclick=()=>{navigator.clipboard.writeText(t).then((()=>{alert("Copied to clipboard!")}))}})),e}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,