/*! For license information please see upload_page.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},e(t,n)};function n(t,e){var n={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(n[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(t);r<i.length;r++)e.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(t,i[r])&&(n[i[r]]=t[i[r]])}return n}function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function r(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,s=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return o}function s(t,e,n){if(n||2===arguments.length)for(var i,r=0,s=e.length;r<s;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[],r=0;r<t.length;r+=3){var s=t[r],o=r+1<t.length,a=o?t[r+1]:0,c=r+2<t.length,u=c?t[r+2]:0,l=s>>2,h=(3&s)<<4|a>>4,d=(15&a)<<2|u>>6,f=63&u;c||(f=64,o||(d=64)),i.push(n[l],n[h],n[d],n[f])}return i.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(function(t){for(var e=[],n=0,i=0;i<t.length;i++){var r=t.charCodeAt(i);r<128?e[n++]=r:r<2048?(e[n++]=r>>6|192,e[n++]=63&r|128):55296==(64512&r)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&t.charCodeAt(++i)),e[n++]=r>>18|240,e[n++]=r>>12&63|128,e[n++]=r>>6&63|128,e[n++]=63&r|128):(e[n++]=r>>12|224,e[n++]=r>>6&63|128,e[n++]=63&r|128)}return e}(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,i=0;n<t.length;){var r=t[n++];if(r<128)e[i++]=String.fromCharCode(r);else if(r>191&&r<224){var s=t[n++];e[i++]=String.fromCharCode((31&r)<<6|63&s)}else if(r>239&&r<365){var o=((7&r)<<18|(63&(s=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[i++]=String.fromCharCode(55296+(o>>10)),e[i++]=String.fromCharCode(56320+(1023&o))}else{s=t[n++];var a=t[n++];e[i++]=String.fromCharCode((15&r)<<12|(63&s)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[],r=0;r<t.length;){var s=n[t.charAt(r++)],o=r<t.length?n[t.charAt(r)]:0,a=++r<t.length?n[t.charAt(r)]:64,c=++r<t.length?n[t.charAt(r)]:64;if(++r,null==s||null==o||null==a||null==c)throw Error();var u=s<<2|o>>4;if(i.push(u),64!==a){var l=o<<4&240|a>>2;if(i.push(l),64!==c){var h=a<<6&192|c;i.push(h)}}}return i},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},a=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,i){n?e.reject(n):e.resolve(i),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,i))}},t}();function c(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function u(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(c())}function l(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function h(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function d(){var t=c();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}var f=function(t){function n(e,i,r){var s=t.call(this,i)||this;return s.code=e,s.customData=r,s.name="FirebaseError",Object.setPrototypeOf(s,n.prototype),Error.captureStackTrace&&Error.captureStackTrace(s,p.prototype.create),s}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}(n,t),n}(Error),p=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i=e[0]||{},r=this.service+"/"+t,s=this.errors[t],o=s?function(t,e){return t.replace(g,(function(t,n){var i=e[n];return null!=i?String(i):"<"+n+"?>"}))}(s,i):"Error",a=this.serviceName+": "+o+" ("+r+").";return new f(r,a,i)},t}(),g=/\{\$([^}]+)}/g;function m(t,e){if(t===e)return!0;for(var n=Object.keys(t),i=Object.keys(e),r=0,s=n;r<s.length;r++){var o=s[r];if(!i.includes(o))return!1;var a=t[o],c=e[o];if(y(a)&&y(c)){if(!m(a,c))return!1}else if(a!==c)return!1}for(var u=0,l=i;u<l.length;u++)if(o=l[u],!n.includes(o))return!1;return!0}function y(t){return null!==t&&"object"==typeof t}function v(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},i=0,r=Object.entries(t);i<r.length;i++){var s=r[i];n(s[0],s[1])}return e.length?"&"+e.join("&"):""}function w(t){var e={};return t.replace(/^\?/,"").split("&").forEach((function(t){if(t){var n=t.split("="),i=n[0],r=n[1];e[decodeURIComponent(i)]=decodeURIComponent(r)}})),e}function _(t){var e=t.indexOf("?");if(!e)return"";var n=t.indexOf("#",e);return t.substring(e,n>0?n:void 0)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var i=0;i<16;i++)n[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(i=0;i<16;i++)n[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(i=16;i<80;i++){var r=n[i-3]^n[i-8]^n[i-14]^n[i-16];n[i]=4294967295&(r<<1|r>>>31)}var s,o,a=this.chain_[0],c=this.chain_[1],u=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(i=0;i<80;i++)i<40?i<20?(s=l^c&(u^l),o=1518500249):(s=c^u^l,o=1859775393):i<60?(s=c&u|l&(c|u),o=2400959708):(s=c^u^l,o=3395469782),r=(a<<5|a>>>27)+s+h+o+n[i]&4294967295,h=l,l=u,u=4294967295&(c<<30|c>>>2),c=a,a=r;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+c&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,i=0,r=this.buf_,s=this.inbuf_;i<e;){if(0===s)for(;i<=n;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(r[s]=t.charCodeAt(i),++i,++s===this.blockSize){this.compress_(r),s=0;break}}else for(;i<e;)if(r[s]=t[i],++i,++s===this.blockSize){this.compress_(r),s=0;break}}this.inbuf_=s,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var i=0;for(n=0;n<5;n++)for(var r=24;r>=0;r-=8)t[i]=this.chain_[n]>>r&255,++i;return t}}();var b=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var i,r=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(i=function(t){if("object"!=typeof t||null===t)return!1;for(var e=0,n=["next","error","complete"];e<n.length;e++){var i=n[e];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(i.next=I),void 0===i.error&&(i.error=I),void 0===i.complete&&(i.complete=I);var s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}})),this.observers.push(i),s},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function I(){}function T(t){return t&&t._delegate?t._delegate:t}var E,S=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),k="[DEFAULT]",A=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new a;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var i=this.getOrInitializeService({instanceIdentifier:e});i&&n.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:k})}catch(t){}try{for(var s=i(this.instancesDeferred.entries()),o=s.next();!o.done;o=s.next()){var a=r(o.value,2),c=a[0],u=a[1],l=this.normalizeInstanceIdentifier(c);try{var h=this.getOrInitializeService({instanceIdentifier:l});u.resolve(h)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=k),this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return function(t,e,n,i){return new(n||(n=Promise))((function(r,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function a(t){try{c(i.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((i=i.apply(t,e||[])).next())}))}(this,void 0,void 0,(function(){var t;return function(t,e){var n,i,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},o=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return o.next=a(0),o.throw=a(1),o.return=a(2),"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(s(s([],r(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),r(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=k),this.instances.has(t)},t.prototype.getOptions=function(t){return void 0===t&&(t=k),this.instancesOptions.get(t)||{}},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var s=t.options,o=void 0===s?{}:s,a=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(a))throw Error(this.name+"("+a+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var c=this.getOrInitializeService({instanceIdentifier:a,options:o});try{for(var u=i(this.instancesDeferred.entries()),l=u.next();!l.done;l=u.next()){var h=r(l.value,2),d=h[0],f=h[1];a===this.normalizeInstanceIdentifier(d)&&f.resolve(c)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}return c},t.prototype.onInit=function(t,e){var n,i=this.normalizeInstanceIdentifier(e),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(t),this.onInitCallbacks.set(i,r);var s=this.instances.get(i);return s&&t(s,i),function(){r.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,r,s=this.onInitCallbacks.get(e);if(s)try{for(var o=i(s),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,i=t.options,r=void 0===i?{}:i,s=this.instances.get(n);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===k?void 0:e),options:r}),this.instances.set(n,s),this.instancesOptions.set(n,r),this.invokeOnInitCallbacks(s,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,s)}catch(t){}return s||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=k),this.component?this.component.multipleInstances?t:k:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}(),R=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new A(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();function N(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],o=0,a=s.length;o<a;o++,r++)i[r]=s[o];return i}var C,O=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(C||(C={}));var D={debug:C.DEBUG,verbose:C.VERBOSE,info:C.INFO,warn:C.WARN,error:C.ERROR,silent:C.SILENT},P=C.INFO,L=((E={})[C.DEBUG]="log",E[C.VERBOSE]="log",E[C.INFO]="info",E[C.WARN]="warn",E[C.ERROR]="error",E),x=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var r=(new Date).toISOString(),s=L[e];if(!s)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[s].apply(console,N(["["+r+"]  "+t.name+":"],n))}},M=function(){function t(t){this.name=t,this._logLevel=P,this._logHandler=x,this._userLogHandler=null,O.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in C))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?D[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,N([this,C.DEBUG],t)),this._logHandler.apply(this,N([this,C.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,N([this,C.VERBOSE],t)),this._logHandler.apply(this,N([this,C.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,N([this,C.INFO],t)),this._logHandler.apply(this,N([this,C.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,N([this,C.WARN],t)),this._logHandler.apply(this,N([this,C.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,N([this,C.ERROR],t)),this._logHandler.apply(this,N([this,C.ERROR],t))},t}();class U{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const F="@firebase/app",V=new M("@firebase/app"),j="@firebase/app-compat",B="@firebase/analytics-compat",H="@firebase/analytics",q="@firebase/app-check-compat",z="@firebase/app-check",$="@firebase/auth",K="@firebase/auth-compat",G="@firebase/database",W="@firebase/database-compat",X="@firebase/functions",J="@firebase/functions-compat",Q="@firebase/installations",Y="@firebase/installations-compat",Z="@firebase/messaging",tt="@firebase/messaging-compat",et="@firebase/performance",nt="@firebase/performance-compat",it="@firebase/remote-config",rt="@firebase/remote-config-compat",st="@firebase/storage",ot="@firebase/storage-compat",at="@firebase/firestore",ct="@firebase/firestore-compat",ut="firebase",lt="[DEFAULT]",ht={[F]:"fire-core",[j]:"fire-core-compat",[H]:"fire-analytics",[B]:"fire-analytics-compat",[z]:"fire-app-check",[q]:"fire-app-check-compat",[$]:"fire-auth",[K]:"fire-auth-compat",[G]:"fire-rtdb",[W]:"fire-rtdb-compat",[X]:"fire-fn",[J]:"fire-fn-compat",[Q]:"fire-iid",[Y]:"fire-iid-compat",[Z]:"fire-fcm",[tt]:"fire-fcm-compat",[et]:"fire-perf",[nt]:"fire-perf-compat",[it]:"fire-rc",[rt]:"fire-rc-compat",[st]:"fire-gcs",[ot]:"fire-gcs-compat",[at]:"fire-fst",[ct]:"fire-fst-compat","fire-js":"fire-js",[ut]:"fire-js-all"},dt=new Map,ft=new Map;function pt(t,e){try{t.container.addComponent(e)}catch(n){V.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function gt(t){const e=t.name;if(ft.has(e))return V.debug(`There were multiple attempts to register component ${e}.`),!1;ft.set(e,t);for(const e of dt.values())pt(e,t);return!0}function mt(t,e){return t.container.getProvider(e)}const yt=new p("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class vt{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new S("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw yt.create("app-deleted",{appName:this._name})}}const wt="9.0.0";function _t(t=lt){const e=dt.get(t);if(!e)throw yt.create("no-app",{appName:t});return e}function bt(t,e,n){var i;let r=null!==(i=ht[t])&&void 0!==i?i:t;n&&(r+=`-${n}`);const s=r.match(/\s|\//),o=e.match(/\s|\//);if(s||o){const t=[`Unable to register library "${r}" with version "${e}":`];return s&&t.push(`library name "${r}" contains illegal characters (whitespace or "/")`),s&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void V.warn(t.join(" "))}gt(new S(`${r}-version`,(()=>({library:r,version:e})),"VERSION"))}gt(new S("platform-logger",(t=>new U(t)),"PRIVATE")),bt(F,"0.7.0",undefined),bt("fire-js",""),bt("firebase","9.0.1","app");const It=new p("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),Tt=new M("@firebase/auth");function Et(t,...e){Tt.logLevel<=C.ERROR&&Tt.error(`Auth (${wt}): ${t}`,...e)}function St(t,...e){throw At(t,...e)}function kt(t,...e){return At(t,...e)}function At(t,...e){if("string"!=typeof t){const n=e[0],i=[...e.slice(1)];return i[0]&&(i[0].appName=t.name),t._errorFactory.create(n,...i)}return It.create(t,...e)}function Rt(t,e,...n){if(!t)throw At(e,...n)}function Nt(t){const e="INTERNAL ASSERTION FAILED: "+t;throw Et(e),new Error(e)}function Ct(t,e){t||Nt(e)}const Ot=new Map;function Dt(t){Ct(t instanceof Function,"Expected a class definition");let e=Ot.get(t);return e?(Ct(e instanceof t,"Instance stored in cache mismatched with class"),e):(e=new t,Ot.set(t,e),e)}function Pt(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.href)||""}function Lt(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.protocol)||null}class xt{constructor(t,e){this.shortDelay=t,this.longDelay=e,Ct(e>t,"Short delay should be less than long delay!"),this.isMobile=u()||h()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===Lt()||"https:"===Lt()||l()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function Mt(t,e){Ct(t.emulator,"Emulator should always be set here");const{url:n}=t.emulator;return e?`${n}${e.startsWith("/")?e.slice(1):e}`:n}class Ut{static initialize(t,e,n){this.fetchImpl=t,e&&(this.headersImpl=e),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void Nt("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void Nt("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void Nt("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const Ft={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded"},Vt=new xt(3e4,6e4);function jt(t,e){return t.tenantId&&!e.tenantId?Object.assign(Object.assign({},e),{tenantId:t.tenantId}):e}async function Bt(t,e,n,i,r={}){return Ht(t,r,(()=>{let r={},s={};i&&("GET"===e?s=i:r={body:JSON.stringify(i)});const o=v(Object.assign({key:t.config.apiKey},s)).slice(1),a=new(Ut.headers());return a.set("Content-Type","application/json"),a.set("X-Client-Version",t._getSdkClientVersion()),t.languageCode&&a.set("X-Firebase-Locale",t.languageCode),Ut.fetch()(zt(t,t.config.apiHost,n,o),Object.assign({method:e,headers:a,referrerPolicy:"no-referrer"},r))}))}async function Ht(t,e,n){t._canInitEmulator=!1;const i=Object.assign(Object.assign({},Ft),e);try{const e=new $t(t),r=await Promise.race([n(),e.promise]);e.clearNetworkTimeout();const s=await r.json();if("needConfirmation"in s)throw Kt(t,"account-exists-with-different-credential",s);if(r.ok&&!("errorMessage"in s))return s;{const e=(r.ok?s.errorMessage:s.error.message).split(" : ")[0];if("FEDERATED_USER_ID_ALREADY_LINKED"===e)throw Kt(t,"credential-already-in-use",s);if("EMAIL_EXISTS"===e)throw Kt(t,"email-already-in-use",s);St(t,i[e]||e.toLowerCase().replace(/[_\s]+/g,"-"))}}catch(e){if(e instanceof f)throw e;St(t,"network-request-failed")}}async function qt(t,e,n,i,r={}){const s=await Bt(t,e,n,i,r);return"mfaPendingCredential"in s&&St(t,"multi-factor-auth-required",{serverResponse:s}),s}function zt(t,e,n,i){const r=`${e}${n}?${i}`;return t.config.emulator?Mt(t.config,r):`${t.config.apiScheme}://${r}`}class $t{constructor(t){this.auth=t,this.timer=null,this.promise=new Promise(((t,e)=>{this.timer=setTimeout((()=>e(kt(this.auth,"timeout"))),Vt.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function Kt(t,e,n){const i={appName:t.name};n.email&&(i.email=n.email),n.phoneNumber&&(i.phoneNumber=n.phoneNumber);const r=kt(t,e,i);return r.customData._tokenResponse=n,r}function Gt(t){if(t)try{const e=new Date(Number(t));if(!isNaN(e.getTime()))return e.toUTCString()}catch(t){}}function Wt(t){return 1e3*Number(t)}function Xt(t){const[e,n,i]=t.split(".");if(void 0===e||void 0===n||void 0===i)return Et("JWT malformed, contained fewer than 3 sections"),null;try{const t=function(t){try{return o.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null}(n);return t?JSON.parse(t):(Et("Failed to decode base64 JWT payload"),null)}catch(t){return Et("Caught error parsing JWT payload as JSON",t),null}}async function Jt(t,e,n=!1){if(n)return e;try{return await e}catch(e){throw e instanceof f&&function({code:t}){return"auth/user-disabled"===t||"auth/user-token-expired"===t}(e)&&t.auth.currentUser===t&&await t.auth.signOut(),e}}class Qt{constructor(t){this.user=t,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(t){var e;if(t){const t=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),t}{this.errorBackoff=3e4;const t=(null!==(e=this.user.stsTokenManager.expirationTime)&&void 0!==e?e:0)-Date.now()-3e5;return Math.max(0,t)}}schedule(t=!1){if(!this.isRunning)return;const e=this.getInterval(t);this.timerId=setTimeout((async()=>{await this.iteration()}),e)}async iteration(){try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===t.code&&this.schedule(!0))}this.schedule()}}class Yt{constructor(t,e){this.createdAt=t,this.lastLoginAt=e,this._initializeTime()}_initializeTime(){this.lastSignInTime=Gt(this.lastLoginAt),this.creationTime=Gt(this.createdAt)}_copy(t){this.createdAt=t.createdAt,this.lastLoginAt=t.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function Zt(t){var e;const i=t.auth,r=await t.getIdToken(),s=await Jt(t,async function(t,e){return Bt(t,"POST","/v1/accounts:lookup",e)}(i,{idToken:r}));Rt(null==s?void 0:s.users.length,i,"internal-error");const o=s.users[0];t._notifyReloadListener(o);const a=(null===(e=o.providerUserInfo)||void 0===e?void 0:e.length)?o.providerUserInfo.map((t=>{var{providerId:e}=t,i=n(t,["providerId"]);return{providerId:e,uid:i.rawId||"",displayName:i.displayName||null,email:i.email||null,phoneNumber:i.phoneNumber||null,photoURL:i.photoUrl||null}})):[],c=(u=t.providerData,l=a,[...u.filter((t=>!l.some((e=>e.providerId===t.providerId)))),...l]);var u,l;const h=t.isAnonymous,d=!(t.email&&o.passwordHash||(null==c?void 0:c.length)),f=!!h&&d,p={uid:o.localId,displayName:o.displayName||null,photoURL:o.photoUrl||null,email:o.email||null,emailVerified:o.emailVerified||!1,phoneNumber:o.phoneNumber||null,tenantId:o.tenantId||null,providerData:c,metadata:new Yt(o.createdAt,o.lastLoginAt),isAnonymous:f};Object.assign(t,p)}class te{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(t){Rt(t.idToken,"internal-error"),Rt(void 0!==t.idToken,"internal-error"),Rt(void 0!==t.refreshToken,"internal-error");const e="expiresIn"in t&&void 0!==t.expiresIn?Number(t.expiresIn):function(t){const e=Xt(t);return Rt(e,"internal-error"),Rt(void 0!==e.exp,"internal-error"),Rt(void 0!==e.iat,"internal-error"),Number(e.exp)-Number(e.iat)}(t.idToken);this.updateTokensAndExpiration(t.idToken,t.refreshToken,e)}async getToken(t,e=!1){return Rt(!this.accessToken||this.refreshToken,t,"user-token-expired"),e||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(t,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(t,e){const{accessToken:n,refreshToken:i,expiresIn:r}=await async function(t,e){const n=await Ht(t,{},(()=>{const n=v({grant_type:"refresh_token",refresh_token:e}).slice(1),{tokenApiHost:i,apiKey:r}=t.config,s=zt(t,i,"/v1/token",`key=${r}`);return Ut.fetch()(s,{method:"POST",headers:{"X-Client-Version":t._getSdkClientVersion(),"Content-Type":"application/x-www-form-urlencoded"},body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(t,e);this.updateTokensAndExpiration(n,i,Number(r))}updateTokensAndExpiration(t,e,n){this.refreshToken=e||null,this.accessToken=t||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(t,e){const{refreshToken:n,accessToken:i,expirationTime:r}=e,s=new te;return n&&(Rt("string"==typeof n,"internal-error",{appName:t}),s.refreshToken=n),i&&(Rt("string"==typeof i,"internal-error",{appName:t}),s.accessToken=i),r&&(Rt("number"==typeof r,"internal-error",{appName:t}),s.expirationTime=r),s}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(t){this.accessToken=t.accessToken,this.refreshToken=t.refreshToken,this.expirationTime=t.expirationTime}_clone(){return Object.assign(new te,this.toJSON())}_performRefresh(){return Nt("not implemented")}}function ee(t,e){Rt("string"==typeof t||void 0===t,"internal-error",{appName:e})}class ne{constructor(t){var{uid:e,auth:i,stsTokenManager:r}=t,s=n(t,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.emailVerified=!1,this.isAnonymous=!1,this.tenantId=null,this.providerData=[],this.proactiveRefresh=new Qt(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=e,this.auth=i,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=s.displayName||null,this.email=s.email||null,this.phoneNumber=s.phoneNumber||null,this.photoURL=s.photoURL||null,this.isAnonymous=s.isAnonymous||!1,this.metadata=new Yt(s.createdAt||void 0,s.lastLoginAt||void 0)}async getIdToken(t){const e=await Jt(this,this.stsTokenManager.getToken(this.auth,t));return Rt(e,this.auth,"internal-error"),this.accessToken!==e&&(this.accessToken=e,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),e}getIdTokenResult(t){return async function(t,e=!1){const n=T(t),i=await n.getIdToken(e),r=Xt(i);Rt(r&&r.exp&&r.auth_time&&r.iat,n.auth,"internal-error");const s="object"==typeof r.firebase?r.firebase:void 0,o=null==s?void 0:s.sign_in_provider;return{claims:r,token:i,authTime:Gt(Wt(r.auth_time)),issuedAtTime:Gt(Wt(r.iat)),expirationTime:Gt(Wt(r.exp)),signInProvider:o||null,signInSecondFactor:(null==s?void 0:s.sign_in_second_factor)||null}}(this,t)}reload(){return async function(t){const e=T(t);await Zt(e),await e.auth._persistUserIfCurrent(e),e.auth._notifyListenersIfCurrent(e)}(this)}_assign(t){this!==t&&(Rt(this.uid===t.uid,this.auth,"internal-error"),this.displayName=t.displayName,this.photoURL=t.photoURL,this.email=t.email,this.emailVerified=t.emailVerified,this.phoneNumber=t.phoneNumber,this.isAnonymous=t.isAnonymous,this.tenantId=t.tenantId,this.providerData=t.providerData.map((t=>Object.assign({},t))),this.metadata._copy(t.metadata),this.stsTokenManager._assign(t.stsTokenManager))}_clone(t){return new ne(Object.assign(Object.assign({},this),{auth:t,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(t){Rt(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=t,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(t){this.reloadListener?this.reloadListener(t):this.reloadUserInfo=t}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(t,e=!1){let n=!1;t.idToken&&t.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(t),n=!0),e&&await Zt(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const t=await this.getIdToken();return await Jt(this,async function(t,e){return Bt(t,"POST","/v1/accounts:delete",e)}(this.auth,{idToken:t})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((t=>Object.assign({},t))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(t,e){var n,i,r,s,o,a,c,u;const l=null!==(n=e.displayName)&&void 0!==n?n:void 0,h=null!==(i=e.email)&&void 0!==i?i:void 0,d=null!==(r=e.phoneNumber)&&void 0!==r?r:void 0,f=null!==(s=e.photoURL)&&void 0!==s?s:void 0,p=null!==(o=e.tenantId)&&void 0!==o?o:void 0,g=null!==(a=e._redirectEventId)&&void 0!==a?a:void 0,m=null!==(c=e.createdAt)&&void 0!==c?c:void 0,y=null!==(u=e.lastLoginAt)&&void 0!==u?u:void 0,{uid:v,emailVerified:w,isAnonymous:_,providerData:b,stsTokenManager:I}=e;Rt(v&&I,t,"internal-error");const T=te.fromJSON(this.name,I);Rt("string"==typeof v,t,"internal-error"),ee(l,t.name),ee(h,t.name),Rt("boolean"==typeof w,t,"internal-error"),Rt("boolean"==typeof _,t,"internal-error"),ee(d,t.name),ee(f,t.name),ee(p,t.name),ee(g,t.name),ee(m,t.name),ee(y,t.name);const E=new ne({uid:v,auth:t,email:h,emailVerified:w,displayName:l,isAnonymous:_,photoURL:f,phoneNumber:d,tenantId:p,stsTokenManager:T,createdAt:m,lastLoginAt:y});return b&&Array.isArray(b)&&(E.providerData=b.map((t=>Object.assign({},t)))),g&&(E._redirectEventId=g),E}static async _fromIdTokenResponse(t,e,n=!1){const i=new te;i.updateFromServerResponse(e);const r=new ne({uid:e.localId,auth:t,stsTokenManager:i,isAnonymous:n});return await Zt(r),r}}class ie{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(t,e){this.storage[t]=e}async _get(t){const e=this.storage[t];return void 0===e?null:e}async _remove(t){delete this.storage[t]}_addListener(t,e){}_removeListener(t,e){}}ie.type="NONE";const re=ie;function se(t,e,n){return`firebase:${t}:${e}:${n}`}class oe{constructor(t,e,n){this.persistence=t,this.auth=e,this.userKey=n;const{config:i,name:r}=this.auth;this.fullUserKey=se(this.userKey,i.apiKey,r),this.fullPersistenceKey=se("persistence",i.apiKey,r),this.boundEventHandler=e._onStorageEvent.bind(e),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(t){return this.persistence._set(this.fullUserKey,t.toJSON())}async getCurrentUser(){const t=await this.persistence._get(this.fullUserKey);return t?ne._fromJSON(this.auth,t):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(t){if(this.persistence===t)return;const e=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=t,e?this.setCurrentUser(e):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(t,e,n="authUser"){if(!e.length)return new oe(Dt(re),t,n);const i=(await Promise.all(e.map((async t=>{if(await t._isAvailable())return t})))).filter((t=>t));let r=i[0]||Dt(re);const s=se(n,t.config.apiKey,t.name);let o=null;for(const n of e)try{const e=await n._get(s);if(e){const i=ne._fromJSON(t,e);n!==r&&(o=i),r=n;break}}catch(t){}const a=i.filter((t=>t._shouldAllowMigration));return r._shouldAllowMigration&&a.length?(r=a[0],o&&await r._set(s,o.toJSON()),await Promise.all(e.map((async t=>{if(t!==r)try{await t._remove(s)}catch(t){}}))),new oe(r,t,n)):new oe(r,t,n)}}function ae(t){const e=t.toLowerCase();if(e.includes("opera/")||e.includes("opr/")||e.includes("opios/"))return"Opera";if(he(e))return"IEMobile";if(e.includes("msie")||e.includes("trident/"))return"IE";if(e.includes("edge/"))return"Edge";if(ce(e))return"Firefox";if(e.includes("silk/"))return"Silk";if(fe(e))return"Blackberry";if(pe(e))return"Webos";if(ue(e))return"Safari";if((e.includes("chrome/")||le(e))&&!e.includes("edge/"))return"Chrome";if(de(e))return"Android";{const e=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=t.match(e);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function ce(t=c()){return/firefox\//i.test(t)}function ue(t=c()){const e=t.toLowerCase();return e.includes("safari/")&&!e.includes("chrome/")&&!e.includes("crios/")&&!e.includes("android")}function le(t=c()){return/crios\//i.test(t)}function he(t=c()){return/iemobile/i.test(t)}function de(t=c()){return/android/i.test(t)}function fe(t=c()){return/blackberry/i.test(t)}function pe(t=c()){return/webos/i.test(t)}function ge(t=c()){return/iphone|ipad|ipod/i.test(t)}function me(t=c()){return ge(t)||de(t)||pe(t)||fe(t)||/windows phone/i.test(t)||he(t)}function ye(t,e=[]){let n;switch(t){case"Browser":n=ae(c());break;case"Worker":n=`${ae(c())}-${t}`;break;default:n=t}const i=e.length?e.join(","):"FirebaseCore-web";return`${n}/JsCore/${wt}/${i}`}class ve{constructor(t,e){this.app=t,this.config=e,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new _e(this),this.idTokenSubscription=new _e(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=It,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=t.name,this.clientVersion=e.sdkClientVersion}_initializeWithPersistence(t,e){return e&&(this._popupRedirectResolver=Dt(e)),this._initializationPromise=this.queue((async()=>{var n;this._deleted||(this.persistenceManager=await oe.create(this,t),this._deleted||((null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)&&await this._popupRedirectResolver._initialize(this),await this.initializeCurrentUser(e),this._deleted||(this._isInitialized=!0)))})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const t=await this.assertedPersistence.getCurrentUser();return this.currentUser||t?this.currentUser&&t&&this.currentUser.uid===t.uid?(this._currentUser._assign(t),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(t):void 0}async initializeCurrentUser(t){var e;let n=await this.assertedPersistence.getCurrentUser();if(t&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const i=null===(e=this.redirectUser)||void 0===e?void 0:e._redirectEventId,r=null==n?void 0:n._redirectEventId,s=await this.tryRedirectSignIn(t);i&&i!==r||!(null==s?void 0:s.user)||(n=s.user)}return n?n._redirectEventId?(Rt(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===n._redirectEventId?this.directlySetCurrentUser(n):this.reloadAndSetCurrentUserOrClear(n)):this.reloadAndSetCurrentUserOrClear(n):this.directlySetCurrentUser(null)}async tryRedirectSignIn(t){let e=null;try{e=await this._popupRedirectResolver._completeRedirectFn(this,t,!0)}catch(t){await this._setRedirectUser(null)}return e}async reloadAndSetCurrentUserOrClear(t){try{await Zt(t)}catch(t){if("auth/network-request-failed"!==t.code)return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(t)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const t=navigator;return t.languages&&t.languages[0]||t.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(t){const e=t?T(t):null;return e&&Rt(e.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(e&&e._clone(this))}async _updateCurrentUser(t){if(!this._deleted)return t&&Rt(this.tenantId===t.tenantId,this,"tenant-id-mismatch"),this.queue((async()=>{await this.directlySetCurrentUser(t),this.notifyAuthListeners()}))}async signOut(){return(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null)}setPersistence(t){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Dt(t))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(t){this._errorFactory=new p("auth","Firebase",t())}onAuthStateChanged(t,e,n){return this.registerStateListener(this.authStateSubscription,t,e,n)}onIdTokenChanged(t,e,n){return this.registerStateListener(this.idTokenSubscription,t,e,n)}toJSON(){var t;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(t=this._currentUser)||void 0===t?void 0:t.toJSON()}}async _setRedirectUser(t,e){const n=await this.getOrInitRedirectPersistenceManager(e);return null===t?n.removeCurrentUser():n.setCurrentUser(t)}async getOrInitRedirectPersistenceManager(t){if(!this.redirectPersistenceManager){const e=t&&Dt(t)||this._popupRedirectResolver;Rt(e,this,"argument-error"),this.redirectPersistenceManager=await oe.create(this,[Dt(e._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(t){var e,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(e=this._currentUser)||void 0===e?void 0:e._redirectEventId)===t?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===t?this.redirectUser:null}async _persistUserIfCurrent(t){if(t===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(t)))}_notifyListenersIfCurrent(t){t===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var t,e;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(e=null===(t=this.currentUser)||void 0===t?void 0:t.uid)&&void 0!==e?e:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(t,e,n,i){if(this._deleted)return()=>{};const r="function"==typeof e?e:e.next.bind(e),s=this._isInitialized?Promise.resolve():this._initializationPromise;return Rt(s,this,"internal-error"),s.then((()=>r(this.currentUser))),"function"==typeof e?t.addObserver(e,n,i):t.addObserver(e)}async directlySetCurrentUser(t){this.currentUser&&this.currentUser!==t&&(this._currentUser._stopProactiveRefresh(),t&&this.isProactiveRefreshEnabled&&t._startProactiveRefresh()),this.currentUser=t,t?await this.assertedPersistence.setCurrentUser(t):await this.assertedPersistence.removeCurrentUser()}queue(t){return this.operations=this.operations.then(t,t),this.operations}get assertedPersistence(){return Rt(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(t){t&&!this.frameworks.includes(t)&&(this.frameworks.push(t),this.frameworks.sort(),this.clientVersion=ye(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}_getSdkClientVersion(){return this.clientVersion}}function we(t){return T(t)}class _e{constructor(t){var e;this.auth=t,this.observer=null,this.addObserver=(e=new b((t=>this.observer=t),undefined)).subscribe.bind(e)}get next(){return Rt(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class be{constructor(t,e){this.providerId=t,this.signInMethod=e}toJSON(){return Nt("not implemented")}_getIdTokenResponse(t){return Nt("not implemented")}_linkToIdToken(t,e){return Nt("not implemented")}_getReauthenticationResolver(t){return Nt("not implemented")}}class Ie extends be{constructor(t,e,n,i=null){super("password",n),this._email=t,this._password=e,this._tenantId=i}static _fromEmailAndPassword(t,e){return new Ie(t,e,"password")}static _fromEmailAndCode(t,e,n=null){return new Ie(t,e,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t;if((null==e?void 0:e.email)&&(null==e?void 0:e.password)){if("password"===e.signInMethod)return this._fromEmailAndPassword(e.email,e.password);if("emailLink"===e.signInMethod)return this._fromEmailAndCode(e.email,e.password,e.tenantId)}return null}async _getIdTokenResponse(t){switch(this.signInMethod){case"password":return async function(t,e){return qt(t,"POST","/v1/accounts:signInWithPassword",jt(t,e))}(t,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return qt(t,"POST","/v1/accounts:signInWithEmailLink",jt(t,e))}(t,{email:this._email,oobCode:this._password});default:St(t,"internal-error")}}async _linkToIdToken(t,e){switch(this.signInMethod){case"password":return async function(t,e){return Bt(t,"POST","/v1/accounts:update",e)}(t,{idToken:e,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return qt(t,"POST","/v1/accounts:signInWithEmailLink",jt(t,e))}(t,{idToken:e,email:this._email,oobCode:this._password});default:St(t,"internal-error")}}_getReauthenticationResolver(t){return this._getIdTokenResponse(t)}}async function Te(t,e){return qt(t,"POST","/v1/accounts:signInWithIdp",jt(t,e))}class Ee extends be{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(t){const e=new Ee(t.providerId,t.signInMethod);return t.idToken||t.accessToken?(t.idToken&&(e.idToken=t.idToken),t.accessToken&&(e.accessToken=t.accessToken),t.nonce&&!t.pendingToken&&(e.nonce=t.nonce),t.pendingToken&&(e.pendingToken=t.pendingToken)):t.oauthToken&&t.oauthTokenSecret?(e.accessToken=t.oauthToken,e.secret=t.oauthTokenSecret):St("argument-error"),e}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t,{providerId:i,signInMethod:r}=e,s=n(e,["providerId","signInMethod"]);if(!i||!r)return null;const o=new Ee(i,r);return Object.assign(o,s),o}_getIdTokenResponse(t){return Te(t,this.buildRequest())}_linkToIdToken(t,e){const n=this.buildRequest();return n.idToken=e,Te(t,n)}_getReauthenticationResolver(t){const e=this.buildRequest();return e.autoCreate=!1,Te(t,e)}buildRequest(){const t={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)t.pendingToken=this.pendingToken;else{const e={};this.idToken&&(e.id_token=this.idToken),this.accessToken&&(e.access_token=this.accessToken),this.secret&&(e.oauth_token_secret=this.secret),e.providerId=this.providerId,this.nonce&&!this.pendingToken&&(e.nonce=this.nonce),t.postBody=v(e)}return t}}const Se={USER_NOT_FOUND:"user-not-found"};class ke extends be{constructor(t){super("phone","phone"),this.params=t}static _fromVerification(t,e){return new ke({verificationId:t,verificationCode:e})}static _fromTokenResponse(t,e){return new ke({phoneNumber:t,temporaryProof:e})}_getIdTokenResponse(t){return async function(t,e){return qt(t,"POST","/v1/accounts:signInWithPhoneNumber",jt(t,e))}(t,this._makeVerificationRequest())}_linkToIdToken(t,e){return async function(t,e){const n=await qt(t,"POST","/v1/accounts:signInWithPhoneNumber",jt(t,e));if(n.temporaryProof)throw Kt(t,"account-exists-with-different-credential",n);return n}(t,Object.assign({idToken:e},this._makeVerificationRequest()))}_getReauthenticationResolver(t){return async function(t,e){return qt(t,"POST","/v1/accounts:signInWithPhoneNumber",jt(t,Object.assign(Object.assign({},e),{operation:"REAUTH"})),Se)}(t,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:t,phoneNumber:e,verificationId:n,verificationCode:i}=this.params;return t&&e?{temporaryProof:t,phoneNumber:e}:{sessionInfo:n,code:i}}toJSON(){const t={providerId:this.providerId};return this.params.phoneNumber&&(t.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(t.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(t.verificationCode=this.params.verificationCode),this.params.verificationId&&(t.verificationId=this.params.verificationId),t}static fromJSON(t){"string"==typeof t&&(t=JSON.parse(t));const{verificationId:e,verificationCode:n,phoneNumber:i,temporaryProof:r}=t;return n||e||i||r?new ke({verificationId:e,verificationCode:n,phoneNumber:i,temporaryProof:r}):null}}class Ae{constructor(t){var e,n,i,r,s,o;const a=w(_(t)),c=null!==(e=a.apiKey)&&void 0!==e?e:null,u=null!==(n=a.oobCode)&&void 0!==n?n:null,l=function(t){switch(t){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(i=a.mode)&&void 0!==i?i:null);Rt(c&&u&&l,"argument-error"),this.apiKey=c,this.operation=l,this.code=u,this.continueUrl=null!==(r=a.continueUrl)&&void 0!==r?r:null,this.languageCode=null!==(s=a.languageCode)&&void 0!==s?s:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(t){const e=function(t){const e=w(_(t)).link,n=e?w(_(e)).deep_link_id:null,i=w(_(t)).deep_link_id;return(i?w(_(i)).link:null)||i||n||e||t}(t);try{return new Ae(e)}catch(t){return null}}}class Re{constructor(){this.providerId=Re.PROVIDER_ID}static credential(t,e){return Ie._fromEmailAndPassword(t,e)}static credentialWithLink(t,e){const n=Ae.parseLink(e);return Rt(n,"argument-error"),Ie._fromEmailAndCode(t,n.code,n.tenantId)}}Re.PROVIDER_ID="password",Re.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Re.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Ne{constructor(t){this.providerId=t,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(t){this.defaultLanguageCode=t}setCustomParameters(t){return this.customParameters=t,this}getCustomParameters(){return this.customParameters}}class Ce extends Ne{constructor(){super(...arguments),this.scopes=[]}addScope(t){return this.scopes.includes(t)||this.scopes.push(t),this}getScopes(){return[...this.scopes]}}class Oe extends Ce{constructor(){super("facebook.com")}static credential(t){return Ee._fromParams({providerId:Oe.PROVIDER_ID,signInMethod:Oe.FACEBOOK_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return Oe.credentialFromTaggedObject(t)}static credentialFromError(t){return Oe.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return Oe.credential(t.oauthAccessToken)}catch(t){return null}}}Oe.FACEBOOK_SIGN_IN_METHOD="facebook.com",Oe.PROVIDER_ID="facebook.com";class De extends Ce{constructor(){super("google.com"),this.addScope("profile")}static credential(t,e){return Ee._fromParams({providerId:De.PROVIDER_ID,signInMethod:De.GOOGLE_SIGN_IN_METHOD,idToken:t,accessToken:e})}static credentialFromResult(t){return De.credentialFromTaggedObject(t)}static credentialFromError(t){return De.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthIdToken:e,oauthAccessToken:n}=t;if(!e&&!n)return null;try{return De.credential(e,n)}catch(t){return null}}}De.GOOGLE_SIGN_IN_METHOD="google.com",De.PROVIDER_ID="google.com";class Pe extends Ce{constructor(){super("github.com")}static credential(t){return Ee._fromParams({providerId:Pe.PROVIDER_ID,signInMethod:Pe.GITHUB_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return Pe.credentialFromTaggedObject(t)}static credentialFromError(t){return Pe.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return Pe.credential(t.oauthAccessToken)}catch(t){return null}}}Pe.GITHUB_SIGN_IN_METHOD="github.com",Pe.PROVIDER_ID="github.com";class Le extends Ce{constructor(){super("twitter.com")}static credential(t,e){return Ee._fromParams({providerId:Le.PROVIDER_ID,signInMethod:Le.TWITTER_SIGN_IN_METHOD,oauthToken:t,oauthTokenSecret:e})}static credentialFromResult(t){return Le.credentialFromTaggedObject(t)}static credentialFromError(t){return Le.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthAccessToken:e,oauthTokenSecret:n}=t;if(!e||!n)return null;try{return Le.credential(e,n)}catch(t){return null}}}Le.TWITTER_SIGN_IN_METHOD="twitter.com",Le.PROVIDER_ID="twitter.com";class xe{constructor(t){this.user=t.user,this.providerId=t.providerId,this._tokenResponse=t._tokenResponse,this.operationType=t.operationType}static async _fromIdTokenResponse(t,e,n,i=!1){const r=await ne._fromIdTokenResponse(t,n,i),s=Me(n);return new xe({user:r,providerId:s,_tokenResponse:n,operationType:e})}static async _forOperation(t,e,n){await t._updateTokensIfNecessary(n,!0);const i=Me(n);return new xe({user:t,providerId:i,_tokenResponse:n,operationType:e})}}function Me(t){return t.providerId?t.providerId:"phoneNumber"in t?"phone":null}class Ue extends f{constructor(t,e,n,i){var r;super(e.code,e.message),this.operationType=n,this.user=i,this.name="FirebaseError",Object.setPrototypeOf(this,Ue.prototype),this.appName=t.name,this.code=e.code,this.tenantId=null!==(r=t.tenantId)&&void 0!==r?r:void 0,this.serverResponse=e.customData.serverResponse}static _fromErrorAndOperation(t,e,n,i){return new Ue(t,e,n,i)}}function Fe(t,e,n,i){return("reauthenticate"===e?n._getReauthenticationResolver(t):n._getIdTokenResponse(t)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Ue._fromErrorAndOperation(t,n,e,i);throw n}))}new WeakMap;const Ve="__sak";class je{constructor(t,e){this.storage=t,this.type=e}_isAvailable(){try{return this.storage?(this.storage.setItem(Ve,"1"),this.storage.removeItem(Ve),Promise.resolve(!0)):Promise.resolve(!1)}catch(t){return Promise.resolve(!1)}}_set(t,e){return this.storage.setItem(t,JSON.stringify(e)),Promise.resolve()}_get(t){const e=this.storage.getItem(t);return Promise.resolve(e?JSON.parse(e):null)}_remove(t){return this.storage.removeItem(t),Promise.resolve()}}class Be extends je{constructor(){super(window.localStorage,"LOCAL"),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const t=c();return ue(t)||ge(t)}()&&function(){try{return!(!window||window===window.top)}catch(t){return!1}}(),this.fallbackToPolling=me(),this._shouldAllowMigration=!0,this.boundEventHandler=this.onStorageEvent.bind(this)}forAllChangedKeys(t){for(const e of Object.keys(this.listeners)){const n=this.storage.getItem(e),i=this.localCache[e];n!==i&&t(e,i,n)}}onStorageEvent(t,e=!1){if(!t.key)return void this.forAllChangedKeys(((t,e,n)=>{this.notifyListeners(t,n)}));const n=t.key;if(e?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const i=this.storage.getItem(n);if(t.newValue!==i)null!==t.newValue?this.storage.setItem(n,t.newValue):this.storage.removeItem(n);else if(this.localCache[n]===t.newValue&&!e)return}const i=()=>{const t=this.storage.getItem(n);(e||this.localCache[n]!==t)&&this.notifyListeners(n,t)},r=this.storage.getItem(n);d()&&10===document.documentMode&&r!==t.newValue&&t.newValue!==t.oldValue?setTimeout(i,10):i()}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e?JSON.parse(e):e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((t,e,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:t,oldValue:e,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(t,e){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[t]||(this.listeners[t]=new Set,this.localCache[t]=this.storage.getItem(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(t,e){await super._set(t,e),this.localCache[t]=JSON.stringify(e)}async _get(t){const e=await super._get(t);return this.localCache[t]=JSON.stringify(e),e}async _remove(t){await super._remove(t),delete this.localCache[t]}}Be.type="LOCAL";const He=Be;class qe extends je{constructor(){super(window.sessionStorage,"SESSION")}_addListener(t,e){}_removeListener(t,e){}}qe.type="SESSION";const ze=qe;class $e{constructor(t){this.eventTarget=t,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(t){const e=this.receivers.find((e=>e.isListeningto(t)));if(e)return e;const n=new $e(t);return this.receivers.push(n),n}isListeningto(t){return this.eventTarget===t}async handleEvent(t){const e=t,{eventId:n,eventType:i,data:r}=e.data,s=this.handlersMap[i];if(!(null==s?void 0:s.size))return;e.ports[0].postMessage({status:"ack",eventId:n,eventType:i});const o=Array.from(s).map((async t=>t(e.origin,r))),a=await function(t){return Promise.all(t.map((async t=>{try{return{fulfilled:!0,value:await t}}catch(t){return{fulfilled:!1,reason:t}}})))}(o);e.ports[0].postMessage({status:"done",eventId:n,eventType:i,response:a})}_subscribe(t,e){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[t]||(this.handlersMap[t]=new Set),this.handlersMap[t].add(e)}_unsubscribe(t,e){this.handlersMap[t]&&e&&this.handlersMap[t].delete(e),e&&0!==this.handlersMap[t].size||delete this.handlersMap[t],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Ke(t="",e=10){let n="";for(let t=0;t<e;t++)n+=Math.floor(10*Math.random());return t+n}$e.receivers=[];class Ge{constructor(t){this.target=t,this.handlers=new Set}removeMessageHandler(t){t.messageChannel&&(t.messageChannel.port1.removeEventListener("message",t.onMessage),t.messageChannel.port1.close()),this.handlers.delete(t)}async _send(t,e,n=50){const i="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!i)throw new Error("connection_unavailable");let r,s;return new Promise(((o,a)=>{const c=Ke("",20);i.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);s={messageChannel:i,onMessage(t){const e=t;if(e.data.eventId===c)switch(e.data.status){case"ack":clearTimeout(u),r=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(r),o(e.data.response);break;default:clearTimeout(u),clearTimeout(r),a(new Error("invalid_response"))}}},this.handlers.add(s),i.port1.addEventListener("message",s.onMessage),this.target.postMessage({eventType:t,eventId:c,data:e},[i.port2])})).finally((()=>{s&&this.removeMessageHandler(s)}))}}function We(){return window}function Xe(){return void 0!==We().WorkerGlobalScope&&"function"==typeof We().importScripts}const Je="firebaseLocalStorageDb",Qe="firebaseLocalStorage",Ye="fbase_key";class Ze{constructor(t){this.request=t}toPromise(){return new Promise(((t,e)=>{this.request.addEventListener("success",(()=>{t(this.request.result)})),this.request.addEventListener("error",(()=>{e(this.request.error)}))}))}}function tn(t,e){return t.transaction([Qe],e?"readwrite":"readonly").objectStore(Qe)}function en(){const t=indexedDB.open(Je,1);return new Promise(((e,n)=>{t.addEventListener("error",(()=>{n(t.error)})),t.addEventListener("upgradeneeded",(()=>{const e=t.result;try{e.createObjectStore(Qe,{keyPath:Ye})}catch(t){n(t)}})),t.addEventListener("success",(async()=>{const n=t.result;n.objectStoreNames.contains(Qe)?e(n):(n.close(),await function(){const t=indexedDB.deleteDatabase(Je);return new Ze(t).toPromise()}(),e(await en()))}))}))}async function nn(t,e,n){const i=tn(t,!0).put({[Ye]:e,value:n});return new Ze(i).toPromise()}function rn(t,e){const n=tn(t,!0).delete(e);return new Ze(n).toPromise()}class sn{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await en()),this.db}async _withRetries(t){let e=0;for(;;)try{const e=await this._openDb();return await t(e)}catch(t){if(e++>3)throw t;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Xe()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=$e._getInstance(Xe()?self:null),this.receiver._subscribe("keyChanged",(async(t,e)=>({keyProcessed:(await this._poll()).includes(e.key)}))),this.receiver._subscribe("ping",(async(t,e)=>["keyChanged"]))}async initializeSender(){var t,e;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(t){return null}}(),!this.activeServiceWorker)return;this.sender=new Ge(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(t=n[0])||void 0===t?void 0:t.fulfilled)&&(null===(e=n[0])||void 0===e?void 0:e.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(t){if(this.sender&&this.activeServiceWorker&&function(){var t;return(null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null}()===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:t},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}}async _isAvailable(){try{if(!indexedDB)return!1;const t=await en();return await nn(t,Ve,"1"),await rn(t,Ve),!0}catch(t){}return!1}async _withPendingWrite(t){this.pendingWrites++;try{await t()}finally{this.pendingWrites--}}async _set(t,e){return this._withPendingWrite((async()=>(await this._withRetries((n=>nn(n,t,e))),this.localCache[t]=e,this.notifyServiceWorker(t))))}async _get(t){const e=await this._withRetries((e=>async function(t,e){const n=tn(t,!1).get(e),i=await new Ze(n).toPromise();return void 0===i?null:i.value}(e,t)));return this.localCache[t]=e,e}async _remove(t){return this._withPendingWrite((async()=>(await this._withRetries((e=>rn(e,t))),delete this.localCache[t],this.notifyServiceWorker(t))))}async _poll(){const t=await this._withRetries((t=>{const e=tn(t,!1).getAll();return new Ze(e).toPromise()}));if(!t)return[];if(0!==this.pendingWrites)return[];const e=[],n=new Set;for(const{fbase_key:i,value:r}of t)n.add(i),JSON.stringify(this.localCache[i])!==JSON.stringify(r)&&(this.notifyListeners(i,r),e.push(i));for(const t of Object.keys(this.localCache))this.localCache[t]&&!n.has(t)&&(this.notifyListeners(t,null),e.push(t));return e}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(t,e){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[t]||(this.listeners[t]=new Set,this._get(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&this.stopPolling()}}sn.type="LOCAL";const on=sn;function an(t){return`__${t}${Math.floor(1e6*Math.random())}`}an("rcb"),new xt(3e4,6e4);class cn{constructor(t){this.providerId=cn.PROVIDER_ID,this.auth=we(t)}verifyPhoneNumber(t,e){return async function(t,e,n){var i;const r=await n.verify();try{let s;if(Rt("string"==typeof r,t,"argument-error"),Rt("recaptcha"===n.type,t,"argument-error"),s="string"==typeof e?{phoneNumber:e}:e,"session"in s){const e=s.session;if("phoneNumber"in s){Rt("enroll"===e.type,t,"internal-error");const n=await function(t,e){return Bt(t,"POST","/v2/accounts/mfaEnrollment:start",Object.assign({tenantId:t.tenantId},e))}(t,{idToken:e.credential,phoneEnrollmentInfo:{phoneNumber:s.phoneNumber,recaptchaToken:r}});return n.phoneSessionInfo.sessionInfo}{Rt("signin"===e.type,t,"internal-error");const n=(null===(i=s.multiFactorHint)||void 0===i?void 0:i.uid)||s.multiFactorUid;Rt(n,t,"missing-multi-factor-info");const o=await function(t,e){return Bt(t,"POST","/v2/accounts/mfaSignIn:start",Object.assign({tenantId:t.tenantId},e))}(t,{mfaPendingCredential:e.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:r}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:e}=await async function(t,e){return Bt(t,"POST","/v1/accounts:sendVerificationCode",jt(t,e))}(t,{phoneNumber:s.phoneNumber,recaptchaToken:r});return e}}finally{n._reset()}}(this.auth,t,T(e))}static credential(t,e){return ke._fromVerification(t,e)}static credentialFromResult(t){const e=t;return cn.credentialFromTaggedObject(e)}static credentialFromError(t){return cn.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{phoneNumber:e,temporaryProof:n}=t;return e&&n?ke._fromTokenResponse(e,n):null}}cn.PROVIDER_ID="phone",cn.PHONE_SIGN_IN_METHOD="phone";class un extends be{constructor(t){super("custom","custom"),this.params=t}_getIdTokenResponse(t){return Te(t,this._buildIdpRequest())}_linkToIdToken(t,e){return Te(t,this._buildIdpRequest(e))}_getReauthenticationResolver(t){return Te(t,this._buildIdpRequest())}_buildIdpRequest(t){const e={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return t&&(e.idToken=t),e}}function ln(t){return async function(t,e,n=!1){const i="signIn",r=await Fe(t,i,e),s=await xe._fromIdTokenResponse(t,i,r);return n||await t._updateCurrentUser(s.user),s}(t.auth,new un(t),t.bypassAuthState)}function hn(t){const{auth:e,user:n}=t;return Rt(n,e,"internal-error"),async function(t,e,n=!1){const{auth:i}=t,r="reauthenticate";try{const s=await Jt(t,Fe(i,r,e,t),n);Rt(s.idToken,i,"internal-error");const o=Xt(s.idToken);Rt(o,i,"internal-error");const{sub:a}=o;return Rt(t.uid===a,i,"user-mismatch"),xe._forOperation(t,r,s)}catch(t){throw"auth/user-not-found"===(null==t?void 0:t.code)&&St(i,"user-mismatch"),t}}(n,new un(t),t.bypassAuthState)}async function dn(t){const{auth:e,user:n}=t;return Rt(n,e,"internal-error"),async function(t,e,n=!1){const i=await Jt(t,e._linkToIdToken(t.auth,await t.getIdToken()),n);return xe._forOperation(t,"link",i)}(n,new un(t),t.bypassAuthState)}class fn{constructor(t,e,n,i,r=!1){this.auth=t,this.resolver=n,this.user=i,this.bypassAuthState=r,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(e)?e:[e]}execute(){return new Promise((async(t,e)=>{this.pendingPromise={resolve:t,reject:e};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(t){this.reject(t)}}))}async onAuthEvent(t){const{urlResponse:e,sessionId:n,postBody:i,tenantId:r,error:s,type:o}=t;if(s)return void this.reject(s);const a={auth:this.auth,requestUri:e,sessionId:n,tenantId:r||void 0,postBody:i||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(t){this.reject(t)}}onError(t){this.reject(t)}getIdpTask(t){switch(t){case"signInViaPopup":case"signInViaRedirect":return ln;case"linkViaPopup":case"linkViaRedirect":return dn;case"reauthViaPopup":case"reauthViaRedirect":return hn;default:St(this.auth,"internal-error")}}resolve(t){Ct(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(t),this.unregisterAndCleanUp()}reject(t){Ct(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(t),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const pn=new xt(2e3,1e4);class gn extends fn{constructor(t,e,n,i,r){super(t,e,i,r),this.provider=n,this.authWindow=null,this.pollId=null,gn.currentPopupAction&&gn.currentPopupAction.cancel(),gn.currentPopupAction=this}async executeNotNull(){const t=await this.execute();return Rt(t,this.auth,"internal-error"),t}async onExecution(){Ct(1===this.filter.length,"Popup operations only handle one event");const t=Ke();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],t),this.authWindow.associatedEvent=t,this.resolver._originValidation(this.auth).catch((t=>{this.reject(t)})),this.resolver._isIframeWebStorageSupported(this.auth,(t=>{t||this.reject(kt(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var t;return(null===(t=this.authWindow)||void 0===t?void 0:t.associatedEvent)||null}cancel(){this.reject(kt(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,gn.currentPopupAction=null}pollUserCancellation(){const t=()=>{var e,n;(null===(n=null===(e=this.authWindow)||void 0===e?void 0:e.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(kt(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(t,pn.get())};t()}}gn.currentPopupAction=null;const mn=new Map;class yn extends fn{constructor(t,e,n=!1){super(t,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],e,void 0,n),this.eventId=null}async execute(){let t=mn.get(this.auth._key());if(!t){try{const e=await async function(t,e){const n=function(t){return se("pendingRedirect",t.config.apiKey,t.name)}(e),i="true"===await vn(t)._get(n);return await vn(t)._remove(n),i}(this.resolver,this.auth)?await super.execute():null;t=()=>Promise.resolve(e)}catch(e){t=()=>Promise.reject(e)}mn.set(this.auth._key(),t)}return t()}async onAuthEvent(t){if("signInViaRedirect"===t.type)return super.onAuthEvent(t);if("unknown"!==t.type){if(t.eventId){const e=await this.auth._redirectUserForId(t.eventId);if(e)return this.user=e,super.onAuthEvent(t);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function vn(t){return Dt(t._redirectPersistence)}async function wn(t,e,n=!1){const i=we(t),r=function(t,e){return e?Dt(e):(Rt(t._popupRedirectResolver,t,"argument-error"),t._popupRedirectResolver)}(i,e),s=new yn(i,r,n),o=await s.execute();return o&&!n&&(delete o.user._redirectEventId,await i._persistUserIfCurrent(o.user),await i._setRedirectUser(null,e)),o}class _n{constructor(t){this.auth=t,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(t){this.consumers.add(t),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,t)&&(this.sendToConsumer(this.queuedRedirectEvent,t),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(t){this.consumers.delete(t)}onEvent(t){if(this.hasEventBeenHandled(t))return!1;let e=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(t,n)&&(e=!0,this.sendToConsumer(t,n),this.saveEventToCache(t))})),this.hasHandledPotentialRedirect||!function(t){switch(t.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return In(t);default:return!1}}(t)||(this.hasHandledPotentialRedirect=!0,e||(this.queuedRedirectEvent=t,e=!0)),e}sendToConsumer(t,e){var n;if(t.error&&!In(t)){const i=(null===(n=t.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";e.onError(kt(this.auth,i))}else e.onAuthEvent(t)}isEventForConsumer(t,e){const n=null===e.eventId||!!t.eventId&&t.eventId===e.eventId;return e.filter.includes(t.type)&&n}hasEventBeenHandled(t){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(bn(t))}saveEventToCache(t){this.cachedEventUids.add(bn(t)),this.lastProcessedEventTime=Date.now()}}function bn(t){return[t.type,t.eventId,t.sessionId,t.tenantId].filter((t=>t)).join("-")}function In({type:t,error:e}){return"unknown"===t&&"auth/no-auth-event"===(null==e?void 0:e.code)}const Tn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,En=/^https?/;function Sn(t){const e=Pt(),{protocol:n,hostname:i}=new URL(e);if(t.startsWith("chrome-extension://")){const r=new URL(t);return""===r.hostname&&""===i?"chrome-extension:"===n&&t.replace("chrome-extension://","")===e.replace("chrome-extension://",""):"chrome-extension:"===n&&r.hostname===i}if(!En.test(n))return!1;if(Tn.test(t))return i===t;const r=t.replace(/\./g,"\\.");return new RegExp("^(.+\\."+r+"|"+r+")$","i").test(i)}const kn=new xt(3e4,6e4);function An(){const t=We().___jsl;if(null==t?void 0:t.H)for(const e of Object.keys(t.H))if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=[...t.H[e].L],t.CP)for(let e=0;e<t.CP.length;e++)t.CP[e]=null}let Rn=null;function Nn(t){return Rn=Rn||function(t){return new Promise(((e,n)=>{var i,r,s,o;function a(){An(),gapi.load("gapi.iframes",{callback:()=>{e(gapi.iframes.getContext())},ontimeout:()=>{An(),n(kt(t,"network-request-failed"))},timeout:kn.get()})}if(null===(r=null===(i=We().gapi)||void 0===i?void 0:i.iframes)||void 0===r?void 0:r.Iframe)e(gapi.iframes.getContext());else{if(!(null===(s=We().gapi)||void 0===s?void 0:s.load)){const e=an("iframefcb");return We()[e]=()=>{gapi.load?a():n(kt(t,"network-request-failed"))},o=`https://apis.google.com/js/api.js?onload=${e}`,new Promise(((t,e)=>{const n=document.createElement("script");n.setAttribute("src",o),n.onload=t,n.onerror=t=>{const n=kt("internal-error");n.customData=t,e(n)},n.type="text/javascript",n.charset="UTF-8",function(){var t,e;return null!==(e=null===(t=document.getElementsByTagName("head"))||void 0===t?void 0:t[0])&&void 0!==e?e:document}().appendChild(n)}))}a()}})).catch((t=>{throw Rn=null,t}))}(t),Rn}const Cn=new xt(5e3,15e3),On={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},Dn=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Pn(t){const e=t.config;Rt(e.authDomain,t,"auth-domain-config-required");const n=e.emulator?Mt(e,"emulator/auth/iframe"):`https://${t.config.authDomain}/__/auth/iframe`,i={apiKey:e.apiKey,appName:t.name,v:wt},r=Dn.get(t.config.apiHost);r&&(i.eid=r);const s=t._getFrameworks();return s.length&&(i.fw=s.join(",")),`${n}?${v(i).slice(1)}`}const Ln={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class xn{constructor(t){this.window=t,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(t){}}}function Mn(t,e,n,i,r,s){Rt(t.config.authDomain,t,"auth-domain-config-required"),Rt(t.config.apiKey,t,"invalid-api-key");const o={apiKey:t.config.apiKey,appName:t.name,authType:n,redirectUrl:i,v:wt,eventId:r};if(e instanceof Ne){e.setDefaultLanguage(t.languageCode),o.providerId=e.providerId||"",function(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}(e.getCustomParameters())||(o.customParameters=JSON.stringify(e.getCustomParameters()));for(const[t,e]of Object.entries(s||{}))o[t]=e}if(e instanceof Ce){const t=e.getScopes().filter((t=>""!==t));t.length>0&&(o.scopes=t.join(","))}t.tenantId&&(o.tid=t.tenantId);const a=o;for(const t of Object.keys(a))void 0===a[t]&&delete a[t];return`${function({config:t}){return t.emulator?Mt(t,"emulator/auth/handler"):`https://${t.authDomain}/__/auth/handler`}(t)}?${v(a).slice(1)}`}const Un="webStorageSupport",Fn=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=ze,this._completeRedirectFn=wn}async _openPopup(t,e,n,i){var r;return Ct(null===(r=this.eventManagers[t._key()])||void 0===r?void 0:r.manager,"_initialize() not called before _openPopup()"),function(t,e,n,i=500,r=600){const s=Math.max((window.screen.availHeight-r)/2,0).toString(),o=Math.max((window.screen.availWidth-i)/2,0).toString();let a="";const u=Object.assign(Object.assign({},Ln),{width:i.toString(),height:r.toString(),top:s,left:o}),l=c().toLowerCase();n&&(a=le(l)?"_blank":n),ce(l)&&(e=e||"http://localhost",u.scrollbars="yes");const h=Object.entries(u).reduce(((t,[e,n])=>`${t}${e}=${n},`),"");if(function(t=c()){var e;return ge(t)&&!!(null===(e=window.navigator)||void 0===e?void 0:e.standalone)}(l)&&"_self"!==a)return function(t,e){const n=document.createElement("a");n.href=t,n.target=e;const i=document.createEvent("MouseEvent");i.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(i)}(e||"",a),new xn(null);const d=window.open(e||"",a,h);Rt(d,t,"popup-blocked");try{d.focus()}catch(t){}return new xn(d)}(t,Mn(t,e,n,Pt(),i),Ke())}async _openRedirect(t,e,n,i){var r;return await this._originValidation(t),r=Mn(t,e,n,Pt(),i),We().location.href=r,new Promise((()=>{}))}_initialize(t){const e=t._key();if(this.eventManagers[e]){const{manager:t,promise:n}=this.eventManagers[e];return t?Promise.resolve(t):(Ct(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(t);return this.eventManagers[e]={promise:n},n}async initAndGetManager(t){const e=await async function(t){const e=await Nn(t),n=We().gapi;return Rt(n,t,"internal-error"),e.open({where:document.body,url:Pn(t),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:On,dontclear:!0},(e=>new Promise((async(n,i)=>{await e.restyle({setHideOnLeave:!1});const r=kt(t,"network-request-failed"),s=We().setTimeout((()=>{i(r)}),Cn.get());function o(){We().clearTimeout(s),n(e)}e.ping(o).then(o,(()=>{i(r)}))}))))}(t),n=new _n(t);return e.register("authEvent",(e=>(Rt(null==e?void 0:e.authEvent,t,"invalid-auth-event"),{status:n.onEvent(e.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[t._key()]={manager:n},this.iframes[t._key()]=e,n}_isIframeWebStorageSupported(t,e){this.iframes[t._key()].send(Un,{type:Un},(n=>{var i;const r=null===(i=null==n?void 0:n[0])||void 0===i?void 0:i[Un];void 0!==r&&e(!!r),St(t,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(t){const e=t._key();return this.originValidationPromises[e]||(this.originValidationPromises[e]=async function(t){if(t.config.emulator)return;const{authorizedDomains:e}=await async function(t,e={}){return Bt(t,"GET","/v1/projects",e)}(t);for(const t of e)try{if(Sn(t))return}catch(t){}St(t,"unauthorized-domain")}(t)),this.originValidationPromises[e]}get _shouldInitProactively(){return me()||ue()||ge()}};var Vn;class jn{constructor(t){this.auth=t,this.internalListeners=new Map}getUid(){var t;return this.assertAuthConfigured(),(null===(t=this.auth.currentUser)||void 0===t?void 0:t.uid)||null}async getToken(t){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(t)}:null}addAuthTokenListener(t){if(this.assertAuthConfigured(),this.internalListeners.has(t))return;const e=this.auth.onIdTokenChanged((e=>{var n;t((null===(n=e)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(t,e),this.updateProactiveRefresh()}removeAuthTokenListener(t){this.assertAuthConfigured();const e=this.internalListeners.get(t);e&&(this.internalListeners.delete(t),e(),this.updateProactiveRefresh())}assertAuthConfigured(){Rt(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}Vn="Browser",gt(new S("auth",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),{apiKey:i,authDomain:r}=n.options;return(t=>{Rt(i&&!i.includes(":"),"invalid-api-key",{appName:t.name}),Rt(!(null==r?void 0:r.includes(":")),"argument-error",{appName:t.name});const n={apiKey:i,authDomain:r,clientPlatform:Vn,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:ye(Vn)},s=new ve(t,n);return function(t,e){const n=(null==e?void 0:e.persistence)||[],i=(Array.isArray(n)?n:[n]).map(Dt);(null==e?void 0:e.errorMap)&&t._updateErrorMap(e.errorMap),t._initializeWithPersistence(i,null==e?void 0:e.popupRedirectResolver)}(s,e),s})(n)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((t,e,n)=>{t.getProvider("auth-internal").initialize()}))),gt(new S("auth-internal",(t=>{return e=we(t.getProvider("auth").getImmediate()),new jn(e);var e}),"PRIVATE").setInstantiationMode("EXPLICIT")),bt("@firebase/auth","0.17.1",function(t){switch(t){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";default:return}}(Vn));var Bn=function(t,e){return Bn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},Bn(t,e)};function Hn(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var qn,zn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{},$n=$n||{},Kn=zn||self;function Gn(){}function Wn(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function Xn(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Jn="closure_uid_"+(1e9*Math.random()>>>0),Qn=0;function Yn(t,e,n){return t.call.apply(t.bind,arguments)}function Zn(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function ti(t,e,n){return(ti=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?Yn:Zn).apply(null,arguments)}function ei(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function ni(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,i){for(var r=Array(arguments.length-2),s=2;s<arguments.length;s++)r[s-2]=arguments[s];return e.prototype[n].apply(t,r)}}function ii(){this.s=this.s,this.o=this.o}var ri={};ii.prototype.s=!1,ii.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,Jn)&&t[Jn]||(t[Jn]=++Qn)}(this);delete ri[t]}},ii.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};var si=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},oi=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r="string"==typeof t?t.split(""):t,s=0;s<i;s++)s in r&&e.call(n,r[s],s,t)};function ai(t){return Array.prototype.concat.apply([],arguments)}function ci(t){var e=t.length;if(0<e){for(var n=Array(e),i=0;i<e;i++)n[i]=t[i];return n}return[]}function ui(t){return/^[\s\xa0]*$/.test(t)}var li,hi=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function di(t,e){return-1!=t.indexOf(e)}function fi(t,e){return t<e?-1:t>e?1:0}t:{var pi=Kn.navigator;if(pi){var gi=pi.userAgent;if(gi){li=gi;break t}}li=""}function mi(t,e,n){for(var i in t)e.call(n,t[i],i,t)}function yi(t){var e={};for(var n in t)e[n]=t[n];return e}var vi="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function wi(t,e){for(var n,i,r=1;r<arguments.length;r++){for(n in i=arguments[r])t[n]=i[n];for(var s=0;s<vi.length;s++)n=vi[s],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function _i(t){return _i[" "](t),t}_i[" "]=Gn;var bi,Ii,Ti=di(li,"Opera"),Ei=di(li,"Trident")||di(li,"MSIE"),Si=di(li,"Edge"),ki=Si||Ei,Ai=di(li,"Gecko")&&!(di(li.toLowerCase(),"webkit")&&!di(li,"Edge"))&&!(di(li,"Trident")||di(li,"MSIE"))&&!di(li,"Edge"),Ri=di(li.toLowerCase(),"webkit")&&!di(li,"Edge");function Ni(){var t=Kn.document;return t?t.documentMode:void 0}t:{var Ci="",Oi=(Ii=li,Ai?/rv:([^\);]+)(\)|;)/.exec(Ii):Si?/Edge\/([\d\.]+)/.exec(Ii):Ei?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Ii):Ri?/WebKit\/(\S+)/.exec(Ii):Ti?/(?:Version)[ \/]?(\S+)/.exec(Ii):void 0);if(Oi&&(Ci=Oi?Oi[1]:""),Ei){var Di=Ni();if(null!=Di&&Di>parseFloat(Ci)){bi=String(Di);break t}}bi=Ci}var Pi,Li={};function xi(){return t=Li,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){for(var t=0,e=hi(String(bi)).split("."),n=hi("9").split("."),i=Math.max(e.length,n.length),r=0;0==t&&r<i;r++){var s=e[r]||"",o=n[r]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],o=/(\d*)(\D*)(.*)/.exec(o)||["","","",""],0==s[0].length&&0==o[0].length)break;t=fi(0==s[1].length?0:parseInt(s[1],10),0==o[1].length?0:parseInt(o[1],10))||fi(0==s[2].length,0==o[2].length)||fi(s[2],o[2]),s=s[3],o=o[3]}while(0==t)}return 0<=t}();var t}Kn.document&&Ei?Pi=Ni()||parseInt(bi,10)||void 0:Pi=void 0;var Mi=Pi,Ui=function(){if(!Kn.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Kn.addEventListener("test",Gn,e),Kn.removeEventListener("test",Gn,e)}catch(t){}return t}();function Fi(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function Vi(t,e){if(Fi.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(Ai){t:{try{_i(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:ji[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&Vi.Z.h.call(this)}}Fi.prototype.h=function(){this.defaultPrevented=!0},ni(Vi,Fi);var ji={2:"touch",3:"pen",4:"mouse"};Vi.prototype.h=function(){Vi.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var Bi="closure_listenable_"+(1e6*Math.random()|0),Hi=0;function qi(t,e,n,i,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.ia=r,this.key=++Hi,this.ca=this.fa=!1}function zi(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function $i(t){this.src=t,this.g={},this.h=0}function Ki(t,e){var n=e.type;if(n in t.g){var i,r=t.g[n],s=si(r,e);(i=0<=s)&&Array.prototype.splice.call(r,s,1),i&&(zi(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function Gi(t,e,n,i){for(var r=0;r<t.length;++r){var s=t[r];if(!s.ca&&s.listener==e&&s.capture==!!n&&s.ia==i)return r}return-1}$i.prototype.add=function(t,e,n,i,r){var s=t.toString();(t=this.g[s])||(t=this.g[s]=[],this.h++);var o=Gi(t,e,i,r);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new qi(e,this.src,s,!!i,r)).fa=n,t.push(e)),e};var Wi="closure_lm_"+(1e6*Math.random()|0),Xi={};function Ji(t,e,n,i,r){if(i&&i.once)return Yi(t,e,n,i,r);if(Array.isArray(e)){for(var s=0;s<e.length;s++)Ji(t,e[s],n,i,r);return null}return n=sr(n),t&&t[Bi]?t.N(e,n,Xn(i)?!!i.capture:!!i,r):Qi(t,e,n,!1,i,r)}function Qi(t,e,n,i,r,s){if(!e)throw Error("Invalid event type");var o=Xn(r)?!!r.capture:!!r,a=ir(t);if(a||(t[Wi]=a=new $i(t)),(n=a.add(e,n,i,o,s)).proxy)return n;if(i=function(){var t=nr;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)Ui||(r=o),void 0===r&&(r=!1),t.addEventListener(e.toString(),i,r);else if(t.attachEvent)t.attachEvent(er(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}return n}function Yi(t,e,n,i,r){if(Array.isArray(e)){for(var s=0;s<e.length;s++)Yi(t,e[s],n,i,r);return null}return n=sr(n),t&&t[Bi]?t.O(e,n,Xn(i)?!!i.capture:!!i,r):Qi(t,e,n,!0,i,r)}function Zi(t,e,n,i,r){if(Array.isArray(e))for(var s=0;s<e.length;s++)Zi(t,e[s],n,i,r);else i=Xn(i)?!!i.capture:!!i,n=sr(n),t&&t[Bi]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=Gi(s=t.g[e],n,i,r))&&(zi(s[n]),Array.prototype.splice.call(s,n,1),0==s.length&&(delete t.g[e],t.h--))):t&&(t=ir(t))&&(e=t.g[e.toString()],t=-1,e&&(t=Gi(e,n,i,r)),(n=-1<t?e[t]:null)&&tr(n))}function tr(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[Bi])Ki(e.i,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(er(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=ir(e))?(Ki(n,t),0==n.h&&(n.src=null,e[Wi]=null)):zi(t)}}}function er(t){return t in Xi?Xi[t]:Xi[t]="on"+t}function nr(t,e){if(t.ca)t=!0;else{e=new Vi(e,this);var n=t.listener,i=t.ia||t.src;t.fa&&tr(t),t=n.call(i,e)}return t}function ir(t){return(t=t[Wi])instanceof $i?t:null}var rr="__closure_events_fn_"+(1e9*Math.random()>>>0);function sr(t){return"function"==typeof t?t:(t[rr]||(t[rr]=function(e){return t.handleEvent(e)}),t[rr])}function or(){ii.call(this),this.i=new $i(this),this.P=this,this.I=null}function ar(t,e){var n,i=t.I;if(i)for(n=[];i;i=i.I)n.push(i);if(t=t.P,i=e.type||e,"string"==typeof e)e=new Fi(e,t);else if(e instanceof Fi)e.target=e.target||t;else{var r=e;wi(e=new Fi(i,t),r)}if(r=!0,n)for(var s=n.length-1;0<=s;s--){var o=e.g=n[s];r=cr(o,i,!0,e)&&r}if(r=cr(o=e.g=t,i,!0,e)&&r,r=cr(o,i,!1,e)&&r,n)for(s=0;s<n.length;s++)r=cr(o=e.g=n[s],i,!1,e)&&r}function cr(t,e,n,i){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var r=!0,s=0;s<e.length;++s){var o=e[s];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&Ki(t.i,o),r=!1!==a.call(c,i)&&r}}return r&&!i.defaultPrevented}ni(or,ii),or.prototype[Bi]=!0,or.prototype.removeEventListener=function(t,e,n,i){Zi(this,t,e,n,i)},or.prototype.M=function(){if(or.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],i=0;i<n.length;i++)zi(n[i]);delete e.g[t],e.h--}}this.I=null},or.prototype.N=function(t,e,n,i){return this.i.add(String(t),e,!1,n,i)},or.prototype.O=function(t,e,n,i){return this.i.add(String(t),e,!0,n,i)};var ur=Kn.JSON.stringify;function lr(){var t=vr,e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var hr,dr=function(){function t(){this.h=this.g=null}return t.prototype.add=function(t,e){var n=fr.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n},t}(),fr=new(function(){function t(t,e){this.i=t,this.j=e,this.h=0,this.g=null}return t.prototype.get=function(){var t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t},t}())((function(){return new pr}),(function(t){return t.reset()})),pr=function(){function t(){this.next=this.g=this.h=null}return t.prototype.set=function(t,e){this.h=t,this.g=e,this.next=null},t.prototype.reset=function(){this.next=this.g=this.h=null},t}();function gr(t){Kn.setTimeout((function(){throw t}),0)}function mr(t,e){hr||function(){var t=Kn.Promise.resolve(void 0);hr=function(){t.then(wr)}}(),yr||(hr(),yr=!0),vr.add(t,e)}var yr=!1,vr=new dr;function wr(){for(var t;t=lr();){try{t.h.call(t.g)}catch(t){gr(t)}var e=fr;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}yr=!1}function _r(t,e){or.call(this),this.h=t||1,this.g=e||Kn,this.j=ti(this.kb,this),this.l=Date.now()}function br(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function Ir(t,e,n){if("function"==typeof t)n&&(t=ti(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=ti(t.handleEvent,t)}return 2147483647<Number(e)?-1:Kn.setTimeout(t,e||0)}function Tr(t){t.g=Ir((function(){t.g=null,t.i&&(t.i=!1,Tr(t))}),t.j);var e=t.h;t.h=null,t.m.apply(null,e)}ni(_r,or),(qn=_r.prototype).da=!1,qn.S=null,qn.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),ar(this,"tick"),this.da&&(br(this),this.start()))}},qn.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},qn.M=function(){_r.Z.M.call(this),br(this),delete this.g};var Er=function(t){function e(e,n){var i=t.call(this)||this;return i.m=e,i.j=n,i.h=null,i.i=!1,i.g=null,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}Bn(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.l=function(t){this.h=arguments,this.g?this.i=!0:Tr(this)},e.prototype.M=function(){t.prototype.M.call(this),this.g&&(Kn.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)},e}(ii);function Sr(t){ii.call(this),this.h=t,this.g={}}ni(Sr,ii);var kr=[];function Ar(t,e,n,i){Array.isArray(n)||(n&&(kr[0]=n.toString()),n=kr);for(var r=0;r<n.length;r++){var s=Ji(e,n[r],i||t.handleEvent,!1,t.h||t);if(!s)break;t.g[s.key]=s}}function Rr(t){mi(t.g,(function(t,e){this.g.hasOwnProperty(e)&&tr(t)}),t),t.g={}}function Nr(){this.g=!0}function Cr(t,e,n,i){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var i=n[t];if(!(2>i.length)){var r=i[1];if(Array.isArray(r)&&!(1>r.length)){var s=r[0];if("noop"!=s&&"stop"!=s&&"close"!=s)for(var o=1;o<r.length;o++)r[o]=""}}}return ur(n)}catch(t){return e}}(t,n)+(i?" "+i:"")}))}Sr.prototype.M=function(){Sr.Z.M.call(this),Rr(this)},Sr.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Nr.prototype.Aa=function(){this.g=!1},Nr.prototype.info=function(){};var Or={},Dr=null;function Pr(){return Dr=Dr||new or}function Lr(t){Fi.call(this,Or.Ma,t)}function xr(t){var e=Pr();ar(e,new Lr(e,t))}function Mr(t,e){Fi.call(this,Or.STAT_EVENT,t),this.stat=e}function Ur(t){var e=Pr();ar(e,new Mr(e,t))}function Fr(t,e){Fi.call(this,Or.Na,t),this.size=e}function Vr(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return Kn.setTimeout((function(){t()}),e)}Or.Ma="serverreachability",ni(Lr,Fi),Or.STAT_EVENT="statevent",ni(Mr,Fi),Or.Na="timingevent",ni(Fr,Fi);var jr={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},Br={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Hr(){}function qr(t){return t.h||(t.h=t.i())}function zr(){}Hr.prototype.h=null;var $r,Kr={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function Gr(){Fi.call(this,"d")}function Wr(){Fi.call(this,"c")}function Xr(){}function Jr(t,e,n,i){this.l=t,this.j=e,this.m=n,this.X=i||1,this.V=new Sr(this),this.P=Yr,t=ki?125:void 0,this.W=new _r(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new Qr}function Qr(){this.i=null,this.g="",this.h=!1}ni(Gr,Fi),ni(Wr,Fi),ni(Xr,Hr),Xr.prototype.g=function(){return new XMLHttpRequest},Xr.prototype.i=function(){return{}},$r=new Xr;var Yr=45e3,Zr={},ts={};function es(t,e,n){t.K=1,t.v=Es(vs(e)),t.s=n,t.U=!0,ns(t,null)}function ns(t,e){t.F=Date.now(),os(t),t.A=vs(t.v);var n=t.A,i=t.X;Array.isArray(i)||(i=[String(i)]),Us(n.h,"t",i),t.C=0,n=t.l.H,t.h=new Qr,t.g=Vo(t.l,n?e:null,!t.s),0<t.O&&(t.L=new Er(ti(t.Ia,t,t.g),t.O)),Ar(t.V,t.g,"readystatechange",t.gb),e=t.H?yi(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),xr(1),function(t,e,n,i,r,s){t.info((function(){if(t.g)if(s)for(var o="",a=s.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=s;return"XMLHTTP REQ ("+i+") [attempt "+r+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function is(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function rs(t,e,n){for(var i,r=!0;!t.I&&t.C<n.length;){if((i=ss(t,n))==ts){4==e&&(t.o=4,Ur(14),r=!1),Cr(t.j,t.m,null,"[Incomplete Response]");break}if(i==Zr){t.o=4,Ur(15),Cr(t.j,t.m,n,"[Invalid Chunk]"),r=!1;break}Cr(t.j,t.m,i,null),hs(t,i)}is(t)&&i!=ts&&i!=Zr&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,Ur(16),r=!1),t.i=t.i&&r,r?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Oo(e),e.L=!0,Ur(11))):(Cr(t.j,t.m,n,"[Invalid Chunked Response]"),ls(t),us(t))}function ss(t,e){var n=t.C,i=e.indexOf("\n",n);return-1==i?ts:(n=Number(e.substring(n,i)),isNaN(n)?Zr:(i+=1)+n>e.length?ts:(e=e.substr(i,n),t.C=i+n,e))}function os(t){t.Y=Date.now()+t.P,as(t,t.P)}function as(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=Vr(ti(t.eb,t),e)}function cs(t){t.B&&(Kn.clearTimeout(t.B),t.B=null)}function us(t){0==t.l.G||t.I||Lo(t.l,t)}function ls(t){cs(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,br(t.W),Rr(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function hs(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||zs(n.i,t)))if(n.I=t.N,!t.J&&zs(n.i,t)&&3==n.G){try{var i=n.Ca.g.parse(e)}catch(s){i=null}if(Array.isArray(i)&&3==i.length){var r=i;if(0==r[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Po(n),Io(n)}Co(n),Ur(18)}}else n.ta=r[1],0<n.ta-n.U&&37500>r[2]&&n.N&&0==n.A&&!n.v&&(n.v=Vr(ti(n.ab,n),6e3));if(1>=qs(n.i)&&n.ka){try{n.ka()}catch(s){}n.ka=void 0}}else Mo(n,11)}else if((t.J||n.g==t)&&Po(n),!ui(e))for(r=n.Ca.g.parse(e),e=0;e<r.length;e++){var s=r[e];if(n.U=s[0],s=s[1],2==n.G)if("c"==s[0]){n.J=s[1],n.la=s[2];var o=s[3];null!=o&&(n.ma=o,n.h.info("VER="+n.ma));var a=s[4];null!=a&&(n.za=a,n.h.info("SVER="+n.za));var c=s[5];null!=c&&"number"==typeof c&&0<c&&(i=1.5*c,n.K=i,n.h.info("backChannelRequestTimeoutMs_="+i)),i=n;var u=t.g;if(u){var l=u.g?u.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(l){var h=i.i;!h.g&&(di(l,"spdy")||di(l,"quic")||di(l,"h2"))&&(h.j=h.l,h.g=new Set,h.h&&($s(h,h.h),h.h=null))}if(i.D){var d=u.g?u.g.getResponseHeader("X-HTTP-Session-Id"):null;d&&(i.sa=d,Ts(i.F,i.D,d))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var f=t;if((i=n).oa=Fo(i,i.H?i.la:null,i.W),f.J){Ks(i.i,f);var p=f,g=i.K;g&&p.setTimeout(g),p.B&&(cs(p),os(p)),i.g=f}else No(i);0<n.l.length&&So(n)}else"stop"!=s[0]&&"close"!=s[0]||Mo(n,7);else 3==n.G&&("stop"==s[0]||"close"==s[0]?"stop"==s[0]?Mo(n,7):bo(n):"noop"!=s[0]&&n.j&&n.j.wa(s),n.A=0)}xr(4)}catch(s){}}function ds(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(Wn(t)||"string"==typeof t)oi(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(Wn(t)||"string"==typeof t){n=[];for(var i=t.length,r=0;r<i;r++)n.push(r)}else for(r in n=[],i=0,t)n[i++]=r;i=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(Wn(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}(t),r=i.length;for(var s=0;s<r;s++)e.call(void 0,i[s],n&&n[s],t)}}function fs(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof fs)for(n=t.T(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function ps(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var i=t.g[e];gs(t.h,i)&&(t.g[n++]=i),e++}t.g.length=n}if(t.i!=t.g.length){var r={};for(n=e=0;e<t.g.length;)gs(r,i=t.g[e])||(t.g[n++]=i,r[i]=1),e++;t.g.length=n}}function gs(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(qn=Jr.prototype).setTimeout=function(t){this.P=t},qn.gb=function(t){t=t.target;var e=this.L;e&&3==mo(t)?e.l():this.Ia(t)},qn.Ia=function(t){try{if(t==this.g)t:{var e=mo(this.g),n=this.g.Da(),i=this.g.ba();if(!(3>e)&&(3!=e||ki||this.g&&(this.h.h||this.g.ga()||yo(this.g)))){this.I||4!=e||7==n||xr(8==n||0>=i?3:2),cs(this);var r=this.g.ba();this.N=r;e:if(is(this)){var s=yo(this.g);t="";var o=s.length,a=4==mo(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){ls(this),us(this);var c="";break e}this.h.i=new Kn.TextDecoder}for(n=0;n<o;n++)this.h.h=!0,t+=this.h.i.decode(s[n],{stream:a&&n==o-1});s.splice(0,o),this.h.g+=t,this.C=0,c=this.h.g}else c=this.g.ga();if(this.i=200==r,function(t,e,n,i,r,s,o){t.info((function(){return"XMLHTTP RESP ("+i+") [ attempt "+r+"]: "+e+"\n"+n+"\n"+s+" "+o}))}(this.j,this.u,this.A,this.m,this.X,e,r),this.i){if(this.$&&!this.J){e:{if(this.g){var u,l=this.g;if((u=l.g?l.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!ui(u)){var h=u;break e}}h=null}if(!(r=h)){this.i=!1,this.o=3,Ur(12),ls(this),us(this);break t}Cr(this.j,this.m,r,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,hs(this,r)}this.U?(rs(this,e,c),ki&&this.i&&3==e&&(Ar(this.V,this.W,"tick",this.fb),this.W.start())):(Cr(this.j,this.m,c,null),hs(this,c)),4==e&&ls(this),this.i&&!this.I&&(4==e?Lo(this.l,this):(this.i=!1,os(this)))}else 400==r&&0<c.indexOf("Unknown SID")?(this.o=3,Ur(12)):(this.o=0,Ur(13)),ls(this),us(this)}}}catch(e){}},qn.fb=function(){if(this.g){var t=mo(this.g),e=this.g.ga();this.C<e.length&&(cs(this),rs(this,t,e),this.i&&4!=t&&os(this))}},qn.cancel=function(){this.I=!0,ls(this)},qn.eb=function(){this.B=null;var t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(xr(3),Ur(17)),ls(this),this.o=2,us(this)):as(this,this.Y-t)},(qn=fs.prototype).R=function(){ps(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},qn.T=function(){return ps(this),this.g.concat()},qn.get=function(t,e){return gs(this.h,t)?this.h[t]:e},qn.set=function(t,e){gs(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},qn.forEach=function(t,e){for(var n=this.T(),i=0;i<n.length;i++){var r=n[i],s=this.get(r);t.call(e,s,r,this)}};var ms=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function ys(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof ys){this.g=void 0!==e?e:t.g,ws(this,t.j),this.s=t.s,_s(this,t.i),bs(this,t.m),this.l=t.l,e=t.h;var n=new Ps;n.i=e.i,e.g&&(n.g=new fs(e.g),n.h=e.h),Is(this,n),this.o=t.o}else t&&(n=String(t).match(ms))?(this.g=!!e,ws(this,n[1]||"",!0),this.s=Ss(n[2]||""),_s(this,n[3]||"",!0),bs(this,n[4]),this.l=Ss(n[5]||"",!0),Is(this,n[6]||"",!0),this.o=Ss(n[7]||"")):(this.g=!!e,this.h=new Ps(null,this.g))}function vs(t){return new ys(t)}function ws(t,e,n){t.j=n?Ss(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function _s(t,e,n){t.i=n?Ss(e,!0):e}function bs(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function Is(t,e,n){e instanceof Ps?(t.h=e,function(t,e){e&&!t.j&&(Ls(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(xs(this,e),Us(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=ks(e,Os)),t.h=new Ps(e,t.g))}function Ts(t,e,n){t.h.set(e,n)}function Es(t){return Ts(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function Ss(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function ks(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,As),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function As(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}ys.prototype.toString=function(){var t=[],e=this.j;e&&t.push(ks(e,Rs,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(ks(e,Rs,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(ks(n,"/"==n.charAt(0)?Cs:Ns,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",ks(n,Ds)),t.join("")};var Rs=/[#\/\?@]/g,Ns=/[#\?:]/g,Cs=/[#\?]/g,Os=/[#\?@]/g,Ds=/#/g;function Ps(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Ls(t){t.g||(t.g=new fs,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),r=null;if(0<=i){var s=t[n].substring(0,i);r=t[n].substring(i+1)}else s=t[n];e(s,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function xs(t,e){Ls(t),e=Fs(t,e),gs(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,gs((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&ps(t)))}function Ms(t,e){return Ls(t),e=Fs(t,e),gs(t.g.h,e)}function Us(t,e,n){xs(t,e),0<n.length&&(t.i=null,t.g.set(Fs(t,e),ci(n)),t.h+=n.length)}function Fs(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}(qn=Ps.prototype).add=function(t,e){Ls(this),this.i=null,t=Fs(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},qn.forEach=function(t,e){Ls(this),this.g.forEach((function(n,i){oi(n,(function(n){t.call(e,n,i,this)}),this)}),this)},qn.T=function(){Ls(this);for(var t=this.g.R(),e=this.g.T(),n=[],i=0;i<e.length;i++)for(var r=t[i],s=0;s<r.length;s++)n.push(e[i]);return n},qn.R=function(t){Ls(this);var e=[];if("string"==typeof t)Ms(this,t)&&(e=ai(e,this.g.get(Fs(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=ai(e,t[n])}return e},qn.set=function(t,e){return Ls(this),this.i=null,Ms(this,t=Fs(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},qn.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},qn.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var i=e[n],r=encodeURIComponent(String(i));i=this.R(i);for(var s=0;s<i.length;s++){var o=r;""!==i[s]&&(o+="="+encodeURIComponent(String(i[s]))),t.push(o)}}return this.i=t.join("&")};var Vs=function(t,e){this.h=t,this.g=e};function js(t){this.l=t||Bs,t=Kn.PerformanceNavigationTiming?0<(t=Kn.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Kn.g&&Kn.g.Ea&&Kn.g.Ea()&&Kn.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}var Bs=10;function Hs(t){return!!t.h||!!t.g&&t.g.size>=t.j}function qs(t){return t.h?1:t.g?t.g.size:0}function zs(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function $s(t,e){t.g?t.g.add(e):t.h=e}function Ks(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function Gs(t){var e,n;if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){var i=t.i;try{for(var r=Hn(t.g.values()),s=r.next();!s.done;s=r.next()){var o=s.value;i=i.concat(o.D)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return i}return ci(t.i)}function Ws(){}function Xs(){this.g=new Ws}function Js(t,e,n){var i=n||"";try{ds(t,(function(t,n){var r=t;Xn(t)&&(r=ur(t)),e.push(i+n+"="+encodeURIComponent(r))}))}catch(t){throw e.push(i+"type="+encodeURIComponent("_badmap")),t}}function Qs(t,e,n,i,r){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,r(i)}catch(t){}}function Ys(t){this.l=t.$b||null,this.j=t.ib||!1}function Zs(t,e){or.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=to,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}js.prototype.cancel=function(){var t,e;if(this.i=Gs(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){try{for(var n=Hn(this.g.values()),i=n.next();!i.done;i=n.next())i.value.cancel()}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.g.clear()}},Ws.prototype.stringify=function(t){return Kn.JSON.stringify(t,void 0)},Ws.prototype.parse=function(t){return Kn.JSON.parse(t,void 0)},ni(Ys,Hr),Ys.prototype.g=function(){return new Zs(this.l,this.j)},Ys.prototype.i=function(t){return function(){return t}}({}),ni(Zs,or);var to=0;function eo(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function no(t){t.readyState=4,t.l=null,t.j=null,t.A=null,io(t)}function io(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(qn=Zs.prototype).open=function(t,e){if(this.readyState!=to)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,io(this)},qn.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;var e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||Kn).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},qn.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,no(this)),this.readyState=to},qn.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,io(this)),this.g&&(this.readyState=3,io(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==Kn.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;eo(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},qn.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?no(this):io(this),3==this.readyState&&eo(this)}},qn.Ua=function(t){this.g&&(this.response=this.responseText=t,no(this))},qn.Ta=function(t){this.g&&(this.response=t,no(this))},qn.ha=function(){this.g&&no(this)},qn.setRequestHeader=function(t,e){this.v.append(t,e)},qn.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},qn.getAllResponseHeaders=function(){if(!this.h)return"";for(var t=[],e=this.h.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(Zs.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var ro=Kn.JSON.parse;function so(t){or.call(this),this.headers=new fs,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=oo,this.K=this.L=!1}ni(so,or);var oo="",ao=/^https?$/i,co=["POST","PUT"];function uo(t){return"content-type"==t.toLowerCase()}function lo(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,ho(t),po(t)}function ho(t){t.D||(t.D=!0,ar(t,"complete"),ar(t,"error"))}function fo(t){if(t.h&&void 0!==$n&&(!t.C[1]||4!=mo(t)||2!=t.ba()))if(t.v&&4==mo(t))Ir(t.Fa,0,t);else if(ar(t,"readystatechange"),4==mo(t)){t.h=!1;try{var e,n=t.ba();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break t;default:i=!1}if(!(e=i)){var r;if(r=0===n){var s=String(t.H).match(ms)[1]||null;if(!s&&Kn.self&&Kn.self.location){var o=Kn.self.location.protocol;s=o.substr(0,o.length-1)}r=!ao.test(s?s.toLowerCase():"")}e=r}if(e)ar(t,"complete"),ar(t,"success");else{t.m=6;try{var a=2<mo(t)?t.g.statusText:""}catch(t){a=""}t.j=a+" ["+t.ba()+"]",ho(t)}}finally{po(t)}}}function po(t,e){if(t.g){go(t);var n=t.g,i=t.C[0]?Gn:null;t.g=null,t.C=null,e||ar(t,"ready");try{n.onreadystatechange=i}catch(t){}}}function go(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(Kn.clearTimeout(t.A),t.A=null)}function mo(t){return t.g?t.g.readyState:0}function yo(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case oo:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function vo(t,e,n){t:{for(i in n){var i=!1;break t}i=!0}i||(n=function(t){var e="";return mi(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Ts(t,e,n))}function wo(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function _o(t){this.za=0,this.l=[],this.h=new Nr,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=wo("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=wo("baseRetryDelayMs",5e3,t),this.$a=wo("retryDelaySeedMs",1e4,t),this.Ya=wo("forwardChannelMaxRetries",2,t),this.ra=wo("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new js(t&&t.concurrentRequestLimit),this.Ca=new Xs,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function bo(t){if(To(t),3==t.G){var e=t.V++,n=vs(t.F);Ts(n,"SID",t.J),Ts(n,"RID",e),Ts(n,"TYPE","terminate"),Ao(t,n),(e=new Jr(t,t.h,e,void 0)).K=2,e.v=Es(vs(n)),n=!1,Kn.navigator&&Kn.navigator.sendBeacon&&(n=Kn.navigator.sendBeacon(e.v.toString(),"")),!n&&Kn.Image&&((new Image).src=e.v,n=!0),n||(e.g=Vo(e.l,null),e.g.ea(e.v)),e.F=Date.now(),os(e)}Uo(t)}function Io(t){t.g&&(Oo(t),t.g.cancel(),t.g=null)}function To(t){Io(t),t.u&&(Kn.clearTimeout(t.u),t.u=null),Po(t),t.i.cancel(),t.m&&("number"==typeof t.m&&Kn.clearTimeout(t.m),t.m=null)}function Eo(t,e){t.l.push(new Vs(t.Za++,e)),3==t.G&&So(t)}function So(t){Hs(t.i)||t.m||(t.m=!0,mr(t.Ha,t),t.C=0)}function ko(t,e){var n;n=e?e.m:t.V++;var i=vs(t.F);Ts(i,"SID",t.J),Ts(i,"RID",n),Ts(i,"AID",t.U),Ao(t,i),t.o&&t.s&&vo(i,t.o,t.s),n=new Jr(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=Ro(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),$s(t.i,n),es(n,i,e)}function Ao(t,e){t.j&&ds({},(function(t,n){Ts(e,n,t)}))}function Ro(t,e,n){n=Math.min(t.l.length,n);var i=t.j?ti(t.j.Oa,t.j,t):null;t:for(var r=t.l,s=-1;;){var o=["count="+n];-1==s?0<n?(s=r[0].h,o.push("ofs="+s)):s=0:o.push("ofs="+s);for(var a=!0,c=0;c<n;c++){var u=r[c].h,l=r[c].g;if(0>(u-=s))s=Math.max(0,r[c].h-100),a=!1;else try{Js(l,o,"req"+u+"_")}catch(t){i&&i(l)}}if(a){i=o.join("&");break t}}return t=t.l.splice(0,n),e.D=t,i}function No(t){t.g||t.u||(t.Y=1,mr(t.Ga,t),t.A=0)}function Co(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=Vr(ti(t.Ga,t),xo(t,t.A)),t.A++,0))}function Oo(t){null!=t.B&&(Kn.clearTimeout(t.B),t.B=null)}function Do(t){t.g=new Jr(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=vs(t.oa);Ts(e,"RID","rpc"),Ts(e,"SID",t.J),Ts(e,"CI",t.N?"0":"1"),Ts(e,"AID",t.U),Ao(t,e),Ts(e,"TYPE","xmlhttp"),t.o&&t.s&&vo(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=Es(vs(e)),n.s=null,n.U=!0,ns(n,t)}function Po(t){null!=t.v&&(Kn.clearTimeout(t.v),t.v=null)}function Lo(t,e){var n=null;if(t.g==e){Po(t),Oo(t),t.g=null;var i=2}else{if(!zs(t.i,e))return;n=e.D,Ks(t.i,e),i=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==i){n=e.s?e.s.length:0,e=Date.now()-e.F;var r=t.C;ar(i=Pr(),new Fr(i,n,e,r)),So(t)}else No(t);else if(3==(r=e.o)||0==r&&0<t.I||!(1==i&&function(t,e){return!(qs(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=Vr(ti(t.Ha,t,e),xo(t,t.C)),t.C++,0)))}(t,e)||2==i&&Co(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),r){case 1:Mo(t,5);break;case 4:Mo(t,10);break;case 3:Mo(t,6);break;default:Mo(t,2)}}function xo(t,e){var n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function Mo(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var i=ti(t.jb,t);n||(n=new ys("//www.google.com/images/cleardot.gif"),Kn.location&&"http"==Kn.location.protocol||ws(n,"https"),Es(n)),function(t,e){var n=new Nr;if(Kn.Image){var i=new Image;i.onload=ei(Qs,n,i,"TestLoadImage: loaded",!0,e),i.onerror=ei(Qs,n,i,"TestLoadImage: error",!1,e),i.onabort=ei(Qs,n,i,"TestLoadImage: abort",!1,e),i.ontimeout=ei(Qs,n,i,"TestLoadImage: timeout",!1,e),Kn.setTimeout((function(){i.ontimeout&&i.ontimeout()}),1e4),i.src=t}else e(!1)}(n.toString(),i)}else Ur(2);t.G=0,t.j&&t.j.va(e),Uo(t),To(t)}function Uo(t){t.G=0,t.I=-1,t.j&&(0==Gs(t.i).length&&0==t.l.length||(t.i.i.length=0,ci(t.l),t.l.length=0),t.j.ua())}function Fo(t,e,n){var i=function(t){return t instanceof ys?vs(t):new ys(t,void 0)}(n);if(""!=i.i)e&&_s(i,e+"."+i.i),bs(i,i.m);else{var r=Kn.location;i=function(t,e,n,i){var r=new ys(null,void 0);return t&&ws(r,t),e&&_s(r,e),n&&bs(r,n),i&&(r.l=i),r}(r.protocol,e?e+"."+r.hostname:r.hostname,+r.port,n)}return t.aa&&mi(t.aa,(function(t,e){Ts(i,e,t)})),e=t.D,n=t.sa,e&&n&&Ts(i,e,n),Ts(i,"VER",t.ma),Ao(t,i),i}function Vo(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new so(new Ys({ib:!0})):new so(t.qa)).L=t.H,e}function jo(){}function Bo(){if(Ei&&!(10<=Number(Mi)))throw Error("Environmental error: no available transport.")}function Ho(t,e){or.call(this),this.g=new _o(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!ui(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!ui(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new $o(this)}function qo(t){Gr.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function zo(){Wr.call(this),this.status=1}function $o(t){this.g=t}(qn=so.prototype).ea=function(t,e,n,i){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():$r.g(),this.C=this.u?qr(this.u):qr($r),this.g.onreadystatechange=ti(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void lo(this,t)}t=n||"";var r=new fs(this.headers);i&&ds(i,(function(t,e){r.set(e,t)})),i=function(t){t:{for(var e=uo,n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t)){e=r;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(r.T()),n=Kn.FormData&&t instanceof Kn.FormData,!(0<=si(co,e))||i||n||r.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),r.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{go(this),0<this.B&&((this.K=function(t){return Ei&&xi()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=ti(this.pa,this)):this.A=Ir(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){lo(this,t)}},qn.pa=function(){void 0!==$n&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,ar(this,"timeout"),this.abort(8))},qn.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,ar(this,"complete"),ar(this,"abort"),po(this))},qn.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),po(this,!0)),so.Z.M.call(this)},qn.Fa=function(){this.s||(this.F||this.v||this.l?fo(this):this.cb())},qn.cb=function(){fo(this)},qn.ba=function(){try{return 2<mo(this)?this.g.status:-1}catch(t){return-1}},qn.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},qn.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),ro(e)}},qn.Da=function(){return this.m},qn.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(qn=_o.prototype).ma=8,qn.G=1,qn.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},qn.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;var e=new Jr(this,this.h,t,void 0),n=this.s;if(this.P&&(n?wi(n=yi(n),this.P):n=this.P),null===this.o&&(e.H=n),this.ja)t:{for(var i=0,r=0;r<this.l.length;r++){var s=this.l[r];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(i+=s)){i=r;break t}if(4096===i||r===this.l.length-1){i=r+1;break t}}i=1e3}else i=1e3;i=Ro(this,e,i),Ts(r=vs(this.F),"RID",t),Ts(r,"CVER",22),this.D&&Ts(r,"X-HTTP-Session-Id",this.D),Ao(this,r),this.o&&n&&vo(r,this.o,n),$s(this.i,e),this.Ra&&Ts(r,"TYPE","init"),this.ja?(Ts(r,"$req",i),Ts(r,"SID","null"),e.$=!0,es(e,r,null)):es(e,r,i),this.G=2}}else 3==this.G&&(t?ko(this,t):0==this.l.length||Hs(this.i)||ko(this))},qn.Ga=function(){if(this.u=null,Do(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=Vr(ti(this.bb,this),t)}},qn.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,Ur(10),Io(this),Do(this))},qn.ab=function(){null!=this.v&&(this.v=null,Io(this),Co(this),Ur(19))},qn.jb=function(t){t?(this.h.info("Successfully pinged google.com"),Ur(2)):(this.h.info("Failed to ping google.com"),Ur(1))},(qn=jo.prototype).xa=function(){},qn.wa=function(){},qn.va=function(){},qn.ua=function(){},qn.Oa=function(){},Bo.prototype.g=function(t,e){return new Ho(t,e)},ni(Ho,or),Ho.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),mr(ti(t.hb,t,e))),Ur(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=Fo(t,null,t.W),So(t)},Ho.prototype.close=function(){bo(this.g)},Ho.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,Eo(this.g,e)}else this.v?((e={}).__data__=ur(t),Eo(this.g,e)):Eo(this.g,t)},Ho.prototype.M=function(){this.g.j=null,delete this.j,bo(this.g),delete this.g,Ho.Z.M.call(this)},ni(qo,Gr),ni(zo,Wr),ni($o,jo),$o.prototype.xa=function(){ar(this.g,"a")},$o.prototype.wa=function(t){ar(this.g,new qo(t))},$o.prototype.va=function(t){ar(this.g,new zo(t))},$o.prototype.ua=function(){ar(this.g,"b")},Bo.prototype.createWebChannel=Bo.prototype.g,Ho.prototype.send=Ho.prototype.u,Ho.prototype.open=Ho.prototype.m,Ho.prototype.close=Ho.prototype.close,jr.NO_ERROR=0,jr.TIMEOUT=8,jr.HTTP_ERROR=6,Br.COMPLETE="complete",zr.EventType=Kr,Kr.OPEN="a",Kr.CLOSE="b",Kr.ERROR="c",Kr.MESSAGE="d",or.prototype.listen=or.prototype.N,so.prototype.listenOnce=so.prototype.O,so.prototype.getLastError=so.prototype.La,so.prototype.getLastErrorCode=so.prototype.Da,so.prototype.getStatus=so.prototype.ba,so.prototype.getResponseJson=so.prototype.Qa,so.prototype.getResponseText=so.prototype.ga,so.prototype.send=so.prototype.ea;var Ko=jr,Go=Br,Wo=Or,Xo=10,Jo=11,Qo=Ys,Yo=zr,Zo=so;class ta{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}ta.UNAUTHENTICATED=new ta(null),ta.GOOGLE_CREDENTIALS=new ta("google-credentials-uid"),ta.FIRST_PARTY=new ta("first-party-uid"),ta.MOCK_USER=new ta("mock-user");let ea="9.0.1";const na=new M("@firebase/firestore");function ia(){return na.logLevel}function ra(t,...e){if(na.logLevel<=C.DEBUG){const n=e.map(aa);na.debug(`Firestore (${ea}): ${t}`,...n)}}function sa(t,...e){if(na.logLevel<=C.ERROR){const n=e.map(aa);na.error(`Firestore (${ea}): ${t}`,...n)}}function oa(t,...e){if(na.logLevel<=C.WARN){const n=e.map(aa);na.warn(`Firestore (${ea}): ${t}`,...n)}}function aa(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function ca(t="Unexpected state"){const e=`FIRESTORE (${ea}) INTERNAL ASSERTION FAILED: `+t;throw sa(e),new Error(e)}function ua(t,e){t||ca()}function la(t,e){return t}const ha={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class da extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class fa{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class pa{constructor(t,e){this.user=e,this.type="OAuth",this.authHeaders={},this.authHeaders.Authorization=`Bearer ${t}`}}class ga{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(ta.UNAUTHENTICATED)))}shutdown(){}}class ma{constructor(t){this.t=t,this.currentUser=ta.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const i=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let r=new fa;this.o=()=>{this.i++,this.currentUser=this.u(),r.resolve(),r=new fa,t.enqueueRetryable((()=>i(this.currentUser)))};const s=e=>{t.enqueueRetryable((async()=>{ra("FirebaseCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),await r.promise,await i(this.currentUser)}))};this.t.onInit((t=>s(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?s(t):(ra("FirebaseCredentialsProvider","Auth not yet detected"),r.resolve(),r=new fa)}}),0),t.enqueueRetryable((async()=>{0===this.i&&(await r.promise,await i(this.currentUser))}))}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(ra("FirebaseCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(ua("string"==typeof e.accessToken),new pa(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return ua(null===t||"string"==typeof t),new ta(t)}}class ya{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=ta.FIRST_PARTY}get authHeaders(){const t={"X-Goog-AuthUser":this.l},e=this.h.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),this.m&&(t["X-Goog-Iam-Authorization-Token"]=this.m),t}}class va{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new ya(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(ta.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class wa{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.g(t),this.p=t=>e.writeSequenceNumber(t))}g(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.p&&this.p(t),t}}function _a(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}wa.T=-1;class ba{static I(){const t=62*Math.floor(256/62);let e="";for(;e.length<20;){const n=_a(40);for(let i=0;i<n.length;++i)e.length<20&&n[i]<t&&(e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(n[i]%62))}return e}}function Ia(t,e){return t<e?-1:t>e?1:0}function Ta(t,e,n){return t.length===e.length&&t.every(((t,i)=>n(t,e[i])))}class Ea{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new da(ha.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new da(ha.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new da(ha.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new da(ha.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return Ea.fromMillis(Date.now())}static fromDate(t){return Ea.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new Ea(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?Ia(this.nanoseconds,t.nanoseconds):Ia(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Sa{constructor(t){this.timestamp=t}static fromTimestamp(t){return new Sa(t)}static min(){return new Sa(new Ea(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function ka(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Aa(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Ra(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Na{constructor(t,e,n){void 0===e?e=0:e>t.length&&ca(),void 0===n?n=t.length-e:n>t.length-e&&ca(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===Na.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof Na?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++){const n=t.get(i),r=e.get(i);if(n<r)return-1;if(n>r)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class Ca extends Na{construct(t,e,n){return new Ca(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new da(ha.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new Ca(e)}static emptyPath(){return new Ca([])}}const Oa=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Da extends Na{construct(t,e,n){return new Da(t,e,n)}static isValidIdentifier(t){return Oa.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Da.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Da(["__name__"])}static fromServerFormat(t){const e=[];let n="",i=0;const r=()=>{if(0===n.length)throw new da(ha.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let s=!1;for(;i<t.length;){const e=t[i];if("\\"===e){if(i+1===t.length)throw new da(ha.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[i+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new da(ha.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,i+=2}else"`"===e?(s=!s,i++):"."!==e||s?(n+=e,i++):(r(),i++)}if(r(),s)throw new da(ha.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new Da(e)}static emptyPath(){return new Da([])}}class Pa{constructor(t){this.fields=t,t.sort(Da.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return Ta(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class La{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new La(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new La(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return Ia(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}La.EMPTY_BYTE_STRING=new La("");const xa=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Ma(t){if(ua(!!t),"string"==typeof t){let e=0;const n=xa.exec(t);if(ua(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:Ua(t.seconds),nanos:Ua(t.nanos)}}function Ua(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Fa(t){return"string"==typeof t?La.fromBase64String(t):La.fromUint8Array(t)}function Va(t){const e=Ma(t.mapValue.fields.__local_write_time__.timestampValue);return new Ea(e.seconds,e.nanos)}function ja(t){return null==t}function Ba(t){return 0===t&&1/t==-1/0}class Ha{constructor(t){this.path=t}static fromPath(t){return new Ha(Ca.fromString(t))}static fromName(t){return new Ha(Ca.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===Ca.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return Ca.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new Ha(new Ca(t.slice()))}}function qa(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?function(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}(t)?4:10:ca()}function za(t,e){const n=qa(t);if(n!==qa(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return Va(t).isEqual(Va(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=Ma(t.timestampValue),i=Ma(e.timestampValue);return n.seconds===i.seconds&&n.nanos===i.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Fa(t.bytesValue).isEqual(Fa(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Ua(t.geoPointValue.latitude)===Ua(e.geoPointValue.latitude)&&Ua(t.geoPointValue.longitude)===Ua(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Ua(t.integerValue)===Ua(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=Ua(t.doubleValue),i=Ua(e.doubleValue);return n===i?Ba(n)===Ba(i):isNaN(n)&&isNaN(i)}return!1}(t,e);case 9:return Ta(t.arrayValue.values||[],e.arrayValue.values||[],za);case 10:return function(t,e){const n=t.mapValue.fields||{},i=e.mapValue.fields||{};if(ka(n)!==ka(i))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===i[t]||!za(n[t],i[t])))return!1;return!0}(t,e);default:return ca()}}function $a(t,e){return void 0!==(t.values||[]).find((t=>za(t,e)))}function Ka(t,e){const n=qa(t),i=qa(e);if(n!==i)return Ia(n,i);switch(n){case 0:return 0;case 1:return Ia(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=Ua(t.integerValue||t.doubleValue),i=Ua(e.integerValue||e.doubleValue);return n<i?-1:n>i?1:n===i?0:isNaN(n)?isNaN(i)?0:-1:1}(t,e);case 3:return Ga(t.timestampValue,e.timestampValue);case 4:return Ga(Va(t),Va(e));case 5:return Ia(t.stringValue,e.stringValue);case 6:return function(t,e){const n=Fa(t),i=Fa(e);return n.compareTo(i)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),i=e.split("/");for(let t=0;t<n.length&&t<i.length;t++){const e=Ia(n[t],i[t]);if(0!==e)return e}return Ia(n.length,i.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=Ia(Ua(t.latitude),Ua(e.latitude));return 0!==n?n:Ia(Ua(t.longitude),Ua(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],i=e.values||[];for(let t=0;t<n.length&&t<i.length;++t){const e=Ka(n[t],i[t]);if(e)return e}return Ia(n.length,i.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},i=Object.keys(n),r=e.fields||{},s=Object.keys(r);i.sort(),s.sort();for(let t=0;t<i.length&&t<s.length;++t){const e=Ia(i[t],s[t]);if(0!==e)return e;const o=Ka(n[i[t]],r[s[t]]);if(0!==o)return o}return Ia(i.length,s.length)}(t.mapValue,e.mapValue);default:throw ca()}}function Ga(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return Ia(t,e);const n=Ma(t),i=Ma(e),r=Ia(n.seconds,i.seconds);return 0!==r?r:Ia(n.nanos,i.nanos)}function Wa(t){return Xa(t)}function Xa(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=Ma(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Fa(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Ha.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const i of t.values||[])n?n=!1:e+=",",e+=Xa(i);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",i=!0;for(const r of e)i?i=!1:n+=",",n+=`${r}:${Xa(t.fields[r])}`;return n+"}"}(t.mapValue):ca();var e,n}function Ja(t){return!!t&&"integerValue"in t}function Qa(t){return!!t&&"arrayValue"in t}function Ya(t){return!!t&&"mapValue"in t}function Za(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return Aa(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=Za(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=Za(t.arrayValue.values[n]);return e}return Object.assign({},t)}class tc{constructor(t){this.value=t}static empty(){return new tc({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!Ya(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=Za(e)}setAll(t){let e=Da.emptyPath(),n={},i=[];t.forEach(((t,r)=>{if(!e.isImmediateParentOf(r)){const t=this.getFieldsMap(e);this.applyChanges(t,n,i),n={},i=[],e=r.popLast()}t?n[r.lastSegment()]=Za(t):i.push(r.lastSegment())}));const r=this.getFieldsMap(e);this.applyChanges(r,n,i)}delete(t){const e=this.field(t.popLast());Ya(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return za(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let i=e.mapValue.fields[t.get(n)];Ya(i)&&i.mapValue.fields||(i={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=i),e=i}return e.mapValue.fields}applyChanges(t,e,n){Aa(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new tc(Za(this.value))}}function ec(t){const e=[];return Aa(t.fields,((t,n)=>{const i=new Da([t]);if(Ya(n)){const t=ec(n.mapValue).fields;if(0===t.length)e.push(i);else for(const n of t)e.push(i.child(n))}else e.push(i)})),new Pa(e)}class nc{constructor(t,e,n,i,r){this.key=t,this.documentType=e,this.version=n,this.data=i,this.documentState=r}static newInvalidDocument(t){return new nc(t,0,Sa.min(),tc.empty(),0)}static newFoundDocument(t,e,n){return new nc(t,1,e,n,0)}static newNoDocument(t,e){return new nc(t,2,e,tc.empty(),0)}static newUnknownDocument(t,e){return new nc(t,3,e,tc.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=tc.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=tc.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof nc&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new nc(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class ic{constructor(t,e=null,n=[],i=[],r=null,s=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=i,this.limit=r,this.startAt=s,this.endAt=o,this.A=null}}function rc(t,e=null,n=[],i=[],r=null,s=null,o=null){return new ic(t,e,n,i,r,s,o)}function sc(t){const e=la(t);if(null===e.A){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+Wa(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),ja(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=yc(e.startAt)),e.endAt&&(t+="|ub:",t+=yc(e.endAt)),e.A=t}return e.A}function oc(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!wc(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let r=0;r<t.filters.length;r++)if(n=t.filters[r],i=e.filters[r],n.op!==i.op||!n.field.isEqual(i.field)||!za(n.value,i.value))return!1;var n,i;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!bc(t.startAt,e.startAt)&&bc(t.endAt,e.endAt)}class ac extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.R(t,e,n):new cc(t,e,n):"array-contains"===e?new dc(t,n):"in"===e?new fc(t,n):"not-in"===e?new pc(t,n):"array-contains-any"===e?new gc(t,n):new ac(t,e,n)}static R(t,e,n){return"in"===e?new uc(t,n):new lc(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.P(Ka(e,this.value)):null!==e&&qa(this.value)===qa(e)&&this.P(Ka(e,this.value))}P(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return ca()}}v(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class cc extends ac{constructor(t,e,n){super(t,e,n),this.key=Ha.fromName(n.referenceValue)}matches(t){const e=Ha.comparator(t.key,this.key);return this.P(e)}}class uc extends ac{constructor(t,e){super(t,"in",e),this.keys=hc(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class lc extends ac{constructor(t,e){super(t,"not-in",e),this.keys=hc(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function hc(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>Ha.fromName(t.referenceValue)))}class dc extends ac{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return Qa(e)&&$a(e.arrayValue,this.value)}}class fc extends ac{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&$a(this.value.arrayValue,e)}}class pc extends ac{constructor(t,e){super(t,"not-in",e)}matches(t){if($a(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!$a(this.value.arrayValue,e)}}class gc extends ac{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!Qa(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>$a(this.value.arrayValue,t)))}}class mc{constructor(t,e){this.position=t,this.before=e}}function yc(t){return`${t.before?"b":"a"}:${t.position.map((t=>Wa(t))).join(",")}`}class vc{constructor(t,e="asc"){this.field=t,this.dir=e}}function wc(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function _c(t,e,n){let i=0;for(let r=0;r<t.position.length;r++){const s=e[r],o=t.position[r];if(i=s.field.isKeyField()?Ha.comparator(Ha.fromName(o.referenceValue),n.key):Ka(o,n.data.field(s.field)),"desc"===s.dir&&(i*=-1),0!==i)break}return t.before?i<=0:i<0}function bc(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!za(t.position[n],e.position[n]))return!1;return!0}class Ic{constructor(t,e=null,n=[],i=[],r=null,s="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=i,this.limit=r,this.limitType=s,this.startAt=o,this.endAt=a,this.V=null,this.S=null,this.startAt,this.endAt}}function Tc(t){const e=la(t);if(null===e.V){e.V=[];const t=function(t){for(const e of t.filters)if(e.v())return e.field;return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.V.push(new vc(t)),e.V.push(new vc(Da.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.V.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.V.push(new vc(Da.keyField(),t))}}}return e.V}function Ec(t){const e=la(t);if(!e.S)if("F"===e.limitType)e.S=rc(e.path,e.collectionGroup,Tc(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Tc(e)){const e="desc"===n.dir?"asc":"desc";t.push(new vc(n.field,e))}const n=e.endAt?new mc(e.endAt.position,!e.endAt.before):null,i=e.startAt?new mc(e.startAt.position,!e.startAt.before):null;e.S=rc(e.path,e.collectionGroup,t,e.filters,e.limit,n,i)}return e.S}function Sc(t,e){return oc(Ec(t),Ec(e))&&t.limitType===e.limitType}function kc(t){return`${sc(Ec(t))}|lt:${t.limitType}`}function Ac(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${Wa(e.value)}`;var e})).join(", ")}]`),ja(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+yc(t.startAt)),t.endAt&&(e+=", endAt: "+yc(t.endAt)),`Target(${e})`}(Ec(t))}; limitType=${t.limitType})`}function Rc(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):Ha.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!_c(t.startAt,Tc(t),e)||t.endAt&&_c(t.endAt,Tc(t),e))}(t,e)}function Nc(t,e,n){const i=t.field.isKeyField()?Ha.comparator(e.key,n.key):function(t,e,n){const i=e.data.field(t),r=n.data.field(t);return null!==i&&null!==r?Ka(i,r):ca()}(t.field,e,n);switch(t.dir){case"asc":return i;case"desc":return-1*i;default:return ca()}}function Cc(t,e){if(t.D){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Ba(e)?"-0":e}}function Oc(t){return{integerValue:""+t}}function Dc(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!Ba(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?Oc(e):Cc(t,e)}class Pc{constructor(){this._=void 0}}function Lc(t,e,n){return t instanceof Uc?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof Fc?Vc(t,e):t instanceof jc?Bc(t,e):function(t,e){const n=Mc(t,e),i=qc(n)+qc(t.C);return Ja(n)&&Ja(t.C)?Oc(i):Cc(t.N,i)}(t,e)}function xc(t,e,n){return t instanceof Fc?Vc(t,e):t instanceof jc?Bc(t,e):n}function Mc(t,e){return t instanceof Hc?Ja(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class Uc extends Pc{}class Fc extends Pc{constructor(t){super(),this.elements=t}}function Vc(t,e){const n=zc(e);for(const e of t.elements)n.some((t=>za(t,e)))||n.push(e);return{arrayValue:{values:n}}}class jc extends Pc{constructor(t){super(),this.elements=t}}function Bc(t,e){let n=zc(e);for(const e of t.elements)n=n.filter((t=>!za(t,e)));return{arrayValue:{values:n}}}class Hc extends Pc{constructor(t,e){super(),this.N=t,this.C=e}}function qc(t){return Ua(t.integerValue||t.doubleValue)}function zc(t){return Qa(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class $c{constructor(t,e){this.field=t,this.transform=e}}class Kc{constructor(t,e){this.version=t,this.transformResults=e}}class Gc{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new Gc}static exists(t){return new Gc(void 0,t)}static updateTime(t){return new Gc(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function Wc(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class Xc{}function Jc(t,e,n){t instanceof eu?function(t,e,n){const i=t.value.clone(),r=ru(t.fieldTransforms,e,n.transformResults);i.setAll(r),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):t instanceof nu?function(t,e,n){if(!Wc(t.precondition,e))return void e.convertToUnknownDocument(n.version);const i=ru(t.fieldTransforms,e,n.transformResults),r=e.data;r.setAll(iu(t)),r.setAll(i),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function Qc(t,e,n){t instanceof eu?function(t,e,n){if(!Wc(t.precondition,e))return;const i=t.value.clone(),r=su(t.fieldTransforms,n,e);i.setAll(r),e.convertToFoundDocument(tu(e),i).setHasLocalMutations()}(t,e,n):t instanceof nu?function(t,e,n){if(!Wc(t.precondition,e))return;const i=su(t.fieldTransforms,n,e),r=e.data;r.setAll(iu(t)),r.setAll(i),e.convertToFoundDocument(tu(e),r).setHasLocalMutations()}(t,e,n):function(t,e){Wc(t.precondition,e)&&e.convertToNoDocument(Sa.min())}(t,e)}function Yc(t,e){let n=null;for(const i of t.fieldTransforms){const t=e.data.field(i.field),r=Mc(i.transform,t||null);null!=r&&(null==n&&(n=tc.empty()),n.set(i.field,r))}return n||null}function Zc(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&Ta(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof Fc&&e instanceof Fc||t instanceof jc&&e instanceof jc?Ta(t.elements,e.elements,za):t instanceof Hc&&e instanceof Hc?za(t.C,e.C):t instanceof Uc&&e instanceof Uc}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function tu(t){return t.isFoundDocument()?t.version:Sa.min()}class eu extends Xc{constructor(t,e,n,i=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=i,this.type=0}}class nu extends Xc{constructor(t,e,n,i,r=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=i,this.fieldTransforms=r,this.type=1}}function iu(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const i=t.data.field(n);e.set(n,i)}})),e}function ru(t,e,n){const i=new Map;ua(t.length===n.length);for(let r=0;r<n.length;r++){const s=t[r],o=s.transform,a=e.data.field(s.field);i.set(s.field,xc(o,a,n[r]))}return i}function su(t,e,n){const i=new Map;for(const r of t){const t=r.transform,s=n.data.field(r.field);i.set(r.field,Lc(t,s,e))}return i}class ou extends Xc{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class au extends Xc{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}var cu,uu;(uu=cu||(cu={}))[uu.OK=0]="OK",uu[uu.CANCELLED=1]="CANCELLED",uu[uu.UNKNOWN=2]="UNKNOWN",uu[uu.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",uu[uu.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",uu[uu.NOT_FOUND=5]="NOT_FOUND",uu[uu.ALREADY_EXISTS=6]="ALREADY_EXISTS",uu[uu.PERMISSION_DENIED=7]="PERMISSION_DENIED",uu[uu.UNAUTHENTICATED=16]="UNAUTHENTICATED",uu[uu.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",uu[uu.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",uu[uu.ABORTED=10]="ABORTED",uu[uu.OUT_OF_RANGE=11]="OUT_OF_RANGE",uu[uu.UNIMPLEMENTED=12]="UNIMPLEMENTED",uu[uu.INTERNAL=13]="INTERNAL",uu[uu.UNAVAILABLE=14]="UNAVAILABLE",uu[uu.DATA_LOSS=15]="DATA_LOSS";class lu{constructor(t,e){this.comparator=t,this.root=e||du.EMPTY}insert(t,e){return new lu(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,du.BLACK,null,null))}remove(t){return new lu(this.comparator,this.root.remove(t,this.comparator).copy(null,null,du.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const i=this.comparator(t,n.key);if(0===i)return e+n.left.size;i<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new hu(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new hu(this.root,t,this.comparator,!1)}getReverseIterator(){return new hu(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new hu(this.root,t,this.comparator,!0)}}class hu{constructor(t,e,n,i){this.isReverse=i,this.nodeStack=[];let r=1;for(;!t.isEmpty();)if(r=e?n(t.key,e):1,i&&(r*=-1),r<0)t=this.isReverse?t.left:t.right;else{if(0===r){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class du{constructor(t,e,n,i,r){this.key=t,this.value=e,this.color=null!=n?n:du.RED,this.left=null!=i?i:du.EMPTY,this.right=null!=r?r:du.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,i,r){return new du(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=r?r:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let i=this;const r=n(t,i.key);return i=r<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===r?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n)),i.fixUp()}removeMin(){if(this.left.isEmpty())return du.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,i=this;if(e(t,i.key)<0)i.left.isEmpty()||i.left.isRed()||i.left.left.isRed()||(i=i.moveRedLeft()),i=i.copy(null,null,null,i.left.remove(t,e),null);else{if(i.left.isRed()&&(i=i.rotateRight()),i.right.isEmpty()||i.right.isRed()||i.right.left.isRed()||(i=i.moveRedRight()),0===e(t,i.key)){if(i.right.isEmpty())return du.EMPTY;n=i.right.min(),i=i.copy(n.key,n.value,null,null,i.right.removeMin())}i=i.copy(null,null,null,null,i.right.remove(t,e))}return i.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,du.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,du.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw ca();if(this.right.isRed())throw ca();const t=this.left.check();if(t!==this.right.check())throw ca();return t+(this.isRed()?0:1)}}du.EMPTY=null,du.RED=!0,du.BLACK=!1,du.EMPTY=new class{constructor(){this.size=0}get key(){throw ca()}get value(){throw ca()}get color(){throw ca()}get left(){throw ca()}get right(){throw ca()}copy(t,e,n,i,r){return this}insert(t,e,n){return new du(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class fu{constructor(t){this.comparator=t,this.data=new lu(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const i=n.getNext();if(this.comparator(i.key,t[1])>=0)return;e(i.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new pu(this.data.getIterator())}getIteratorFrom(t){return new pu(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof fu))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,i=n.getNext().key;if(0!==this.comparator(t,i))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new fu(this.comparator);return e.data=t,e}}class pu{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const gu=new lu(Ha.comparator);function mu(){return gu}const yu=new lu(Ha.comparator);function vu(){return yu}const wu=new lu(Ha.comparator);const _u=new fu(Ha.comparator);function bu(...t){let e=_u;for(const n of t)e=e.add(n);return e}const Iu=new fu(Ia);class Tu{constructor(t,e){this.databaseId=t,this.D=e}}function Eu(t,e){return t.D?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function Su(t,e){return t.D?e.toBase64():e.toUint8Array()}function ku(t,e){return Eu(t,e.toTimestamp())}function Au(t){return ua(!!t),Sa.fromTimestamp(function(t){const e=Ma(t);return new Ea(e.seconds,e.nanos)}(t))}function Ru(t,e){return function(t){return new Ca(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function Nu(t,e){return Ru(t.databaseId,e.path)}function Cu(t){const e=function(t){const e=Ca.fromString(t);return ua(function(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}(e)),e}(t);return 4===e.length?Ca.emptyPath():function(t){return ua(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}(e)}function Ou(t,e,n){return{name:Nu(t,e),fields:n.value.mapValue.fields}}function Du(t){let e=Cu(t.parent);const n=t.structuredQuery,i=n.from?n.from.length:0;let r=null;if(i>0){ua(1===i);const t=n.from[0];t.allDescendants?r=t.collectionId:e=e.child(t.collectionId)}let s=[];n.where&&(s=Pu(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new vc(xu(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,ja(e)?null:e}(n.limit));let c=null;n.startAt&&(c=Lu(n.startAt));let u=null;return n.endAt&&(u=Lu(n.endAt)),function(t,e,n,i,r,s,o,a){return new Ic(t,e,n,i,r,s,o,a)}(e,r,o,s,a,"F",c,u)}function Pu(t){return t?void 0!==t.unaryFilter?[Uu(t)]:void 0!==t.fieldFilter?[Mu(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>Pu(t))).reduce(((t,e)=>t.concat(e))):ca():[]}function Lu(t){const e=!!t.before,n=t.values||[];return new mc(n,e)}function xu(t){return Da.fromServerFormat(t.fieldPath)}function Mu(t){return ac.create(xu(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return ca()}}(t.fieldFilter.op),t.fieldFilter.value)}function Uu(t){switch(t.unaryFilter.op){case"IS_NAN":const e=xu(t.unaryFilter.field);return ac.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=xu(t.unaryFilter.field);return ac.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const i=xu(t.unaryFilter.field);return ac.create(i,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const r=xu(t.unaryFilter.field);return ac.create(r,"!=",{nullValue:"NULL_VALUE"});default:return ca()}}function Fu(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Vu(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=Bu(e)),e=ju(t.get(n),e);return Bu(e)}function ju(t,e){let n=e;const i=t.length;for(let e=0;e<i;e++){const i=t.charAt(e);switch(i){case"\0":n+="";break;case"":n+="";break;default:n+=i}}return n}function Bu(t){return t+""}class Hu{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}Hu.store="owner",Hu.key="owner";class qu{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}qu.store="mutationQueues",qu.keyPath="userId";class zu{constructor(t,e,n,i,r){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=i,this.mutations=r}}zu.store="mutations",zu.keyPath="batchId",zu.userMutationsIndex="userMutationsIndex",zu.userMutationsKeyPath=["userId","batchId"];class $u{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,Vu(e)]}static key(t,e,n){return[t,Vu(e),n]}}$u.store="documentMutations",$u.PLACEHOLDER=new $u;class Ku{constructor(t,e,n,i,r,s){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=i,this.readTime=r,this.parentPath=s}}Ku.store="remoteDocuments",Ku.readTimeIndex="readTimeIndex",Ku.readTimeIndexPath="readTime",Ku.collectionReadTimeIndex="collectionReadTimeIndex",Ku.collectionReadTimeIndexPath=["parentPath","readTime"];class Gu{constructor(t){this.byteSize=t}}Gu.store="remoteDocumentGlobal",Gu.key="remoteDocumentGlobalKey";class Wu{constructor(t,e,n,i,r,s,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=i,this.lastListenSequenceNumber=r,this.lastLimboFreeSnapshotVersion=s,this.query=o}}Wu.store="targets",Wu.keyPath="targetId",Wu.queryTargetsIndexName="queryTargetsIndex",Wu.queryTargetsKeyPath=["canonicalId","targetId"];class Xu{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}Xu.store="targetDocuments",Xu.keyPath=["targetId","path"],Xu.documentTargetsIndex="documentTargetsIndex",Xu.documentTargetsKeyPath=["path","targetId"];class Ju{constructor(t,e,n,i){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=i}}Ju.key="targetGlobalKey",Ju.store="targetGlobal";class Qu{constructor(t,e){this.collectionId=t,this.parent=e}}Qu.store="collectionParents",Qu.keyPath=["collectionId","parent"];class Yu{constructor(t,e,n,i){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=i}}Yu.store="clientMetadata",Yu.keyPath="clientId";class Zu{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}Zu.store="bundles",Zu.keyPath="bundleId";class tl{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}tl.store="namedQueries",tl.keyPath="name",qu.store,zu.store,$u.store,Ku.store,Wu.store,Hu.store,Ju.store,Xu.store,Yu.store,Gu.store,Qu.store,Zu.store,tl.store;class el{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}class nl{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&ca(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new nl(((n,i)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,i)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,i)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof nl?e:nl.resolve(e)}catch(t){return nl.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):nl.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):nl.reject(e)}static resolve(t){return new nl(((e,n)=>{e(t)}))}static reject(t){return new nl(((e,n)=>{n(t)}))}static waitFor(t){return new nl(((e,n)=>{let i=0,r=0,s=!1;t.forEach((t=>{++i,t.next((()=>{++r,s&&r===i&&e()}),(t=>n(t)))})),s=!0,r===i&&e()}))}static or(t){let e=nl.resolve(!1);for(const n of t)e=e.next((t=>t?nl.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,i)=>{n.push(e.call(this,t,i))})),this.waitFor(n)}}function il(t){return"IndexedDbTransactionError"===t.name}class rl{constructor(t,e,n,i){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=i}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const i=this.mutations[e];i.key.isEqual(t.key)&&Jc(i,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&Qc(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&Qc(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),i=n;this.applyToLocalView(i),n.isValidDocument()||i.convertToNoDocument(Sa.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),bu())}isEqual(t){return this.batchId===t.batchId&&Ta(this.mutations,t.mutations,((t,e)=>Zc(t,e)))&&Ta(this.baseMutations,t.baseMutations,((t,e)=>Zc(t,e)))}}class sl{constructor(t,e,n,i){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=i}static from(t,e,n){ua(t.mutations.length===n.length);let i=wu;const r=t.mutations;for(let t=0;t<r.length;t++)i=i.insert(r[t].key,n[t].version);return new sl(t,e,n,i)}}class ol{constructor(t){this.Wt=t}}function al(t){const e=Du({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new Ic(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class cl{constructor(){this.Gt=new ul}addToCollectionParentIndex(t,e){return this.Gt.add(e),nl.resolve()}getCollectionParents(t,e){return nl.resolve(this.Gt.getEntries(e))}}class ul{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e]||new fu(Ca.comparator),r=!i.has(n);return this.index[e]=i.add(n),r}has(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e];return i&&i.has(n)}getEntries(t){return(this.index[t]||new fu(Ca.comparator)).toArray()}}class ll{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new ll(t,ll.DEFAULT_COLLECTION_PERCENTILE,ll.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}ll.DEFAULT_COLLECTION_PERCENTILE=10,ll.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,ll.DEFAULT=new ll(41943040,ll.DEFAULT_COLLECTION_PERCENTILE,ll.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),ll.DISABLED=new ll(-1,0,0);class hl{constructor(t){this.ne=t}next(){return this.ne+=2,this.ne}static se(){return new hl(0)}static ie(){return new hl(-1)}}async function dl(t){if(t.code!==ha.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==t.message)throw t;ra("LocalStore","Unexpectedly lost primary lease")}class fl{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,i]of n)if(this.equalsFn(e,t))return i}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),i=this.inner[n];if(void 0!==i){for(let n=0;n<i.length;n++)if(this.equalsFn(i[n][0],t))return void(i[n]=[t,e]);i.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let i=0;i<n.length;i++)if(this.equalsFn(n[i][0],t))return 1===n.length?delete this.inner[e]:n.splice(i,1),!0;return!1}forEach(t){Aa(this.inner,((e,n)=>{for(const[e,i]of n)t(e,i)}))}isEmpty(){return Ra(this.inner)}}class pl{constructor(){this.changes=new fl((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:Sa.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:nc.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?nl.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class gl{constructor(t,e,n){this.He=t,this.In=e,this.Ht=n}An(t,e){return this.In.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Rn(t,e,n)))}Rn(t,e,n){return this.He.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}Pn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}bn(t,e){return this.He.getEntries(t,e).next((e=>this.vn(t,e).next((()=>e))))}vn(t,e){return this.In.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.Pn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return Ha.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Vn(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.Sn(t,e,n):this.Dn(t,e,n)}Vn(t,e){return this.An(t,new Ha(e)).next((t=>{let e=vu();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Sn(t,e,n){const i=e.collectionGroup;let r=vu();return this.Ht.getCollectionParents(t,i).next((s=>nl.forEach(s,(s=>{const o=function(t,e){return new Ic(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,s.child(i));return this.Dn(t,o,n).next((t=>{t.forEach(((t,e)=>{r=r.insert(t,e)}))}))})).next((()=>r))))}Dn(t,e,n){let i,r;return this.He.getDocumentsMatchingQuery(t,e,n).next((n=>(i=n,this.In.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(r=e,this.Cn(t,r,i).next((t=>{i=t;for(const t of r)for(const e of t.mutations){const n=e.key;let r=i.get(n);null==r&&(r=nc.newInvalidDocument(n),i=i.insert(n,r)),Qc(e,r,t.localWriteTime),r.isFoundDocument()||(i=i.remove(n))}}))))).next((()=>(i.forEach(((t,n)=>{Rc(e,n)||(i=i.remove(t))})),i)))}Cn(t,e,n){let i=bu();for(const t of e)for(const e of t.mutations)e instanceof nu&&null===n.get(e.key)&&(i=i.add(e.key));let r=n;return this.He.getEntries(t,i).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(r=r.insert(t,e))})),r)))}}class ml{constructor(t,e,n,i){this.targetId=t,this.fromCache=e,this.Nn=n,this.xn=i}static kn(t,e){let n=bu(),i=bu();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:i=i.add(t.doc.key)}return new ml(t,e.fromCache,n,i)}}class yl{$n(t){this.On=t}getDocumentsMatchingQuery(t,e,n,i){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(Sa.min())?this.Fn(t,e):this.On.bn(t,i).next((r=>{const s=this.Mn(e,r);return(function(t){return!ja(t.limit)&&"F"===t.limitType}(e)||function(t){return!ja(t.limit)&&"L"===t.limitType}(e))&&this.Ln(e.limitType,s,i,n)?this.Fn(t,e):(ia()<=C.DEBUG&&ra("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Ac(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(s.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Mn(t,e){let n=new fu(function(t){return(e,n)=>{let i=!1;for(const r of Tc(t)){const t=Nc(r,e,n);if(0!==t)return t;i=i||r.field.isKeyField()}return 0}}(t));return e.forEach(((e,i)=>{Rc(t,i)&&(n=n.add(i))})),n}Ln(t,e,n,i){if(n.size!==e.size)return!0;const r="F"===t?e.last():e.first();return!!r&&(r.hasPendingWrites||r.version.compareTo(i)>0)}Fn(t,e){return ia()<=C.DEBUG&&ra("QueryEngine","Using full collection scan to execute query:",Ac(e)),this.On.getDocumentsMatchingQuery(t,e,Sa.min())}}class vl{constructor(t,e,n,i){this.persistence=t,this.Bn=e,this.N=i,this.Un=new lu(Ia),this.qn=new fl((t=>sc(t)),oc),this.Kn=Sa.min(),this.In=t.getMutationQueue(n),this.jn=t.getRemoteDocumentCache(),this.ze=t.getTargetCache(),this.Qn=new gl(this.jn,this.In,this.persistence.getIndexManager()),this.Je=t.getBundleCache(),this.Bn.$n(this.Qn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Un)))}}async function wl(t,e){const n=la(t);let i=n.In,r=n.Qn;const s=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let s;return n.In.getAllMutationBatches(t).next((o=>(s=o,i=n.persistence.getMutationQueue(e),r=new gl(n.jn,i,n.persistence.getIndexManager()),i.getAllMutationBatches(t)))).next((e=>{const n=[],i=[];let o=bu();for(const t of s){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){i.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return r.bn(t,o).next((t=>({Wn:t,removedBatchIds:n,addedBatchIds:i})))}))}));return n.In=i,n.Qn=r,n.Bn.$n(n.Qn),s}function _l(t,e){const n=la(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.In.getNextMutationBatchAfterBatchId(t,e))))}class bl{constructor(t){this.N=t,this.Yn=new Map,this.Xn=new Map}getBundleMetadata(t,e){return nl.resolve(this.Yn.get(e))}saveBundleMetadata(t,e){var n;return this.Yn.set(e.id,{id:(n=e).id,version:n.version,createTime:Au(n.createTime)}),nl.resolve()}getNamedQuery(t,e){return nl.resolve(this.Xn.get(e))}saveNamedQuery(t,e){return this.Xn.set(e.name,function(t){return{name:t.name,query:al(t.bundledQuery),readTime:Au(t.readTime)}}(e)),nl.resolve()}}class Il{constructor(){this.Zn=new fu(Tl.ts),this.es=new fu(Tl.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(t,e){const n=new Tl(t,e);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.rs(new Tl(t,e))}os(t,e){t.forEach((t=>this.removeReference(t,e)))}cs(t){const e=new Ha(new Ca([])),n=new Tl(e,t),i=new Tl(e,t+1),r=[];return this.es.forEachInRange([n,i],(t=>{this.rs(t),r.push(t.key)})),r}us(){this.Zn.forEach((t=>this.rs(t)))}rs(t){this.Zn=this.Zn.delete(t),this.es=this.es.delete(t)}hs(t){const e=new Ha(new Ca([])),n=new Tl(e,t),i=new Tl(e,t+1);let r=bu();return this.es.forEachInRange([n,i],(t=>{r=r.add(t.key)})),r}containsKey(t){const e=new Tl(t,0),n=this.Zn.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class Tl{constructor(t,e){this.key=t,this.ls=e}static ts(t,e){return Ha.comparator(t.key,e.key)||Ia(t.ls,e.ls)}static ns(t,e){return Ia(t.ls,e.ls)||Ha.comparator(t.key,e.key)}}class El{constructor(t,e){this.Ht=t,this.referenceDelegate=e,this.In=[],this.fs=1,this.ds=new fu(Tl.ts)}checkEmpty(t){return nl.resolve(0===this.In.length)}addMutationBatch(t,e,n,i){const r=this.fs;this.fs++,this.In.length>0&&this.In[this.In.length-1];const s=new rl(r,e,n,i);this.In.push(s);for(const e of i)this.ds=this.ds.add(new Tl(e.key,r)),this.Ht.addToCollectionParentIndex(t,e.key.path.popLast());return nl.resolve(s)}lookupMutationBatch(t,e){return nl.resolve(this.ws(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,i=this._s(n),r=i<0?0:i;return nl.resolve(this.In.length>r?this.In[r]:null)}getHighestUnacknowledgedBatchId(){return nl.resolve(0===this.In.length?-1:this.fs-1)}getAllMutationBatches(t){return nl.resolve(this.In.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new Tl(e,0),i=new Tl(e,Number.POSITIVE_INFINITY),r=[];return this.ds.forEachInRange([n,i],(t=>{const e=this.ws(t.ls);r.push(e)})),nl.resolve(r)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new fu(Ia);return e.forEach((t=>{const e=new Tl(t,0),i=new Tl(t,Number.POSITIVE_INFINITY);this.ds.forEachInRange([e,i],(t=>{n=n.add(t.ls)}))})),nl.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,i=n.length+1;let r=n;Ha.isDocumentKey(r)||(r=r.child(""));const s=new Tl(new Ha(r),0);let o=new fu(Ia);return this.ds.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===i&&(o=o.add(t.ls)),!0)}),s),nl.resolve(this.gs(o))}gs(t){const e=[];return t.forEach((t=>{const n=this.ws(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){ua(0===this.ys(e.batchId,"removed")),this.In.shift();let n=this.ds;return nl.forEach(e.mutations,(i=>{const r=new Tl(i.key,e.batchId);return n=n.delete(r),this.referenceDelegate.markPotentiallyOrphaned(t,i.key)})).next((()=>{this.ds=n}))}te(t){}containsKey(t,e){const n=new Tl(e,0),i=this.ds.firstAfterOrEqual(n);return nl.resolve(e.isEqual(i&&i.key))}performConsistencyCheck(t){return this.In.length,nl.resolve()}ys(t,e){return this._s(t)}_s(t){return 0===this.In.length?0:t-this.In[0].batchId}ws(t){const e=this._s(t);return e<0||e>=this.In.length?null:this.In[e]}}class Sl{constructor(t,e){this.Ht=t,this.ps=e,this.docs=new lu(Ha.comparator),this.size=0}addEntry(t,e,n){const i=e.key,r=this.docs.get(i),s=r?r.size:0,o=this.ps(e);return this.docs=this.docs.insert(i,{document:e.clone(),size:o,readTime:n}),this.size+=o-s,this.Ht.addToCollectionParentIndex(t,i.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return nl.resolve(n?n.document.clone():nc.newInvalidDocument(e))}getEntries(t,e){let n=mu();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():nc.newInvalidDocument(t))})),nl.resolve(n)}getDocumentsMatchingQuery(t,e,n){let i=mu();const r=new Ha(e.path.child("")),s=this.docs.getIteratorFrom(r);for(;s.hasNext();){const{key:t,value:{document:r,readTime:o}}=s.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||Rc(e,r)&&(i=i.insert(r.key,r.clone()))}return nl.resolve(i)}Es(t,e){return nl.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new kl(this)}getSize(t){return nl.resolve(this.size)}}class kl extends pl{constructor(t){super(),this.Se=t}applyChanges(t){const e=[];return this.changes.forEach(((n,i)=>{i.document.isValidDocument()?e.push(this.Se.addEntry(t,i.document,this.getReadTime(n))):this.Se.removeEntry(n)})),nl.waitFor(e)}getFromCache(t,e){return this.Se.getEntry(t,e)}getAllFromCache(t,e){return this.Se.getEntries(t,e)}}class Al{constructor(t){this.persistence=t,this.Ts=new fl((t=>sc(t)),oc),this.lastRemoteSnapshotVersion=Sa.min(),this.highestTargetId=0,this.Is=0,this.As=new Il,this.targetCount=0,this.Rs=hl.se()}forEachTarget(t,e){return this.Ts.forEach(((t,n)=>e(n))),nl.resolve()}getLastRemoteSnapshotVersion(t){return nl.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return nl.resolve(this.Is)}allocateTargetId(t){return this.highestTargetId=this.Rs.next(),nl.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Is&&(this.Is=e),nl.resolve()}ae(t){this.Ts.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Rs=new hl(e),this.highestTargetId=e),t.sequenceNumber>this.Is&&(this.Is=t.sequenceNumber)}addTargetData(t,e){return this.ae(e),this.targetCount+=1,nl.resolve()}updateTargetData(t,e){return this.ae(e),nl.resolve()}removeTargetData(t,e){return this.Ts.delete(e.target),this.As.cs(e.targetId),this.targetCount-=1,nl.resolve()}removeTargets(t,e,n){let i=0;const r=[];return this.Ts.forEach(((s,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Ts.delete(s),r.push(this.removeMatchingKeysForTargetId(t,o.targetId)),i++)})),nl.waitFor(r).next((()=>i))}getTargetCount(t){return nl.resolve(this.targetCount)}getTargetData(t,e){const n=this.Ts.get(e)||null;return nl.resolve(n)}addMatchingKeys(t,e,n){return this.As.ss(e,n),nl.resolve()}removeMatchingKeys(t,e,n){this.As.os(e,n);const i=this.persistence.referenceDelegate,r=[];return i&&e.forEach((e=>{r.push(i.markPotentiallyOrphaned(t,e))})),nl.waitFor(r)}removeMatchingKeysForTargetId(t,e){return this.As.cs(e),nl.resolve()}getMatchingKeysForTargetId(t,e){const n=this.As.hs(e);return nl.resolve(n)}containsKey(t,e){return nl.resolve(this.As.containsKey(e))}}class Rl{constructor(t,e){this.Ps={},this.Le=new wa(0),this.Be=!1,this.Be=!0,this.referenceDelegate=t(this),this.ze=new Al(this),this.Ht=new cl,this.He=function(t,e){return new Sl(t,e)}(this.Ht,(t=>this.referenceDelegate.bs(t))),this.N=new ol(e),this.Je=new bl(this.N)}start(){return Promise.resolve()}shutdown(){return this.Be=!1,Promise.resolve()}get started(){return this.Be}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Ht}getMutationQueue(t){let e=this.Ps[t.toKey()];return e||(e=new El(this.Ht,this.referenceDelegate),this.Ps[t.toKey()]=e),e}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getBundleCache(){return this.Je}runTransaction(t,e,n){ra("MemoryPersistence","Starting transaction:",t);const i=new Nl(this.Le.next());return this.referenceDelegate.vs(),n(i).next((t=>this.referenceDelegate.Vs(i).next((()=>t)))).toPromise().then((t=>(i.raiseOnCommittedEvent(),t)))}Ss(t,e){return nl.or(Object.values(this.Ps).map((n=>()=>n.containsKey(t,e))))}}class Nl extends el{constructor(t){super(),this.currentSequenceNumber=t}}class Cl{constructor(t){this.persistence=t,this.Ds=new Il,this.Cs=null}static Ns(t){return new Cl(t)}get xs(){if(this.Cs)return this.Cs;throw ca()}addReference(t,e,n){return this.Ds.addReference(n,e),this.xs.delete(n.toString()),nl.resolve()}removeReference(t,e,n){return this.Ds.removeReference(n,e),this.xs.add(n.toString()),nl.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),nl.resolve()}removeTarget(t,e){this.Ds.cs(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}vs(){this.Cs=new Set}Vs(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return nl.forEach(this.xs,(n=>{const i=Ha.fromPath(n);return this.ks(t,i).next((t=>{t||e.removeEntry(i)}))})).next((()=>(this.Cs=null,e.apply(t))))}updateLimboDocument(t,e){return this.ks(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}bs(t){return 0}ks(t,e){return nl.or([()=>nl.resolve(this.Ds.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ss(t,e)])}}class Ol{constructor(){this.activeTargetIds=Iu}Fs(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ms(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Dl{constructor(){this.yi=new Ol,this.pi={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.yi.Fs(t),this.pi[t]||"not-current"}updateQueryState(t,e,n){this.pi[t]=e}removeLocalQueryTarget(t){this.yi.Ms(t)}isLocalQueryTarget(t){return this.yi.activeTargetIds.has(t)}clearQueryState(t){delete this.pi[t]}getAllActiveQueryTargets(){return this.yi.activeTargetIds}isActiveQueryTarget(t){return this.yi.activeTargetIds.has(t)}start(){return this.yi=new Ol,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Pl{Ei(t){}shutdown(){}}class Ll{constructor(){this.Ti=()=>this.Ii(),this.Ai=()=>this.Ri(),this.Pi=[],this.bi()}Ei(t){this.Pi.push(t)}shutdown(){window.removeEventListener("online",this.Ti),window.removeEventListener("offline",this.Ai)}bi(){window.addEventListener("online",this.Ti),window.addEventListener("offline",this.Ai)}Ii(){ra("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.Pi)t(0)}Ri(){ra("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.Pi)t(1)}static Pt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const xl={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Ml{constructor(t){this.vi=t.vi,this.Vi=t.Vi}Si(t){this.Di=t}Ci(t){this.Ni=t}onMessage(t){this.xi=t}close(){this.Vi()}send(t){this.vi(t)}ki(){this.Di()}$i(t){this.Ni(t)}Oi(t){this.xi(t)}}class Ul extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Fi=e+"://"+t.host,this.Mi="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Li(t,e,n,i){const r=this.Bi(t,e);ra("RestConnection","Sending: ",r,n);const s={};return this.Ui(s,i),this.qi(t,r,s,n).then((t=>(ra("RestConnection","Received: ",t),t)),(e=>{throw oa("RestConnection",`${t} failed with error: `,e,"url: ",r,"request:",n),e}))}Ki(t,e,n,i){return this.Li(t,e,n,i)}Ui(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/"+ea,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e)for(const n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n])}Bi(t,e){const n=xl[t];return`${this.Fi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}qi(t,e,n,i){return new Promise(((r,s)=>{const o=new Zo;o.listenOnce(Go.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case Ko.NO_ERROR:const e=o.getResponseJson();ra("Connection","XHR received:",JSON.stringify(e)),r(e);break;case Ko.TIMEOUT:ra("Connection",'RPC "'+t+'" timed out'),s(new da(ha.DEADLINE_EXCEEDED,"Request time out"));break;case Ko.HTTP_ERROR:const n=o.getStatus();if(ra("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(ha).indexOf(e)>=0?e:ha.UNKNOWN}(t.status);s(new da(e,t.message))}else s(new da(ha.UNKNOWN,"Server responded with status "+o.getStatus()))}else s(new da(ha.UNAVAILABLE,"Connection failed."));break;default:ca()}}finally{ra("Connection",'RPC "'+t+'" completed.')}}));const a=JSON.stringify(i);o.send(e,"POST",a,n,15)}))}ji(t,e){const n=[this.Fi,"/","google.firestore.v1.Firestore","/",t,"/channel"],i=new Bo,r=Pr(),s={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(s.xmlHttpFactory=new Qo({})),this.Ui(s.initMessageHeaders,e),u()||h()||c().indexOf("Electron/")>=0||d()||c().indexOf("MSAppHost/")>=0||l()||(s.httpHeadersOverwriteParam="$httpHeaders");const o=n.join("");ra("Connection","Creating WebChannel: "+o,s);const a=i.createWebChannel(o,s);let f=!1,p=!1;const g=new Ml({vi:t=>{p?ra("Connection","Not sending because WebChannel is closed:",t):(f||(ra("Connection","Opening WebChannel transport."),a.open(),f=!0),ra("Connection","WebChannel sending:",t),a.send(t))},Vi:()=>a.close()}),m=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return m(a,Yo.EventType.OPEN,(()=>{p||ra("Connection","WebChannel transport opened.")})),m(a,Yo.EventType.CLOSE,(()=>{p||(p=!0,ra("Connection","WebChannel transport closed"),g.$i())})),m(a,Yo.EventType.ERROR,(t=>{p||(p=!0,oa("Connection","WebChannel transport errored:",t),g.$i(new da(ha.UNAVAILABLE,"The operation could not be completed")))})),m(a,Yo.EventType.MESSAGE,(t=>{var e;if(!p){const n=t.data[0];ua(!!n);const i=n,r=i.error||(null===(e=i[0])||void 0===e?void 0:e.error);if(r){ra("Connection","WebChannel received error:",r);const t=r.status;let e=function(t){const e=cu[t];if(void 0!==e)return function(t){if(void 0===t)return sa("GRPC error has no .code"),ha.UNKNOWN;switch(t){case cu.OK:return ha.OK;case cu.CANCELLED:return ha.CANCELLED;case cu.UNKNOWN:return ha.UNKNOWN;case cu.DEADLINE_EXCEEDED:return ha.DEADLINE_EXCEEDED;case cu.RESOURCE_EXHAUSTED:return ha.RESOURCE_EXHAUSTED;case cu.INTERNAL:return ha.INTERNAL;case cu.UNAVAILABLE:return ha.UNAVAILABLE;case cu.UNAUTHENTICATED:return ha.UNAUTHENTICATED;case cu.INVALID_ARGUMENT:return ha.INVALID_ARGUMENT;case cu.NOT_FOUND:return ha.NOT_FOUND;case cu.ALREADY_EXISTS:return ha.ALREADY_EXISTS;case cu.PERMISSION_DENIED:return ha.PERMISSION_DENIED;case cu.FAILED_PRECONDITION:return ha.FAILED_PRECONDITION;case cu.ABORTED:return ha.ABORTED;case cu.OUT_OF_RANGE:return ha.OUT_OF_RANGE;case cu.UNIMPLEMENTED:return ha.UNIMPLEMENTED;case cu.DATA_LOSS:return ha.DATA_LOSS;default:return ca()}}(e)}(t),n=r.message;void 0===e&&(e=ha.INTERNAL,n="Unknown error status: "+t+" with message "+r.message),p=!0,g.$i(new da(e,n)),a.close()}else ra("Connection","WebChannel received:",n),g.Oi(n)}})),m(r,Wo.STAT_EVENT,(t=>{t.stat===Xo?ra("Connection","Detected buffering proxy"):t.stat===Jo&&ra("Connection","Detected no buffering proxy")})),setTimeout((()=>{g.ki()}),0),g}}function Fl(){return"undefined"!=typeof document?document:null}function Vl(t){return new Tu(t,!0)}class jl{constructor(t,e,n=1e3,i=1.5,r=6e4){this.Oe=t,this.timerId=e,this.Qi=n,this.Wi=i,this.Gi=r,this.zi=0,this.Hi=null,this.Ji=Date.now(),this.reset()}reset(){this.zi=0}Yi(){this.zi=this.Gi}Xi(t){this.cancel();const e=Math.floor(this.zi+this.Zi()),n=Math.max(0,Date.now()-this.Ji),i=Math.max(0,e-n);i>0&&ra("ExponentialBackoff",`Backing off for ${i} ms (base delay: ${this.zi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Hi=this.Oe.enqueueAfterDelay(this.timerId,i,(()=>(this.Ji=Date.now(),t()))),this.zi*=this.Wi,this.zi<this.Qi&&(this.zi=this.Qi),this.zi>this.Gi&&(this.zi=this.Gi)}tr(){null!==this.Hi&&(this.Hi.skipDelay(),this.Hi=null)}cancel(){null!==this.Hi&&(this.Hi.cancel(),this.Hi=null)}Zi(){return(Math.random()-.5)*this.zi}}class Bl{constructor(t,e,n,i,r,s){this.Oe=t,this.er=n,this.nr=i,this.credentialsProvider=r,this.listener=s,this.state=0,this.sr=0,this.ir=null,this.stream=null,this.rr=new jl(t,e)}ar(){return 1===this.state||2===this.state||4===this.state}cr(){return 2===this.state}start(){3!==this.state?this.auth():this.ur()}async stop(){this.ar()&&await this.close(0)}hr(){this.state=0,this.rr.reset()}lr(){this.cr()&&null===this.ir&&(this.ir=this.Oe.enqueueAfterDelay(this.er,6e4,(()=>this.dr())))}wr(t){this._r(),this.stream.send(t)}async dr(){if(this.cr())return this.close(0)}_r(){this.ir&&(this.ir.cancel(),this.ir=null)}async close(t,e){this._r(),this.rr.cancel(),this.sr++,3!==t?this.rr.reset():e&&e.code===ha.RESOURCE_EXHAUSTED?(sa(e.toString()),sa("Using maximum backoff delay to prevent overloading the backend."),this.rr.Yi()):e&&e.code===ha.UNAUTHENTICATED&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.mr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ci(e)}mr(){}auth(){this.state=1;const t=this.gr(this.sr),e=this.sr;this.credentialsProvider.getToken().then((t=>{this.sr===e&&this.yr(t)}),(e=>{t((()=>{const t=new da(ha.UNKNOWN,"Fetching auth token failed: "+e.message);return this.pr(t)}))}))}yr(t){const e=this.gr(this.sr);this.stream=this.Er(t),this.stream.Si((()=>{e((()=>(this.state=2,this.listener.Si())))})),this.stream.Ci((t=>{e((()=>this.pr(t)))})),this.stream.onMessage((t=>{e((()=>this.onMessage(t)))}))}ur(){this.state=4,this.rr.Xi((async()=>{this.state=0,this.start()}))}pr(t){return ra("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(3,t)}gr(t){return e=>{this.Oe.enqueueAndForget((()=>this.sr===t?e():(ra("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Hl extends Bl{constructor(t,e,n,i,r){super(t,"write_stream_connection_backoff","write_stream_idle",e,n,r),this.N=i,this.Rr=!1}get Pr(){return this.Rr}start(){this.Rr=!1,this.lastStreamToken=void 0,super.start()}mr(){this.Rr&&this.br([])}Er(t){return this.nr.ji("Write",t)}onMessage(t){if(ua(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Rr){this.rr.reset();const e=function(t,e){return t&&t.length>0?(ua(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?Au(t.updateTime):Au(e);return n.isEqual(Sa.min())&&(n=Au(e)),new Kc(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=Au(t.commitTime);return this.listener.vr(n,e)}return ua(!t.writeResults||0===t.writeResults.length),this.Rr=!0,this.listener.Vr()}Sr(){const t={};t.database=function(t){return new Ca(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}(this.N),this.wr(t)}br(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof eu)n={update:Ou(t,e.key,e.value)};else if(e instanceof ou)n={delete:Nu(t,e.key)};else if(e instanceof nu)n={update:Ou(t,e.key,e.data),updateMask:Fu(e.fieldMask)};else{if(!(e instanceof au))return ca();n={verify:Nu(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof Uc)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof Fc)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof jc)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Hc)return{fieldPath:e.field.canonicalString(),increment:n.C};throw ca()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:ku(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:ca()}(t,e.precondition)),n}(this.N,t)))};this.wr(e)}}class ql extends class{}{constructor(t,e,n){super(),this.credentials=t,this.nr=e,this.N=n,this.Dr=!1}Cr(){if(this.Dr)throw new da(ha.FAILED_PRECONDITION,"The client has already been terminated.")}Li(t,e,n){return this.Cr(),this.credentials.getToken().then((i=>this.nr.Li(t,e,n,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===ha.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new da(ha.UNKNOWN,t.toString())}))}Ki(t,e,n){return this.Cr(),this.credentials.getToken().then((i=>this.nr.Ki(t,e,n,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===ha.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new da(ha.UNKNOWN,t.toString())}))}terminate(){this.Dr=!0}}class zl{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Nr=0,this.kr=null,this.$r=!0}Or(){0===this.Nr&&(this.Fr("Unknown"),this.kr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.kr=null,this.Mr("Backend didn't respond within 10 seconds."),this.Fr("Offline"),Promise.resolve()))))}Lr(t){"Online"===this.state?this.Fr("Unknown"):(this.Nr++,this.Nr>=1&&(this.Br(),this.Mr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Fr("Offline")))}set(t){this.Br(),this.Nr=0,"Online"===t&&(this.$r=!1),this.Fr(t)}Fr(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}Mr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.$r?(sa(e),this.$r=!1):ra("OnlineStateTracker",e)}Br(){null!==this.kr&&(this.kr.cancel(),this.kr=null)}}class $l{constructor(t,e,n,i,r){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Ur=[],this.qr=new Map,this.Kr=new Set,this.jr=[],this.Qr=r,this.Qr.Ei((t=>{n.enqueueAndForget((async()=>{Wl(this)&&(ra("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=la(t);e.Kr.add(4),await Gl(e),e.Wr.set("Unknown"),e.Kr.delete(4),await Kl(e)}(this))}))})),this.Wr=new zl(n,i)}}async function Kl(t){if(Wl(t))for(const e of t.jr)await e(!0)}async function Gl(t){for(const e of t.jr)await e(!1)}function Wl(t){return 0===la(t).Kr.size}async function Xl(t,e,n){if(!il(e))throw e;t.Kr.add(1),await Gl(t),t.Wr.set("Offline"),n||(n=()=>function(t){const e=la(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.ze.getLastRemoteSnapshotVersion(t)))}(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{ra("RemoteStore","Retrying IndexedDB access"),await n(),t.Kr.delete(1),await Kl(t)}))}function Jl(t,e){return e().catch((n=>Xl(t,n,e)))}async function Ql(t){const e=la(t),n=oh(e);let i=e.Ur.length>0?e.Ur[e.Ur.length-1].batchId:-1;for(;Yl(e);)try{const t=await _l(e.localStore,i);if(null===t){0===e.Ur.length&&n.lr();break}i=t.batchId,Zl(e,t)}catch(t){await Xl(e,t)}th(e)&&eh(e)}function Yl(t){return Wl(t)&&t.Ur.length<10}function Zl(t,e){t.Ur.push(e);const n=oh(t);n.cr()&&n.Pr&&n.br(e.mutations)}function th(t){return Wl(t)&&!oh(t).ar()&&t.Ur.length>0}function eh(t){oh(t).start()}async function nh(t){oh(t).Sr()}async function ih(t){const e=oh(t);for(const n of t.Ur)e.br(n.mutations)}async function rh(t,e,n){const i=t.Ur.shift(),r=sl.from(i,e,n);await Jl(t,(()=>t.remoteSyncer.applySuccessfulWrite(r))),await Ql(t)}async function sh(t,e){e&&oh(t).Pr&&await async function(t,e){if(function(t){switch(t){case ha.OK:return ca();case ha.CANCELLED:case ha.UNKNOWN:case ha.DEADLINE_EXCEEDED:case ha.RESOURCE_EXHAUSTED:case ha.INTERNAL:case ha.UNAVAILABLE:case ha.UNAUTHENTICATED:return!1;case ha.INVALID_ARGUMENT:case ha.NOT_FOUND:case ha.ALREADY_EXISTS:case ha.PERMISSION_DENIED:case ha.FAILED_PRECONDITION:case ha.ABORTED:case ha.OUT_OF_RANGE:case ha.UNIMPLEMENTED:case ha.DATA_LOSS:return!0;default:return ca()}}(n=e.code)&&n!==ha.ABORTED){const n=t.Ur.shift();oh(t).hr(),await Jl(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await Ql(t)}var n}(t,e),th(t)&&eh(t)}function oh(t){return t.Hr||(t.Hr=function(t,e,n){const i=la(t);return i.Cr(),new Hl(e,i.nr,i.credentials,i.N,n)}(t.datastore,t.asyncQueue,{Si:nh.bind(null,t),Ci:sh.bind(null,t),Vr:ih.bind(null,t),vr:rh.bind(null,t)}),t.jr.push((async e=>{e?(t.Hr.hr(),await Ql(t)):(await t.Hr.stop(),t.Ur.length>0&&(ra("RemoteStore",`Stopping write stream with ${t.Ur.length} pending writes`),t.Ur=[]))}))),t.Hr}class ah{constructor(t,e,n,i,r){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=i,this.removalCallback=r,this.deferred=new fa,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,i,r){const s=Date.now()+n,o=new ah(t,e,s,i,r);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new da(ha.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function ch(t,e){if(sa("AsyncQueue",`${e}: ${t}`),il(t))return new da(ha.UNAVAILABLE,`${e}: ${t}`);throw t}class uh{constructor(){this.queries=new fl((t=>kc(t)),Sc),this.onlineState="Unknown",this.Zr=new Set}}class lh{constructor(t,e,n,i,r,s){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=i,this.currentUser=r,this.maxConcurrentLimboResolutions=s,this.No={},this.xo=new fl((t=>kc(t)),Sc),this.ko=new Map,this.$o=new Set,this.Oo=new lu(Ha.comparator),this.Fo=new Map,this.Mo=new Il,this.Lo={},this.Bo=new Map,this.Uo=hl.ie(),this.onlineState="Unknown",this.qo=void 0}get isPrimaryClient(){return!0===this.qo}}function hh(t,e,n){const i=la(t);if(i.isPrimaryClient&&0===n||!i.isPrimaryClient&&1===n){const t=[];i.xo.forEach(((n,i)=>{const r=i.view.eo(e);r.snapshot&&t.push(r.snapshot)})),function(t,e){const n=la(t);n.onlineState=e;let i=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.eo(e)&&(i=!0)})),i&&function(t){t.Zr.forEach((t=>{t.next()}))}(n)}(i.eventManager,e),t.length&&i.No.Tr(t),i.onlineState=e,i.isPrimaryClient&&i.sharedClientState.setOnlineState(e)}}async function dh(t,e){const n=la(t),i=e.batch.batchId;try{const t=await function(t,e){const n=la(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const i=e.batch.keys(),r=n.jn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,i){const r=n.batch,s=r.keys();let o=nl.resolve();return s.forEach((t=>{o=o.next((()=>i.getEntry(e,t))).next((e=>{const s=n.docVersions.get(t);ua(null!==s),e.version.compareTo(s)<0&&(r.applyToRemoteDocument(e,n),e.isValidDocument()&&i.addEntry(e,n.commitVersion))}))})),o.next((()=>t.In.removeMutationBatch(e,r)))}(n,t,e,r).next((()=>r.apply(t))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,i)))}))}(n.localStore,e);gh(n,i,null),ph(n,i),n.sharedClientState.updateMutationState(i,"acknowledged"),await mh(n,t)}catch(t){await dl(t)}}async function fh(t,e,n){const i=la(t);try{const t=await function(t,e){const n=la(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let i;return n.In.lookupMutationBatch(t,e).next((e=>(ua(null!==e),i=e.keys(),n.In.removeMutationBatch(t,e)))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.bn(t,i)))}))}(i.localStore,e);gh(i,e,n),ph(i,e),i.sharedClientState.updateMutationState(e,"rejected",n),await mh(i,t)}catch(n){await dl(n)}}function ph(t,e){(t.Bo.get(e)||[]).forEach((t=>{t.resolve()})),t.Bo.delete(e)}function gh(t,e,n){const i=la(t);let r=i.Lo[i.currentUser.toKey()];if(r){const t=r.get(e);t&&(n?t.reject(n):t.resolve(),r=r.remove(e)),i.Lo[i.currentUser.toKey()]=r}}async function mh(t,e,n){const i=la(t),r=[],s=[],o=[];i.xo.isEmpty()||(i.xo.forEach(((t,a)=>{o.push(i.Ko(a,e,n).then((t=>{if(t){i.isPrimaryClient&&i.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),r.push(t);const e=ml.kn(a.targetId,t);s.push(e)}})))})),await Promise.all(o),i.No.Tr(r),await async function(t,e){const n=la(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>nl.forEach(e,(e=>nl.forEach(e.Nn,(i=>n.persistence.referenceDelegate.addReference(t,e.targetId,i))).next((()=>nl.forEach(e.xn,(i=>n.persistence.referenceDelegate.removeReference(t,e.targetId,i)))))))))}catch(t){if(!il(t))throw t;ra("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Un.get(e),i=t.snapshotVersion,r=t.withLastLimboFreeSnapshotVersion(i);n.Un=n.Un.insert(e,r)}}}(i.localStore,s))}async function yh(t,e){const n=la(t);if(!n.currentUser.isEqual(e)){ra("SyncEngine","User change. New user:",e.toKey());const t=await wl(n.localStore,e);n.currentUser=e,function(t){t.Bo.forEach((t=>{t.forEach((t=>{t.reject(new da(ha.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Bo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await mh(n,t.Wn)}}function vh(t){const e=la(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=dh.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=fh.bind(null,e),e}class wh{constructor(){this.synchronizeTabs=!1}async initialize(t){this.N=Vl(t.databaseInfo.databaseId),this.sharedClientState=this.Wo(t),this.persistence=this.Go(t),await this.persistence.start(),this.gcScheduler=this.zo(t),this.localStore=this.Ho(t)}zo(t){return null}Ho(t){return function(t,e,n,i){return new vl(t,e,n,i)}(this.persistence,new yl,t.initialUser,this.N)}Go(t){return new Rl(Cl.Ns,this.N)}Wo(t){return new Dl}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class _h{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>hh(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=yh.bind(null,this.syncEngine),await async function(t,e){const n=la(t);e?(n.Kr.delete(2),await Kl(n)):e||(n.Kr.add(2),await Gl(n),n.Wr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new uh}createDatastore(t){const e=Vl(t.databaseInfo.databaseId),n=(i=t.databaseInfo,new Ul(i));var i;return function(t,e,n){return new ql(t,e,n)}(t.credentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,i=t.asyncQueue,r=t=>hh(this.syncEngine,t,0),s=Ll.Pt()?new Ll:new Pl,new $l(e,n,i,r,s);var e,n,i,r,s}createSyncEngine(t,e){return function(t,e,n,i,r,s,o){const a=new lh(t,e,n,i,r,s);return o&&(a.qo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=la(t);ra("RemoteStore","RemoteStore shutting down."),e.Kr.add(5),await Gl(e),e.Qr.shutdown(),e.Wr.set("Unknown")}(this.remoteStore)}}class bh{constructor(t,e,n){this.credentials=t,this.asyncQueue=e,this.databaseInfo=n,this.user=ta.UNAUTHENTICATED,this.clientId=ba.I(),this.credentialListener=()=>Promise.resolve(),this.credentials.start(e,(async t=>{ra("FirestoreClient","Received user=",t.uid),await this.credentialListener(t),this.user=t}))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,credentials:this.credentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.credentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new da(ha.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new fa;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.credentials.shutdown(),t.resolve()}catch(e){const n=ch(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function Ih(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(ra("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),ra("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let i=n.initialUser;t.setCredentialChangeListener((async t=>{i.isEqual(t)||(await wl(e.localStore,t),i=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new wh)),t.offlineComponents}(t);ra("FirestoreClient","Initializing OnlineComponentProvider");const i=await t.getConfiguration();await e.initialize(n,i),t.setCredentialChangeListener((t=>async function(t,e){const n=la(t);n.asyncQueue.verifyOperationInProgress(),ra("RemoteStore","RemoteStore received new credentials");const i=Wl(n);n.Kr.add(3),await Gl(n),i&&n.Wr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Kr.delete(3),await Kl(n)}(e.remoteStore,t))),t.onlineComponents=e}function Th(t){return async function(t){return t.onlineComponents||(ra("FirestoreClient","Using default OnlineComponentProvider"),await Ih(t,new _h)),t.onlineComponents}(t).then((t=>t.syncEngine))}class Eh{constructor(t,e,n,i,r,s,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=i,this.ssl=r,this.forceLongPolling=s,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class Sh{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof Sh&&t.projectId===this.projectId&&t.database===this.database}}const kh=new Map;function Ah(t,e,n){if(!n)throw new da(ha.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function Rh(t){if(!Ha.isDocumentKey(t))throw new da(ha.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Nh(t){if(Ha.isDocumentKey(t))throw new da(ha.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function Ch(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){if(t.constructor){const e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":ca()}class Oh{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new da(ha.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new da(ha.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,i){if(!0===e&&!0===i)throw new da(ha.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class Dh{constructor(t,e){this._credentials=e,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new Oh({}),this._settingsFrozen=!1,t instanceof Sh?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new da(ha.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Sh(t.options.projectId)}(t))}get app(){if(!this._app)throw new da(ha.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new da(ha.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new Oh(t),void 0!==t.credentials&&(this._credentials=function(t){if(!t)return new ga;switch(t.type){case"gapi":const e=t.client;return ua(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new va(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new da(ha.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=kh.get(t);e&&(ra("ComponentProvider","Removing Datastore"),kh.delete(t),e.terminate())}(this),Promise.resolve()}}class Ph{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new xh(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new Ph(this.firestore,t,this._key)}}class Lh{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new Lh(this.firestore,t,this._query)}}class xh extends Lh{constructor(t,e,n){super(t,e,function(t){return new Ic(t)}(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new Ph(this.firestore,null,new Ha(t))}withConverter(t){return new xh(this.firestore,t,this._path)}}class Mh{constructor(){this.fa=Promise.resolve(),this.da=[],this.wa=!1,this._a=[],this.ma=null,this.ga=!1,this.ya=!1,this.pa=[],this.rr=new jl(this,"async_queue_retry"),this.Ea=()=>{const t=Fl();t&&ra("AsyncQueue","Visibility state changed to "+t.visibilityState),this.rr.tr()};const t=Fl();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ea)}get isShuttingDown(){return this.wa}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Ta(),this.Ia(t)}enterRestrictedMode(t){if(!this.wa){this.wa=!0,this.ya=t||!1;const e=Fl();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ea)}}enqueue(t){if(this.Ta(),this.wa)return new Promise((()=>{}));const e=new fa;return this.Ia((()=>this.wa&&this.ya?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.da.push(t),this.Aa())))}async Aa(){if(0!==this.da.length){try{await this.da[0](),this.da.shift(),this.rr.reset()}catch(t){if(!il(t))throw t;ra("AsyncQueue","Operation failed with retryable error: "+t)}this.da.length>0&&this.rr.Xi((()=>this.Aa()))}}Ia(t){const e=this.fa.then((()=>(this.ga=!0,t().catch((t=>{throw this.ma=t,this.ga=!1,sa("INTERNAL UNHANDLED ERROR: ",function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((t=>(this.ga=!1,t))))));return this.fa=e,e}enqueueAfterDelay(t,e,n){this.Ta(),this.pa.indexOf(t)>-1&&(e=0);const i=ah.createAndSchedule(this,t,e,n,(t=>this.Ra(t)));return this._a.push(i),i}Ta(){this.ma&&ca()}verifyOperationInProgress(){}async Pa(){let t;do{t=this.fa,await t}while(t!==this.fa)}ba(t){for(const e of this._a)if(e.timerId===t)return!0;return!1}va(t){return this.Pa().then((()=>{this._a.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this._a)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Pa()}))}Va(t){this.pa.push(t)}Ra(t){const e=this._a.indexOf(t);this._a.splice(e,1)}}class Uh extends Dh{constructor(t,e){super(t,e),this.type="firestore",this._queue=new Mh,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Fh(this),this._firestoreClient.terminate()}}function Fh(t){var e;const n=t._freezeSettings(),i=function(t,e,n,i){return new Eh(t,e,n,i.host,i.ssl,i.experimentalForceLongPolling,i.experimentalAutoDetectLongPolling,i.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new bh(t._credentials,t._queue,i)}class Vh{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new da(ha.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Da(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class jh{constructor(t){this._byteString=t}static fromBase64String(t){try{return new jh(La.fromBase64String(t))}catch(t){throw new da(ha.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new jh(La.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class Bh{constructor(t){this._methodName=t}}class Hh{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new da(ha.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new da(ha.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return Ia(this._lat,t._lat)||Ia(this._long,t._long)}}const qh=/^__.*__$/;class zh{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new nu(t,this.data,this.fieldMask,e,this.fieldTransforms):new eu(t,this.data,e,this.fieldTransforms)}}function $h(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw ca()}}class Kh{constructor(t,e,n,i,r,s){this.settings=t,this.databaseId=e,this.N=n,this.ignoreUndefinedProperties=i,void 0===r&&this.Sa(),this.fieldTransforms=r||[],this.fieldMask=s||[]}get path(){return this.settings.path}get Da(){return this.settings.Da}Ca(t){return new Kh(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.N,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Na(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.Ca({path:n,xa:!1});return i.ka(t),i}$a(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.Ca({path:n,xa:!1});return i.Sa(),i}Oa(t){return this.Ca({path:void 0,xa:!0})}Fa(t){return id(t,this.settings.methodName,this.settings.Ma||!1,this.path,this.settings.La)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}Sa(){if(this.path)for(let t=0;t<this.path.length;t++)this.ka(this.path.get(t))}ka(t){if(0===t.length)throw this.Fa("Document fields must not be empty");if($h(this.Da)&&qh.test(t))throw this.Fa('Document fields cannot begin and end with "__"')}}class Gh{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.N=n||Vl(t)}Ba(t,e,n,i=!1){return new Kh({Da:t,methodName:e,La:n,path:Da.emptyPath(),xa:!1,Ma:i},this.databaseId,this.N,this.ignoreUndefinedProperties)}}function Wh(t){const e=t._freezeSettings(),n=Vl(t._databaseId);return new Gh(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Xh(t,e,n,i,r,s={}){const o=t.Ba(s.merge||s.mergeFields?2:0,e,n,r);td("Data must be an object, but it was:",o,i);const a=Yh(i,o);let c,u;if(s.merge)c=new Pa(o.fieldMask),u=o.fieldTransforms;else if(s.mergeFields){const t=[];for(const i of s.mergeFields){const r=ed(e,i,n);if(!o.contains(r))throw new da(ha.INVALID_ARGUMENT,`Field '${r}' is specified in your field mask but missing from your input data.`);rd(t,r)||t.push(r)}c=new Pa(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new zh(new tc(a),c,u)}class Jh extends Bh{_toFieldTransform(t){return new $c(t.path,new Uc)}isEqual(t){return t instanceof Jh}}function Qh(t,e){if(Zh(t=T(t)))return td("Unsupported field value:",e,t),Yh(t,e);if(t instanceof Bh)return function(t,e){if(!$h(e.Da))throw e.Fa(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Fa(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.xa&&4!==e.Da)throw e.Fa("Nested arrays are not supported");return function(t,e){const n=[];let i=0;for(const r of t){let t=Qh(r,e.Oa(i));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),i++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=T(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return Dc(e.N,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=Ea.fromDate(t);return{timestampValue:Eu(e.N,n)}}if(t instanceof Ea){const n=new Ea(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:Eu(e.N,n)}}if(t instanceof Hh)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof jh)return{bytesValue:Su(e.N,t._byteString)};if(t instanceof Ph){const n=e.databaseId,i=t.firestore._databaseId;if(!i.isEqual(n))throw e.Fa(`Document reference is for database ${i.projectId}/${i.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:Ru(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Fa(`Unsupported field value: ${Ch(t)}`)}(t,e)}function Yh(t,e){const n={};return Ra(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):Aa(t,((t,i)=>{const r=Qh(i,e.Na(t));null!=r&&(n[t]=r)})),{mapValue:{fields:n}}}function Zh(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Ea||t instanceof Hh||t instanceof jh||t instanceof Ph||t instanceof Bh)}function td(t,e,n){if(!Zh(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const i=Ch(n);throw"an object"===i?e.Fa(t+" a custom object"):e.Fa(t+" "+i)}}function ed(t,e,n){if((e=T(e))instanceof Vh)return e._internalPath;if("string"==typeof e)return function(t,e,n){if(e.search(nd)>=0)throw id(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new Vh(...e.split("."))._internalPath}catch(i){throw id(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}(t,e);throw id("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const nd=new RegExp("[~\\*/\\[\\]]");function id(t,e,n,i,r){const s=i&&!i.isEmpty(),o=void 0!==r;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(s||o)&&(c+=" (found",s&&(c+=` in field ${i}`),o&&(c+=` in document ${r}`),c+=")"),new da(ha.INVALID_ARGUMENT,a+t+c)}function rd(t,e){return t.some((t=>t.isEqual(e)))}function sd(t,e){const n=function(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new da(ha.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Ch(t);throw new da(ha.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}(t.firestore,Uh),i=function(t,e,...n){if(t=T(t),1===arguments.length&&(e=ba.I()),Ah("doc","path",e),t instanceof Dh){const i=Ca.fromString(e,...n);return Rh(i),new Ph(t,null,new Ha(i))}{if(!(t instanceof Ph||t instanceof xh))throw new da(ha.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const i=t._path.child(Ca.fromString(e,...n));return Rh(i),new Ph(t.firestore,t instanceof xh?t.converter:null,new Ha(i))}}(t),r=function(t,e,n){let i;return i=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,i}(t.converter,e);return function(t,e){return function(t,e){const n=new fa;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const i=vh(t);try{const t=await function(t,e){const n=la(t),i=Ea.now(),r=e.reduce(((t,e)=>t.add(e.key)),bu());let s;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Qn.bn(t,r).next((r=>{s=r;const o=[];for(const t of e){const e=Yc(t,s.get(t.key));null!=e&&o.push(new nu(t.key,e,ec(e.value.mapValue),Gc.exists(!0)))}return n.In.addMutationBatch(t,i,o,e)})))).then((t=>(t.applyToLocalDocumentSet(s),{batchId:t.batchId,changes:s})))}(i.localStore,e);i.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let i=t.Lo[t.currentUser.toKey()];i||(i=new lu(Ia)),i=i.insert(e,n),t.Lo[t.currentUser.toKey()]=i}(i,t.batchId,n),await mh(i,t.changes),await Ql(i.remoteStore)}catch(t){const e=ch(t,"Failed to persist write");n.reject(e)}}(await Th(t),e,n))),n.promise}(function(t){return t._firestoreClient||Fh(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}(t),e)}(n,[Xh(Wh(t.firestore),"addDoc",i._key,r,null!==t.converter,{}).toMutation(i._key,Gc.exists(!1))]).then((()=>i))}var od;ea=wt,gt(new S("firestore",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),i=new Uh(n,new ma(t.getProvider("auth-internal")));return e=Object.assign({useFetchStreams:!0},e),i._setSettings(e),i}),"PUBLIC")),bt("@firebase/firestore","3.0.1",void 0),function(t){t[t.NO_ERROR=0]="NO_ERROR",t[t.NETWORK_ERROR=1]="NETWORK_ERROR",t[t.ABORT=2]="ABORT"}(od||(od={}));const ad="firebasestorage.googleapis.com",cd="storageBucket";class ud extends f{constructor(t,e){super(ld(t),`Firebase Storage: ${e} (${ld(t)})`),this.customData={serverResponse:null},this._baseMessage=this.message,Object.setPrototypeOf(this,ud.prototype)}_codeEquals(t){return ld(t)===this.code}get serverResponse(){return this.customData.serverResponse}set serverResponse(t){this.customData.serverResponse=t,this.customData.serverResponse?this.message=`${this._baseMessage}\n${this.customData.serverResponse}`:this.message=this._baseMessage}}function ld(t){return"storage/"+t}function hd(){return new ud("unknown","An unknown error occurred, please check the error payload for server response.")}function dd(t){return new ud("invalid-argument",t)}function fd(){return new ud("app-deleted","The Firebase app was deleted.")}function pd(t,e){return new ud("invalid-format","String does not match format '"+t+"': "+e)}function gd(t){throw new ud("internal-error","Internal error: "+t)}class md{constructor(){this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=od.NO_ERROR,this.sendPromise_=new Promise((t=>{this.xhr_.addEventListener("abort",(()=>{this.errorCode_=od.ABORT,t()})),this.xhr_.addEventListener("error",(()=>{this.errorCode_=od.NETWORK_ERROR,t()})),this.xhr_.addEventListener("load",(()=>{t()}))}))}send(t,e,n,i){if(this.sent_)throw gd("cannot .send() more than once");if(this.sent_=!0,this.xhr_.open(e,t,!0),void 0!==i)for(const t in i)i.hasOwnProperty(t)&&this.xhr_.setRequestHeader(t,i[t].toString());return void 0!==n?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_}getErrorCode(){if(!this.sent_)throw gd("cannot .getErrorCode() before sending");return this.errorCode_}getStatus(){if(!this.sent_)throw gd("cannot .getStatus() before sending");try{return this.xhr_.status}catch(t){return-1}}getResponseText(){if(!this.sent_)throw gd("cannot .getResponseText() before sending");return this.xhr_.responseText}abort(){this.xhr_.abort()}getResponseHeader(t){return this.xhr_.getResponseHeader(t)}addUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.addEventListener("progress",t)}removeUploadProgressListener(t){null!=this.xhr_.upload&&this.xhr_.upload.removeEventListener("progress",t)}}class yd{createConnection(){return new md}}class vd{constructor(t,e){this.bucket=t,this.path_=e}get path(){return this.path_}get isRoot(){return 0===this.path.length}fullServerUrl(){const t=encodeURIComponent;return"/b/"+t(this.bucket)+"/o/"+t(this.path)}bucketOnlyServerUrl(){return"/b/"+encodeURIComponent(this.bucket)+"/o"}static makeFromBucketSpec(t,e){let n;try{n=vd.makeFromUrl(t,e)}catch(e){return new vd(t,"")}if(""===n.path)return n;throw new ud("invalid-default-bucket","Invalid default bucket '"+t+"'.")}static makeFromUrl(t,e){let n=null;const i="([A-Za-z0-9.\\-_]+)",r=new RegExp("^gs://"+i+"(/(.*))?$","i");function s(t){t.path_=decodeURIComponent(t.path)}const o=e.replace(/[.]/g,"\\."),a=[{regex:r,indices:{bucket:1,path:3},postModify:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path_=t.path_.slice(0,-1))}},{regex:new RegExp(`^https?://${o}/v[A-Za-z0-9_]+/b/${i}/o(/([^?#]*).*)?$`,"i"),indices:{bucket:1,path:3},postModify:s},{regex:new RegExp(`^https?://${e===ad?"(?:storage.googleapis.com|storage.cloud.google.com)":e}/${i}/([^?#]*)`,"i"),indices:{bucket:1,path:2},postModify:s}];for(let e=0;e<a.length;e++){const i=a[e],r=i.regex.exec(t);if(r){const t=r[i.indices.bucket];let e=r[i.indices.path];e||(e=""),n=new vd(t,e),i.postModify(n);break}}if(null==n)throw function(t){return new ud("invalid-url","Invalid URL '"+t+"'.")}(t);return n}}class wd{constructor(t){this.promise_=Promise.reject(t)}getPromise(){return this.promise_}cancel(t=!1){}}function _d(t){return"string"==typeof t||t instanceof String}function bd(t){return Id()&&t instanceof Blob}function Id(){return"undefined"!=typeof Blob}function Td(t,e,n,i){if(i<e)throw dd(`Invalid value for '${t}'. Expected ${e} or greater.`);if(i>n)throw dd(`Invalid value for '${t}'. Expected ${n} or less.`)}function Ed(t,e){const n=e.match(/^(\w+):\/\/.+/);let i=e;return null==(null==n?void 0:n[1])&&(i=`https://${e}`),`${i}/v0${t}`}function Sd(t){const e=encodeURIComponent;let n="?";for(const i in t)t.hasOwnProperty(i)&&(n=n+(e(i)+"=")+e(t[i])+"&");return n=n.slice(0,-1),n}class kd{constructor(t,e,n,i,r,s,o,a,c,u,l){this.pendingConnection_=null,this.backoffId_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=t,this.method_=e,this.headers_=n,this.body_=i,this.successCodes_=r.slice(),this.additionalRetryCodes_=s.slice(),this.callback_=o,this.errorCallback_=a,this.progressCallback_=u,this.timeout_=c,this.pool_=l,this.promise_=new Promise(((t,e)=>{this.resolve_=t,this.reject_=e,this.start_()}))}start_(){const t=this;function e(e,n){const i=t.resolve_,r=t.reject_,s=n.connection;if(n.wasSuccessCode)try{const e=t.callback_(s,s.getResponseText());void 0===e?i():i(e)}catch(t){r(t)}else if(null!==s){const e=hd();e.serverResponse=s.getResponseText(),t.errorCallback_?r(t.errorCallback_(s,e)):r(e)}else n.canceled?r(t.appDelete_?fd():new ud("canceled","User canceled the upload/download.")):r(new ud("retry-limit-exceeded","Max retry time for operation exceeded, please try again."))}this.canceled_?e(0,new Ad(!1,null,!0)):this.backoffId_=function(e,n,i){let r=1,s=null,o=!1,a=0;function c(){return 2===a}let u=!1;function l(...t){u||(u=!0,n.apply(null,t))}function h(e){s=setTimeout((()=>{s=null,function(e,n){if(n)return void e(!1,new Ad(!1,null,!0));const i=t.pool_.createConnection();function r(e){const n=e.loaded,i=e.lengthComputable?e.total:-1;null!==t.progressCallback_&&t.progressCallback_(n,i)}t.pendingConnection_=i,null!==t.progressCallback_&&i.addUploadProgressListener(r),i.send(t.url_,t.method_,t.body_,t.headers_).then((()=>{null!==t.progressCallback_&&i.removeUploadProgressListener(r),t.pendingConnection_=null;const n=i.getErrorCode()===od.NO_ERROR,s=i.getStatus();if(!n||t.isRetryStatusCode_(s)){const t=i.getErrorCode()===od.ABORT;return void e(!1,new Ad(!1,null,t))}const o=-1!==t.successCodes_.indexOf(s);e(!0,new Ad(o,i))}))}(d,c())}),e)}function d(t,...e){if(u)return;if(t)return void l.call(null,t,...e);if(c()||o)return void l.call(null,t,...e);let n;r<64&&(r*=2),1===a?(a=2,n=0):n=1e3*(r+Math.random()),h(n)}let f=!1;function p(t){f||(f=!0,u||(null!==s?(t||(a=2),clearTimeout(s),h(0)):t||(a=1)))}return h(0),setTimeout((()=>{o=!0,p(!0)}),i),p}(0,e,this.timeout_)}getPromise(){return this.promise_}cancel(t){this.canceled_=!0,this.appDelete_=t||!1,null!==this.backoffId_&&function(t){t(!1)}(this.backoffId_),null!==this.pendingConnection_&&this.pendingConnection_.abort()}isRetryStatusCode_(t){const e=t>=500&&t<600,n=-1!==[408,429].indexOf(t),i=-1!==this.additionalRetryCodes_.indexOf(t);return e||n||i}}class Ad{constructor(t,e,n){this.wasSuccessCode=t,this.connection=e,this.canceled=!!n}}function Rd(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}function Nd(...t){const e=Rd();if(void 0!==e){const n=new e;for(let e=0;e<t.length;e++)n.append(t[e]);return n.getBlob()}if(Id())return new Blob(t);throw new ud("unsupported-environment","This browser doesn't seem to support creating Blobs")}const Cd="base64",Od="base64url",Dd="data_url";class Pd{constructor(t,e){this.data=t,this.contentType=e||null}}function Ld(t){const e=[];for(let n=0;n<t.length;n++){let i=t.charCodeAt(n);i<=127?e.push(i):i<=2047?e.push(192|i>>6,128|63&i):55296==(64512&i)?n<t.length-1&&56320==(64512&t.charCodeAt(n+1))?(i=65536|(1023&i)<<10|1023&t.charCodeAt(++n),e.push(240|i>>18,128|i>>12&63,128|i>>6&63,128|63&i)):e.push(239,191,189):56320==(64512&i)?e.push(239,191,189):e.push(224|i>>12,128|i>>6&63,128|63&i)}return new Uint8Array(e)}function xd(t,e){switch(t){case Cd:{const n=-1!==e.indexOf("-"),i=-1!==e.indexOf("_");if(n||i)throw pd(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break}case Od:{const n=-1!==e.indexOf("+"),i=-1!==e.indexOf("/");if(n||i)throw pd(t,"Invalid character '"+(n?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/");break}}let n;try{n=atob(e)}catch(e){throw pd(t,"Invalid character found")}const i=new Uint8Array(n.length);for(let t=0;t<n.length;t++)i[t]=n.charCodeAt(t);return i}class Md{constructor(t){this.base64=!1,this.contentType=null;const e=t.match(/^data:([^,]+)?,/);if(null===e)throw pd(Dd,"Must be formatted 'data:[<mediatype>][;base64],<data>");const n=e[1]||null;var i,r;null!=n&&(this.base64=(r=";base64",(i=n).length>=7&&i.substring(i.length-7)===r),this.contentType=this.base64?n.substring(0,n.length-7):n),this.rest=t.substring(t.indexOf(",")+1)}}class Ud{constructor(t,e){let n=0,i="";bd(t)?(this.data_=t,n=t.size,i=t.type):t instanceof ArrayBuffer?(e?this.data_=new Uint8Array(t):(this.data_=new Uint8Array(t.byteLength),this.data_.set(new Uint8Array(t))),n=this.data_.length):t instanceof Uint8Array&&(e?this.data_=t:(this.data_=new Uint8Array(t.length),this.data_.set(t)),n=t.length),this.size_=n,this.type_=i}size(){return this.size_}type(){return this.type_}slice(t,e){if(bd(this.data_)){const s=(n=this.data_,i=t,r=e,n.webkitSlice?n.webkitSlice(i,r):n.mozSlice?n.mozSlice(i,r):n.slice?n.slice(i,r):null);return null===s?null:new Ud(s)}var n,i,r;{const n=new Uint8Array(this.data_.buffer,t,e-t);return new Ud(n,!0)}}static getBlob(...t){if(Id()){const e=t.map((t=>t instanceof Ud?t.data_:t));return new Ud(Nd.apply(null,e))}{const e=t.map((t=>_d(t)?function(t,e){switch(t){case"raw":return new Pd(Ld(e));case Cd:case Od:return new Pd(xd(t,e));case Dd:return new Pd(function(t){const e=new Md(t);return e.base64?xd(Cd,e.rest):function(t){let e;try{e=decodeURIComponent(t)}catch(t){throw pd(Dd,"Malformed data URL.")}return Ld(e)}(e.rest)}(e),new Md(e).contentType)}throw hd()}("raw",t).data:t.data_));let n=0;e.forEach((t=>{n+=t.byteLength}));const i=new Uint8Array(n);let r=0;return e.forEach((t=>{for(let e=0;e<t.length;e++)i[r++]=t[e]})),new Ud(i,!0)}}uploadData(){return this.data_}}function Fd(t){let e;try{e=JSON.parse(t)}catch(t){return null}return"object"!=typeof(n=e)||Array.isArray(n)?null:e;var n}function Vd(t){const e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)}function jd(t,e){return e}class Bd{constructor(t,e,n,i){this.server=t,this.local=e||t,this.writable=!!n,this.xform=i||jd}}let Hd=null;function qd(){if(Hd)return Hd;const t=[];t.push(new Bd("bucket")),t.push(new Bd("generation")),t.push(new Bd("metageneration")),t.push(new Bd("name","fullPath",!0));const e=new Bd("name");e.xform=function(t,e){return function(t){return!_d(t)||t.length<2?t:Vd(t)}(e)},t.push(e);const n=new Bd("size");return n.xform=function(t,e){return void 0!==e?Number(e):e},t.push(n),t.push(new Bd("timeCreated")),t.push(new Bd("updated")),t.push(new Bd("md5Hash",null,!0)),t.push(new Bd("cacheControl",null,!0)),t.push(new Bd("contentDisposition",null,!0)),t.push(new Bd("contentEncoding",null,!0)),t.push(new Bd("contentLanguage",null,!0)),t.push(new Bd("contentType",null,!0)),t.push(new Bd("metadata","customMetadata",!0)),Hd=t,Hd}function zd(t,e,n){const i=Fd(e);return null===i?null:function(t,e,n){const i={type:"file"},r=n.length;for(let t=0;t<r;t++){const r=n[t];i[r.local]=r.xform(i,e[r.server])}return function(t,e){Object.defineProperty(t,"ref",{get:function(){const n=t.bucket,i=t.fullPath,r=new vd(n,i);return e._makeStorageReference(r)}})}(i,t),i}(t,i,n)}class $d{constructor(t,e,n,i){this.url=t,this.method=e,this.handler=n,this.timeout=i,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}function Kd(t){if(!t)throw hd()}function Gd(t){return function(e,n){let i;var r,s;return 401===e.getStatus()?i=e.getResponseText().includes("Firebase App Check token is invalid")?new ud("unauthorized-app","This app does not have permission to access Firebase Storage on this project."):new ud("unauthenticated","User is not authenticated, please authenticate using Firebase Authentication and try again."):402===e.getStatus()?(s=t.bucket,i=new ud("quota-exceeded","Quota for bucket '"+s+"' exceeded, please view quota on https://firebase.google.com/pricing/.")):403===e.getStatus()?(r=t.path,i=new ud("unauthorized","User does not have permission to access '"+r+"'.")):i=n,i.serverResponse=n.serverResponse,i}}function Wd(t,e,n,i,r){const s=e.bucketOnlyServerUrl(),o={"X-Goog-Upload-Protocol":"multipart"},a=function(){let t="";for(let e=0;e<2;e++)t+=Math.random().toString().slice(2);return t}();o["Content-Type"]="multipart/related; boundary="+a;const c=function(t,e,n){const i=Object.assign({},n);return i.fullPath=t.path,i.size=e.size(),i.contentType||(i.contentType=function(t,e){return e&&e.type()||"application/octet-stream"}(0,e)),i}(e,i,r),u="--"+a+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+function(t,e){const n={},i=e.length;for(let r=0;r<i;r++){const i=e[r];i.writable&&(n[i.server]=t[i.local])}return JSON.stringify(n)}(c,n)+"\r\n--"+a+"\r\nContent-Type: "+c.contentType+"\r\n\r\n",l="\r\n--"+a+"--",h=Ud.getBlob(u,i,l);if(null===h)throw new ud("cannot-slice-blob","Cannot slice blob for upload. Please retry the upload.");const d={name:c.fullPath},f=Ed(s,t.host),p=t.maxUploadRetryTime,g=new $d(f,"POST",function(t,e){return function(n,i){const r=zd(t,i,e);return Kd(null!==r),r}}(t,n),p);return g.urlParams=d,g.headers=o,g.body=h.uploadData(),g.errorHandler=Gd(e),g}class Xd{constructor(t,e){this._service=t,this._location=e instanceof vd?e:vd.makeFromUrl(e,t.host)}toString(){return"gs://"+this._location.bucket+"/"+this._location.path}_newRef(t,e){return new Xd(t,e)}get root(){const t=new vd(this._location.bucket,"");return this._newRef(this._service,t)}get bucket(){return this._location.bucket}get fullPath(){return this._location.path}get name(){return Vd(this._location.path)}get storage(){return this._service}get parent(){const t=function(t){if(0===t.length)return null;const e=t.lastIndexOf("/");return-1===e?"":t.slice(0,e)}(this._location.path);if(null===t)return null;const e=new vd(this._location.bucket,t);return new Xd(this._service,e)}_throwIfRoot(t){if(""===this._location.path)throw function(t){return new ud("invalid-root-operation","The operation '"+t+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(t)}}async function Jd(t){t._throwIfRoot("getDownloadURL");const e=function(t,e,n){const i=Ed(e.fullServerUrl(),t.host),r=t.maxOperationRetryTime,s=new $d(i,"GET",function(t,e){return function(n,i){const r=zd(t,i,e);return Kd(null!==r),function(t,e,n){const i=Fd(e);if(null===i)return null;if(!_d(i.downloadTokens))return null;const r=i.downloadTokens;if(0===r.length)return null;const s=encodeURIComponent;return r.split(",").map((e=>{const i=t.bucket,r=t.fullPath;return Ed("/b/"+s(i)+"/o/"+s(r),n)+Sd({alt:"media",token:e})}))[0]}(r,i,t.host)}}(t,n),r);return s.errorHandler=function(t){const e=Gd(t);return function(n,i){let r=e(n,i);var s;return 404===n.getStatus()&&(s=t.path,r=new ud("object-not-found","Object '"+s+"' does not exist.")),r.serverResponse=i.serverResponse,r}}(e),s}(t.storage,t._location,qd());return(await t.storage.makeRequestWithTokens(e)).getPromise().then((t=>{if(null===t)throw new ud("no-download-url","The given file does not have any download URLs.");return t}))}function Qd(t,e){if(t instanceof Zd){const n=t;if(null==n._bucket)throw new ud("no-default-bucket","No default bucket found. Did you set the '"+cd+"' property when initializing the app?");const i=new Xd(n,n._bucket);return null!=e?Qd(i,e):i}return void 0!==e?function(t,e){const n=function(t,e){const n=e.split("/").filter((t=>t.length>0)).join("/");return 0===t.length?n:t+"/"+n}(t._location.path,e),i=new vd(t._location.bucket,n);return new Xd(t.storage,i)}(t,e):t}function Yd(t,e){const n=null==e?void 0:e[cd];return null==n?null:vd.makeFromBucketSpec(n,t)}class Zd{constructor(t,e,n,i,r,s){this.app=t,this._authProvider=e,this._appCheckProvider=n,this._pool=i,this._url=r,this._firebaseVersion=s,this._bucket=null,this._host=ad,this._appId=null,this._deleted=!1,this._maxOperationRetryTime=12e4,this._maxUploadRetryTime=6e5,this._requests=new Set,this._bucket=null!=r?vd.makeFromBucketSpec(r,this._host):Yd(this._host,this.app.options)}get host(){return this._host}set host(t){this._host=t,null!=this._url?this._bucket=vd.makeFromBucketSpec(this._url,t):this._bucket=Yd(t,this.app.options)}get maxUploadRetryTime(){return this._maxUploadRetryTime}set maxUploadRetryTime(t){Td("time",0,Number.POSITIVE_INFINITY,t),this._maxUploadRetryTime=t}get maxOperationRetryTime(){return this._maxOperationRetryTime}set maxOperationRetryTime(t){Td("time",0,Number.POSITIVE_INFINITY,t),this._maxOperationRetryTime=t}async _getAuthToken(){if(this._overrideAuthToken)return this._overrideAuthToken;const t=this._authProvider.getImmediate({optional:!0});if(t){const e=await t.getToken();if(null!==e)return e.accessToken}return null}async _getAppCheckToken(){const t=this._appCheckProvider.getImmediate({optional:!0});return t?(await t.getToken()).token:null}_delete(){return this._deleted||(this._deleted=!0,this._requests.forEach((t=>t.cancel())),this._requests.clear()),Promise.resolve()}_makeStorageReference(t){return new Xd(this,t)}_makeRequest(t,e,n){if(this._deleted)return new wd(fd());{const i=function(t,e,n,i,r,s){const o=Sd(t.urlParams),a=t.url+o,c=Object.assign({},t.headers);return function(t,e){e&&(t["X-Firebase-GMPID"]=e)}(c,e),function(t,e){null!==e&&e.length>0&&(t.Authorization="Firebase "+e)}(c,n),function(t,e){t["X-Firebase-Storage-Version"]="webjs/"+(null!=e?e:"AppManager")}(c,s),function(t,e){null!==e&&(t["X-Firebase-AppCheck"]=e)}(c,i),new kd(a,t.method,c,t.body,t.successCodes,t.additionalRetryCodes,t.handler,t.errorHandler,t.timeout,t.progressCallback,r)}(t,this._appId,e,n,this._pool,this._firebaseVersion);return this._requests.add(i),i.getPromise().then((()=>this._requests.delete(i)),(()=>this._requests.delete(i))),i}}async makeRequestWithTokens(t){const[e,n]=await Promise.all([this._getAuthToken(),this._getAppCheckToken()]);return this._makeRequest(t,e,n)}}const tf="storage";gt(new S(tf,(function(t,{instanceIdentifier:e}){const n=t.getProvider("app").getImmediate(),i=t.getProvider("auth-internal"),r=t.getProvider("app-check-internal");return new Zd(n,i,r,new yd,e,wt)}),"PUBLIC").setMultipleInstances(!0)),bt("@firebase/storage","0.8.1");const ef=function(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:lt,automaticDataCollectionEnabled:!1},e),i=n.name;if("string"!=typeof i||!i)throw yt.create("bad-app-name",{appName:String(i)});const r=dt.get(i);if(r){if(m(t,r.options)&&m(n,r.config))return r;throw yt.create("duplicate-app",{appName:i})}const s=new R(i);for(const t of ft.values())s.addComponent(t);const o=new vt(t,n,s);return dt.set(i,o),o}({apiKey:"AIzaSyDEbX-gQ6FwJD5oZGnaoiJu9qIaAG2LZ0M",authDomain:"upload-25f01.firebaseapp.com",projectId:"upload-25f01",storageBucket:"upload-25f01.firebasestorage.app",messagingSenderId:"97167487690",appId:"1:97167487690:web:88409aded0a1dd13f87a33",measurementId:"G-3Y94K1XCBK"}),nf=(function(t=_t()){const e=mt(t,"auth");e.isInitialized()?e.getImmediate():function(t,e){const n=mt(t,"auth");if(n.isInitialized()){const t=n.getImmediate();if(m(n.getOptions(),null!=e?e:{}))return t;St(t,"already-initialized")}n.initialize({options:e})}(t,{popupRedirectResolver:Fn,persistence:[on,He,ze]})}(ef),function(t=_t()){return mt(t,"firestore").getImmediate()}(ef)),rf=function(t=_t(),e){return mt(t=T(t),tf).getImmediate({identifier:e})}(ef),sf=document.getElementById("document-upload-page-submit");document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#document-upload-form").addEventListener("submit",(async t=>{t.preventDefault(),sf.disabled=!0,sf.innerText="Uploading...";const e=document.getElementById("document-upload-form"),n=document.getElementById("document-upload").files[0],i=document.getElementById("document-name").value,r=document.getElementById("type-of-document"),s=r.options[r.selectedIndex].text;if(!n)return alert("Please select a file to upload"),sf.disabled=!1,void(sf.innerText="Submit");if(n.size>2097152)return alert("File size must be less than 2MB."),sf.disabled=!1,void(sf.innerText="Submit");try{const t=(c=rf,u=`documents/${n.name}_${Date.now()}`,function(t,e){if(e&&/^[A-Za-z]+:\/\//.test(e)){if(t instanceof Zd)return new Xd(t,e);throw dd("To use ref(service, url), the first argument must be a Storage instance.")}return Qd(t,e)}(c=T(c),u));await(o=t,a=n,function(t,e,n){t._throwIfRoot("uploadBytes");const i=Wd(t.storage,t._location,qd(),new Ud(e,!0),n);return t.storage.makeRequestWithTokens(i).then((t=>t.getPromise())).then((e=>({metadata:e,ref:t})))}(o=T(o),a,void 0));const r=await function(t){return Jd(t=T(t))}(t);await sd(function(t,e,...n){if(t=T(t),Ah("collection","path",e),t instanceof Dh){const i=Ca.fromString(e,...n);return Nh(i),new xh(t,null,i)}{if(!(t instanceof Ph||t instanceof xh))throw new da(ha.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const i=Ca.fromString(t.path,...n).child(Ca.fromString(e));return Nh(i),new xh(t.firestore,null,i)}}(nf,"documents"),{documentName:i,documentType:s,fileName:n.name,fileType:n.type,fileSize:n.size,fileUrl:r,uploadedAt:new Jh("serverTimestamp")}),e.reset(),alert("Document uploaded successfully!"),window.location.href="view_documents_page.html"}catch(t){console.error("Upload error:",t),alert("An error occurred during upload.")}finally{sf.disabled=!1,sf.innerText="Submit"}var o,a,c,u}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,